using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WebWare.Models_ipdb
{
    public partial class ipdb2 : DbContext
    {
        public virtual DbSet<AddLevel1> AddLevel1 { get; set; }
        public virtual DbSet<AddLevel2> AddLevel2 { get; set; }
        public virtual DbSet<AddLevel3> AddLevel3 { get; set; }
        public virtual DbSet<AddVersionToGame> AddVersionToGame { get; set; }
        public virtual DbSet<AdminMenus> AdminMenus { get; set; }
        public virtual DbSet<AdminPageBlocks> AdminPageBlocks { get; set; }
        public virtual DbSet<AdminPages> AdminPages { get; set; }
        public virtual DbSet<AgreementDeputyConfirmation1> AgreementDeputyConfirmation1 { get; set; }
        public virtual DbSet<AgreementRequest> AgreementRequest { get; set; }
        public virtual DbSet<Agreements> Agreements { get; set; }
        public virtual DbSet<AllGameVersions> AllGameVersions { get; set; }
        public virtual DbSet<AllocateGameBasketsEditInformationDataEntry> AllocateGameBasketsEditInformationDataEntry { get; set; }
        public virtual DbSet<AllocateGameBasketsEditInformationReportActions> AllocateGameBasketsEditInformationReportActions { get; set; }
        public virtual DbSet<AnalizorMgntConfirmation> AnalizorMgntConfirmation { get; set; }
        public virtual DbSet<AnalizorMgntSelection> AnalizorMgntSelection { get; set; }
        public virtual DbSet<AnalyzeManagerObserveForm> AnalyzeManagerObserveForm { get; set; }
        public virtual DbSet<AnalyzeMgntReport> AnalyzeMgntReport { get; set; }
        public virtual DbSet<AnalyzeReportForm> AnalyzeReportForm { get; set; }
        public virtual DbSet<AnalyzerItemsCheck> AnalyzerItemsCheck { get; set; }
        public virtual DbSet<AnalyzerReport> AnalyzerReport { get; set; }
        public virtual DbSet<AnalyzerScoreForm> AnalyzerScoreForm { get; set; }
        public virtual DbSet<AnalyzerSelectionForAnalyze> AnalyzerSelectionForAnalyze { get; set; }
        public virtual DbSet<AnalyzorSelection> AnalyzorSelection { get; set; }
        public virtual DbSet<AnotherRatings> AnotherRatings { get; set; }
        public virtual DbSet<Appendixes> Appendixes { get; set; }
        public virtual DbSet<ApplicantInformation> ApplicantInformation { get; set; }
        public virtual DbSet<ApplyHologramApplyHologram> ApplyHologramApplyHologram { get; set; }
        public virtual DbSet<ApplyHologramDocumentaryDefect> ApplyHologramDocumentaryDefect { get; set; }
        public virtual DbSet<ApplyHologramDocumentChecking> ApplyHologramDocumentChecking { get; set; }
        public virtual DbSet<ApplyHologramDocumentRegistration> ApplyHologramDocumentRegistration { get; set; }
        public virtual DbSet<ApplyingForGoodsForm1> ApplyingForGoodsForm1 { get; set; }
        public virtual DbSet<ApplyingForGoodsForm2> ApplyingForGoodsForm2 { get; set; }
        public virtual DbSet<ApplyingForGoodsForm3> ApplyingForGoodsForm3 { get; set; }
        public virtual DbSet<ApplyingForGoodsForm4> ApplyingForGoodsForm4 { get; set; }
        public virtual DbSet<ApplyingForGoodsForm5> ApplyingForGoodsForm5 { get; set; }
        public virtual DbSet<ApplyingForGoodsForm6> ApplyingForGoodsForm6 { get; set; }
        public virtual DbSet<ApplyingForGoodsForm7> ApplyingForGoodsForm7 { get; set; }
        public virtual DbSet<ArtCulturalActivities> ArtCulturalActivities { get; set; }
        public virtual DbSet<AttractingTestablePersonnelForm1> AttractingTestablePersonnelForm1 { get; set; }
        public virtual DbSet<AttractingTestablePersonnelFormB> AttractingTestablePersonnelFormB { get; set; }
        public virtual DbSet<AttractingTestablePersonnelFormD> AttractingTestablePersonnelFormD { get; set; }
        public virtual DbSet<AttractingTestablePersonnelFormESubFormA> AttractingTestablePersonnelFormESubFormA { get; set; }
        public virtual DbSet<AttractingTestablePersonnelFormESubFormB> AttractingTestablePersonnelFormESubFormB { get; set; }
        public virtual DbSet<AttractingTestablePersonnelFormF> AttractingTestablePersonnelFormF { get; set; }
        public virtual DbSet<AttractingTestablePersonnelFormG> AttractingTestablePersonnelFormG { get; set; }
        public virtual DbSet<Attributes> Attributes { get; set; }
        public virtual DbSet<AuctionItems> AuctionItems { get; set; }
        public virtual DbSet<AuctionItems2> AuctionItems2 { get; set; }
        public virtual DbSet<BankHologramReserved> BankHologramReserved { get; set; }
        public virtual DbSet<Blocks> Blocks { get; set; }
        public virtual DbSet<Bscs> Bscs { get; set; }
        public virtual DbSet<CalendarComments> CalendarComments { get; set; }
        public virtual DbSet<CalendarEventGroupShares> CalendarEventGroupShares { get; set; }
        public virtual DbSet<CalendarEventParticipantGroups> CalendarEventParticipantGroups { get; set; }
        public virtual DbSet<CalendarEventParticipants> CalendarEventParticipants { get; set; }
        public virtual DbSet<CalendarEventPersonShares> CalendarEventPersonShares { get; set; }
        public virtual DbSet<CalenderEvents> CalenderEvents { get; set; }
        public virtual DbSet<CalenderIsHolidays> CalenderIsHolidays { get; set; }
        public virtual DbSet<CalenderSettings> CalenderSettings { get; set; }
        public virtual DbSet<Captchatest> Captchatest { get; set; }
        public virtual DbSet<CartableLetters> CartableLetters { get; set; }
        public virtual DbSet<Cartables> Cartables { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<Cbtest> Cbtest { get; set; }
        public virtual DbSet<ChartSettings> ChartSettings { get; set; }
        public virtual DbSet<Checkemail> Checkemail { get; set; }
        public virtual DbSet<CheckingFormMessages> CheckingFormMessages { get; set; }
        public virtual DbSet<CheckingForms> CheckingForms { get; set; }
        public virtual DbSet<CheckingGameCertificateR> CheckingGameCertificateR { get; set; }
        public virtual DbSet<CheckOutAuctionItems> CheckOutAuctionItems { get; set; }
        public virtual DbSet<ColorPortalSettings> ColorPortalSettings { get; set; }
        public virtual DbSet<CompanyRegistration> CompanyRegistration { get; set; }
        public virtual DbSet<ComplitingForms> ComplitingForms { get; set; }
        public virtual DbSet<Conditions> Conditions { get; set; }
        public virtual DbSet<Contents> Contents { get; set; }
        public virtual DbSet<ContentScore> ContentScore { get; set; }
        public virtual DbSet<ContentScoreAverage> ContentScoreAverage { get; set; }
        public virtual DbSet<ContractCommission> ContractCommission { get; set; }
        public virtual DbSet<ContractCommission2> ContractCommission2 { get; set; }
        public virtual DbSet<ContractConsultantForm> ContractConsultantForm { get; set; }
        public virtual DbSet<ContractDeputyConfirmation1> ContractDeputyConfirmation1 { get; set; }
        public virtual DbSet<ContractDeputyConfirmation2> ContractDeputyConfirmation2 { get; set; }
        public virtual DbSet<ContractDevelopMgntConfirmation1> ContractDevelopMgntConfirmation1 { get; set; }
        public virtual DbSet<ContractDevelopMgntConfirmation2> ContractDevelopMgntConfirmation2 { get; set; }
        public virtual DbSet<ContractFirstRequest> ContractFirstRequest { get; set; }
        public virtual DbSet<ContractLegalMgntConfirmation1> ContractLegalMgntConfirmation1 { get; set; }
        public virtual DbSet<ContractLegalMgntConfirmation2> ContractLegalMgntConfirmation2 { get; set; }
        public virtual DbSet<ContractLegalMgntConfirmation3> ContractLegalMgntConfirmation3 { get; set; }
        public virtual DbSet<ContractManualInsertion> ContractManualInsertion { get; set; }
        public virtual DbSet<ContractPayment> ContractPayment { get; set; }
        public virtual DbSet<Contracts> Contracts { get; set; }
        public virtual DbSet<ContractSealRequest> ContractSealRequest { get; set; }
        public virtual DbSet<ContractsManualInsertion> ContractsManualInsertion { get; set; }
        public virtual DbSet<ContractTozih> ContractTozih { get; set; }
        public virtual DbSet<ContractUpload> ContractUpload { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureApplyAwardAndHonors> ConvergentSupportiveStructureApplyAwardAndHonors { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureApplyAwardAndHonorsSub1> ConvergentSupportiveStructureApplyAwardAndHonorsSub1 { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureApplyAwardAndHonorsSub2> ConvergentSupportiveStructureApplyAwardAndHonorsSub2 { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureApplyAwardAndHonorsSub3> ConvergentSupportiveStructureApplyAwardAndHonorsSub3 { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureCompleteGameInfo> ConvergentSupportiveStructureCompleteGameInfo { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureCompleteGameInfoSubForm> ConvergentSupportiveStructureCompleteGameInfoSubForm { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureCompletePreRegistrationForm> ConvergentSupportiveStructureCompletePreRegistrationForm { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureCompletingIdentityInformation> ConvergentSupportiveStructureCompletingIdentityInformation { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureRecordAllDocuments> ConvergentSupportiveStructureRecordAllDocuments { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureRequestAdditionalInformation> ConvergentSupportiveStructureRequestAdditionalInformation { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureRequestAdditionalInformationSub1> ConvergentSupportiveStructureRequestAdditionalInformationSub1 { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsApplyingForAwards> ConvergentSupportiveStructureTeamsApplyingForAwards { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsApplyingForAwardsSub1> ConvergentSupportiveStructureTeamsApplyingForAwardsSub1 { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsApplyingForAwardsSub2> ConvergentSupportiveStructureTeamsApplyingForAwardsSub2 { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsApplyingForAwardsSub3> ConvergentSupportiveStructureTeamsApplyingForAwardsSub3 { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsFurtherInformation> ConvergentSupportiveStructureTeamsFurtherInformation { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsFurtherInformationSub> ConvergentSupportiveStructureTeamsFurtherInformationSub { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsGameInfo> ConvergentSupportiveStructureTeamsGameInfo { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsGameInfoSub1> ConvergentSupportiveStructureTeamsGameInfoSub1 { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsIdentityInformation> ConvergentSupportiveStructureTeamsIdentityInformation { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsPreRegistration> ConvergentSupportiveStructureTeamsPreRegistration { get; set; }
        public virtual DbSet<ConvergentSupportiveStructureTeamsRecordAllDocuments> ConvergentSupportiveStructureTeamsRecordAllDocuments { get; set; }
        public virtual DbSet<CoreTemplates> CoreTemplates { get; set; }
        public virtual DbSet<CorrespondenceDocumentAccesses> CorrespondenceDocumentAccesses { get; set; }
        public virtual DbSet<CorrespondenceDocuments> CorrespondenceDocuments { get; set; }
        public virtual DbSet<CouncilReport> CouncilReport { get; set; }
        public virtual DbSet<DailyReportsSubform> DailyReportsSubform { get; set; }
        public virtual DbSet<DailyTimeSheet> DailyTimeSheet { get; set; }
        public virtual DbSet<DamagedSourceComment> DamagedSourceComment { get; set; }
        public virtual DbSet<DataModelGroups> DataModelGroups { get; set; }
        public virtual DbSet<DataModelInformation> DataModelInformation { get; set; }
        public virtual DbSet<Db34> Db34 { get; set; }
        public virtual DbSet<DeclarationHumanResourcesForm1> DeclarationHumanResourcesForm1 { get; set; }
        public virtual DbSet<DeclarationHumanResourcesForm2> DeclarationHumanResourcesForm2 { get; set; }
        public virtual DbSet<DeclarationHumanResourcesForm3> DeclarationHumanResourcesForm3 { get; set; }
        public virtual DbSet<DeclarationHumanResourcesForm4> DeclarationHumanResourcesForm4 { get; set; }
        public virtual DbSet<DeclarationHumanResourcesForm5> DeclarationHumanResourcesForm5 { get; set; }
        public virtual DbSet<DefectiveSource> DefectiveSource { get; set; }
        public virtual DbSet<DependantPersons> DependantPersons { get; set; }
        public virtual DbSet<DescriptionForm> DescriptionForm { get; set; }
        public virtual DbSet<DetermineAheTypeOfBidAction> DetermineAheTypeOfBidAction { get; set; }
        public virtual DbSet<DisseminationAuctionSpecification> DisseminationAuctionSpecification { get; set; }
        public virtual DbSet<DisseminationInitialVoting> DisseminationInitialVoting { get; set; }
        public virtual DbSet<DisseminationInitialVotingSubForm> DisseminationInitialVotingSubForm { get; set; }
        public virtual DbSet<DisseminationListItemsCourse> DisseminationListItemsCourse { get; set; }
        public virtual DbSet<DisseminationListItemsCourseSubForm> DisseminationListItemsCourseSubForm { get; set; }
        public virtual DbSet<DisseminationPublishersAuctions> DisseminationPublishersAuctions { get; set; }
        public virtual DbSet<DisseminationPublishersVotes> DisseminationPublishersVotes { get; set; }
        public virtual DbSet<DmlTblGame> DmlTblGame { get; set; }
        public virtual DbSet<DmlTblProducerNexclusiveNuser> DmlTblProducerNexclusiveNuser { get; set; }
        public virtual DbSet<Documents> Documents { get; set; }
        public virtual DbSet<EaDialog> EaDialog { get; set; }
        public virtual DbSet<EditAuctionItems> EditAuctionItems { get; set; }
        public virtual DbSet<EditGameChooseEditingGame> EditGameChooseEditingGame { get; set; }
        public virtual DbSet<EditGameChooseNameGame> EditGameChooseNameGame { get; set; }
        public virtual DbSet<EditGameEntryEditingDocumentation> EditGameEntryEditingDocumentation { get; set; }
        public virtual DbSet<EditGameGetEditingDocumentation> EditGameGetEditingDocumentation { get; set; }
        public virtual DbSet<EditGamePublisherReview> EditGamePublisherReview { get; set; }
        public virtual DbSet<EditGameRecordPayOff> EditGameRecordPayOff { get; set; }
        public virtual DbSet<EditGameReviewManager> EditGameReviewManager { get; set; }
        public virtual DbSet<EditItemUpload> EditItemUpload { get; set; }
        public virtual DbSet<EditorRatingRegisterRatingEditor> EditorRatingRegisterRatingEditor { get; set; }
        public virtual DbSet<EducationalBackgrounds> EducationalBackgrounds { get; set; }
        public virtual DbSet<EmailAddresses> EmailAddresses { get; set; }
        public virtual DbSet<EmailMessages> EmailMessages { get; set; }
        public virtual DbSet<Entities> Entities { get; set; }
        public virtual DbSet<EntityLogs> EntityLogs { get; set; }
        public virtual DbSet<ErrorLogs> ErrorLogs { get; set; }
        public virtual DbSet<Esra2RequestRegister> Esra2RequestRegister { get; set; }
        public virtual DbSet<EsraMngt2> EsraMngt2 { get; set; }
        public virtual DbSet<EsraMngtReport> EsraMngtReport { get; set; }
        public virtual DbSet<Ewewewewewewe> Ewewewewewewe { get; set; }
        public virtual DbSet<ExclusiveOriginalGamesAssistanceNezarat> ExclusiveOriginalGamesAssistanceNezarat { get; set; }
        public virtual DbSet<ExclusiveOriginalGamesExpertNezarat> ExclusiveOriginalGamesExpertNezarat { get; set; }
        public virtual DbSet<ExclusiveOriginalGamesRequestPublisher> ExclusiveOriginalGamesRequestPublisher { get; set; }
        public virtual DbSet<ExitPersonnelForm1> ExitPersonnelForm1 { get; set; }
        public virtual DbSet<ExitPersonnelForm10> ExitPersonnelForm10 { get; set; }
        public virtual DbSet<ExitPersonnelForm11> ExitPersonnelForm11 { get; set; }
        public virtual DbSet<ExitPersonnelForm12> ExitPersonnelForm12 { get; set; }
        public virtual DbSet<ExitPersonnelForm2> ExitPersonnelForm2 { get; set; }
        public virtual DbSet<ExitPersonnelForm3> ExitPersonnelForm3 { get; set; }
        public virtual DbSet<ExitPersonnelForm4> ExitPersonnelForm4 { get; set; }
        public virtual DbSet<ExitPersonnelForm5> ExitPersonnelForm5 { get; set; }
        public virtual DbSet<ExitPersonnelForm6> ExitPersonnelForm6 { get; set; }
        public virtual DbSet<ExitPersonnelForm6RegistrationOfDefects> ExitPersonnelForm6RegistrationOfDefects { get; set; }
        public virtual DbSet<ExitPersonnelForm7> ExitPersonnelForm7 { get; set; }
        public virtual DbSet<ExitPersonnelForm8> ExitPersonnelForm8 { get; set; }
        public virtual DbSet<ExitPersonnelForm9> ExitPersonnelForm9 { get; set; }
        public virtual DbSet<ExpertiseAndSkills> ExpertiseAndSkills { get; set; }
        public virtual DbSet<F1test> F1test { get; set; }
        public virtual DbSet<Fff> Fff { get; set; }
        public virtual DbSet<FieldProperties> FieldProperties { get; set; }
        public virtual DbSet<FileUpload> FileUpload { get; set; }
        public virtual DbSet<FileUploadSettings> FileUploadSettings { get; set; }
        public virtual DbSet<Filterings> Filterings { get; set; }
        public virtual DbSet<FinalGameRegisterForm> FinalGameRegisterForm { get; set; }
        public virtual DbSet<Folders> Folders { get; set; }
        public virtual DbSet<FormDetails> FormDetails { get; set; }
        public virtual DbSet<FormFields> FormFields { get; set; }
        public virtual DbSet<FormGroups> FormGroups { get; set; }
        public virtual DbSet<FormTabs> FormTabs { get; set; }
        public virtual DbSet<FoundingBoardInformation> FoundingBoardInformation { get; set; }
        public virtual DbSet<GameDevAreaExpertises> GameDevAreaExpertises { get; set; }
        public virtual DbSet<GameInformation> GameInformation { get; set; }
        public virtual DbSet<GameMarketList> GameMarketList { get; set; }
        public virtual DbSet<GameNetRequestForm> GameNetRequestForm { get; set; }
        public virtual DbSet<GamePlatform> GamePlatform { get; set; }
        public virtual DbSet<GamePlatforms> GamePlatforms { get; set; }
        public virtual DbSet<GamerAndStoryTellerChoose> GamerAndStoryTellerChoose { get; set; }
        public virtual DbSet<GamerCheckSource> GamerCheckSource { get; set; }
        public virtual DbSet<GamerChooseAgain> GamerChooseAgain { get; set; }
        public virtual DbSet<GamerReport> GamerReport { get; set; }
        public virtual DbSet<GamerScoreInput> GamerScoreInput { get; set; }
        public virtual DbSet<GamerSeenContent> GamerSeenContent { get; set; }
        public virtual DbSet<GamersFullGameMovie> GamersFullGameMovie { get; set; }
        public virtual DbSet<GamersFullMovie2> GamersFullMovie2 { get; set; }
        public virtual DbSet<GamerVideo> GamerVideo { get; set; }
        public virtual DbSet<GamesGid> GamesGid { get; set; }
        public virtual DbSet<GamesIid> GamesIid { get; set; }
        public virtual DbSet<GamesOid> GamesOid { get; set; }
        public virtual DbSet<GameSourceConfirmation> GameSourceConfirmation { get; set; }
        public virtual DbSet<GameStoryForm> GameStoryForm { get; set; }
        public virtual DbSet<GameTitleRegisterReq> GameTitleRegisterReq { get; set; }
        public virtual DbSet<GameVersions> GameVersions { get; set; }
        public virtual DbSet<GeneralSettings> GeneralSettings { get; set; }
        public virtual DbSet<GenresList> GenresList { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesAllocationGreenHologram> GetExclusiveHologramExclusiveGamesAllocationGreenHologram { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesAnnouncingCost> GetExclusiveHologramExclusiveGamesAnnouncingCost { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesApplyItems> GetExclusiveHologramExclusiveGamesApplyItems { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesApplyItemsSubForm> GetExclusiveHologramExclusiveGamesApplyItemsSubForm { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi> GetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesCheckApplyingDeputy> GetExclusiveHologramExclusiveGamesCheckApplyingDeputy { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesCheckPayingExpertSales> GetExclusiveHologramExclusiveGamesCheckPayingExpertSales { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesFinalFinancingManager> GetExclusiveHologramExclusiveGamesFinalFinancingManager { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesRecordRemainingHologram> GetExclusiveHologramExclusiveGamesRecordRemainingHologram { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesReviewAdminRequest> GetExclusiveHologramExclusiveGamesReviewAdminRequest { get; set; }
        public virtual DbSet<GetExclusiveHologramExclusiveGamesUploadDocumentationFee> GetExclusiveHologramExclusiveGamesUploadDocumentationFee { get; set; }
        public virtual DbSet<GetSource> GetSource { get; set; }
        public virtual DbSet<GoalObjectiveRelations> GoalObjectiveRelations { get; set; }
        public virtual DbSet<Goals> Goals { get; set; }
        public virtual DbSet<GreenHologramApplyItems> GreenHologramApplyItems { get; set; }
        public virtual DbSet<GreenHologramApplyItemsSubForm> GreenHologramApplyItemsSubForm { get; set; }
        public virtual DbSet<GreenHologramAttachmentDocumentation> GreenHologramAttachmentDocumentation { get; set; }
        public virtual DbSet<GreenHologramDeclareFee> GreenHologramDeclareFee { get; set; }
        public virtual DbSet<GreenHologramFinalFinancingManager> GreenHologramFinalFinancingManager { get; set; }
        public virtual DbSet<GreenHologramHologramAssignment> GreenHologramHologramAssignment { get; set; }
        public virtual DbSet<GreenHologramRecordRemaining> GreenHologramRecordRemaining { get; set; }
        public virtual DbSet<GreenHologramRequestReview> GreenHologramRequestReview { get; set; }
        public virtual DbSet<GreenHologramReviewDeputyFinancial> GreenHologramReviewDeputyFinancial { get; set; }
        public virtual DbSet<GreenHologramReviewFinancialRequest> GreenHologramReviewFinancialRequest { get; set; }
        public virtual DbSet<GreenHologramSalesExpert> GreenHologramSalesExpert { get; set; }
        public virtual DbSet<GreenHologramUploadDocumentation> GreenHologramUploadDocumentation { get; set; }
        public virtual DbSet<Groups> Groups { get; set; }
        public virtual DbSet<GtblTest> GtblTest { get; set; }
        public virtual DbSet<Hbltestform1> Hbltestform1 { get; set; }
        public virtual DbSet<HoldingDisseminationMeetingDissemination> HoldingDisseminationMeetingDissemination { get; set; }
        public virtual DbSet<HoldingDisseminationRecordResults> HoldingDisseminationRecordResults { get; set; }
        public virtual DbSet<HoldingDisseminationRecordResultsSubForm> HoldingDisseminationRecordResultsSubForm { get; set; }
        public virtual DbSet<HologramAttachmentCheckingCostAttachment> HologramAttachmentCheckingCostAttachment { get; set; }
        public virtual DbSet<HologramAttachmentCostAttachment> HologramAttachmentCostAttachment { get; set; }
        public virtual DbSet<HologramAttachmentHologramAttachmentRequest> HologramAttachmentHologramAttachmentRequest { get; set; }
        public virtual DbSet<HologramAttachmentHologramAttachmentRequestSubForm> HologramAttachmentHologramAttachmentRequestSubForm { get; set; }
        public virtual DbSet<HologramAttachmentHologramNumber> HologramAttachmentHologramNumber { get; set; }
        public virtual DbSet<HologramAttachmentHologramNumberSubForm> HologramAttachmentHologramNumberSubForm { get; set; }
        public virtual DbSet<HologramAttachmentInstallationList> HologramAttachmentInstallationList { get; set; }
        public virtual DbSet<HologramAttachmentInstallationListSubForm> HologramAttachmentInstallationListSubForm { get; set; }
        public virtual DbSet<HologramTransferToOldGamesApplyAndSelectGame> HologramTransferToOldGamesApplyAndSelectGame { get; set; }
        public virtual DbSet<HologramTransferToOldGamesApplyAndSelectGameSubForm> HologramTransferToOldGamesApplyAndSelectGameSubForm { get; set; }
        public virtual DbSet<HologramTransferToOldGamesDocumentReview> HologramTransferToOldGamesDocumentReview { get; set; }
        public virtual DbSet<IidSubForm> IidSubForm { get; set; }
        public virtual DbSet<ImportScore> ImportScore { get; set; }
        public virtual DbSet<IndicatorAccesses> IndicatorAccesses { get; set; }
        public virtual DbSet<Indicators> Indicators { get; set; }
        public virtual DbSet<Indices> Indices { get; set; }
        public virtual DbSet<IndieDeveloperRegisterForm> IndieDeveloperRegisterForm { get; set; }
        public virtual DbSet<IndieProjectTitles> IndieProjectTitles { get; set; }
        public virtual DbSet<InquiryOfLicencingUnit> InquiryOfLicencingUnit { get; set; }
        public virtual DbSet<InquiryOfPublicRelationsUnit> InquiryOfPublicRelationsUnit { get; set; }
        public virtual DbSet<InquiryOfSupportUnit> InquiryOfSupportUnit { get; set; }
        public virtual DbSet<InsertAndEditDetermineAction> InsertAndEditDetermineAction { get; set; }
        public virtual DbSet<InsertAndEditRegisterAuctionItem> InsertAndEditRegisterAuctionItem { get; set; }
        public virtual DbSet<InsertAndEditRequestEditTheAuctionItem> InsertAndEditRequestEditTheAuctionItem { get; set; }
        public virtual DbSet<InsertAndEditReviewDeputyNezarat> InsertAndEditReviewDeputyNezarat { get; set; }
        public virtual DbSet<InsertAndEditReviewTheRequestEditAuctionItem> InsertAndEditReviewTheRequestEditAuctionItem { get; set; }
        public virtual DbSet<InsertOmdunamePass> InsertOmdunamePass { get; set; }
        public virtual DbSet<InsertOperatorSelect> InsertOperatorSelect { get; set; }
        public virtual DbSet<InstitutionExecutives> InstitutionExecutives { get; set; }
        public virtual DbSet<InstitutionExecutivesProfile> InstitutionExecutivesProfile { get; set; }
        public virtual DbSet<Instructions> Instructions { get; set; }
        public virtual DbSet<InteractiveTables> InteractiveTables { get; set; }
        public virtual DbSet<IssueLicenseOriginalGamesCheckDeputyNezarat> IssueLicenseOriginalGamesCheckDeputyNezarat { get; set; }
        public virtual DbSet<IssueLicenseOriginalGamesCheckManagerEsra> IssueLicenseOriginalGamesCheckManagerEsra { get; set; }
        public virtual DbSet<IssueLicenseOriginalGamesRequestForIssuanceLicense> IssueLicenseOriginalGamesRequestForIssuanceLicense { get; set; }
        public virtual DbSet<IssueLicenseOriginalGamesRequestForIssuanceLicenseAgain> IssueLicenseOriginalGamesRequestForIssuanceLicenseAgain { get; set; }
        public virtual DbSet<IssueLicenseOriginalGamesUploadLicensePublish> IssueLicenseOriginalGamesUploadLicensePublish { get; set; }
        public virtual DbSet<IssueLicensingForPublicOldGamesInformationCompilation> IssueLicensingForPublicOldGamesInformationCompilation { get; set; }
        public virtual DbSet<IssueLicensingForPublicOldGamesLicenseRelease> IssueLicensingForPublicOldGamesLicenseRelease { get; set; }
        public virtual DbSet<IssueLicensingForPublicOldGamesRequestIssuanceLicense> IssueLicensingForPublicOldGamesRequestIssuanceLicense { get; set; }
        public virtual DbSet<IssueLicensingForPublicOldGamesRequestReissueIssueLicense> IssueLicensingForPublicOldGamesRequestReissueIssueLicense { get; set; }
        public virtual DbSet<IssueLicensingForPublicOldGamesReviewDeputyNezarat> IssueLicensingForPublicOldGamesReviewDeputyNezarat { get; set; }
        public virtual DbSet<IssueLicensingForPublicOldGamesReviewManagerEsra> IssueLicensingForPublicOldGamesReviewManagerEsra { get; set; }
        public virtual DbSet<IssueRequest> IssueRequest { get; set; }
        public virtual DbSet<IssuingPublishCertificate> IssuingPublishCertificate { get; set; }
        public virtual DbSet<JobBackgrounds> JobBackgrounds { get; set; }
        public virtual DbSet<Keys> Keys { get; set; }
        public virtual DbSet<Laws> Laws { get; set; }
        public virtual DbSet<LegalDocUpload> LegalDocUpload { get; set; }
        public virtual DbSet<LegalPersonRegistrationApplyAwardAndHonors> LegalPersonRegistrationApplyAwardAndHonors { get; set; }
        public virtual DbSet<LegalPersonRegistrationApplyAwardAndHonorsSub1> LegalPersonRegistrationApplyAwardAndHonorsSub1 { get; set; }
        public virtual DbSet<LegalPersonRegistrationApplyAwardAndHonorsSub2> LegalPersonRegistrationApplyAwardAndHonorsSub2 { get; set; }
        public virtual DbSet<LegalPersonRegistrationApplyAwardAndHonorsSub3> LegalPersonRegistrationApplyAwardAndHonorsSub3 { get; set; }
        public virtual DbSet<LegalPersonRegistrationCompleteGameInfo> LegalPersonRegistrationCompleteGameInfo { get; set; }
        public virtual DbSet<LegalPersonRegistrationCompleteGameInfoSubForm> LegalPersonRegistrationCompleteGameInfoSubForm { get; set; }
        public virtual DbSet<LegalPersonRegistrationCompletePreRegistrationForm> LegalPersonRegistrationCompletePreRegistrationForm { get; set; }
        public virtual DbSet<LegalPersonRegistrationCompletingIdentityInformation> LegalPersonRegistrationCompletingIdentityInformation { get; set; }
        public virtual DbSet<LegalPersonRegistrationRecordAllDocuments> LegalPersonRegistrationRecordAllDocuments { get; set; }
        public virtual DbSet<LegalPersonRegistrationRequestAdditionalInformation> LegalPersonRegistrationRequestAdditionalInformation { get; set; }
        public virtual DbSet<LegalPersonRegistrationRequestAdditionalInformationSub1> LegalPersonRegistrationRequestAdditionalInformationSub1 { get; set; }
        public virtual DbSet<LetterCategories> LetterCategories { get; set; }
        public virtual DbSet<LetterReceiveTypes> LetterReceiveTypes { get; set; }
        public virtual DbSet<Letters> Letters { get; set; }
        public virtual DbSet<LicenseIranianMobileGamesEsra> LicenseIranianMobileGamesEsra { get; set; }
        public virtual DbSet<LicenseIranianMobileGamesEsracheck> LicenseIranianMobileGamesEsracheck { get; set; }
        public virtual DbSet<LicenseIranianMobileGamesGame> LicenseIranianMobileGamesGame { get; set; }
        public virtual DbSet<LicenseIranianMobileGamesPreRegister> LicenseIranianMobileGamesPreRegister { get; set; }
        public virtual DbSet<LicenseIranianMobileGamesQuestionnaireForm> LicenseIranianMobileGamesQuestionnaireForm { get; set; }
        public virtual DbSet<LicensingPublicationAssignIdentifier> LicensingPublicationAssignIdentifier { get; set; }
        public virtual DbSet<LicensingPublicationContentReviewDocuments> LicensingPublicationContentReviewDocuments { get; set; }
        public virtual DbSet<LicensingPublicationContractFileChecking> LicensingPublicationContractFileChecking { get; set; }
        public virtual DbSet<LicensingPublicationContractWithForeignPublisher> LicensingPublicationContractWithForeignPublisher { get; set; }
        public virtual DbSet<LicensingPublicationRequestingPublishingLicense> LicensingPublicationRequestingPublishingLicense { get; set; }
        public virtual DbSet<LicensingPublicationRequestingPublishingLicense2> LicensingPublicationRequestingPublishingLicense2 { get; set; }
        public virtual DbSet<ListItemControls> ListItemControls { get; set; }
        public virtual DbSet<LowLevelAnalyze2> LowLevelAnalyze2 { get; set; }
        public virtual DbSet<LowLevelAnalyzeThree> LowLevelAnalyzeThree { get; set; }
        public virtual DbSet<MemberOfGroups> MemberOfGroups { get; set; }
        public virtual DbSet<MenuItems> MenuItems { get; set; }
        public virtual DbSet<MenuSettings> MenuSettings { get; set; }
        public virtual DbSet<MigrationHistory> MigrationHistory { get; set; }
        public virtual DbSet<MinistryInquiry> MinistryInquiry { get; set; }
        public virtual DbSet<MissionGoalRelations> MissionGoalRelations { get; set; }
        public virtual DbSet<Missions> Missions { get; set; }
        public virtual DbSet<Mlogs> Mlogs { get; set; }
        public virtual DbSet<MobileGameComment> MobileGameComment { get; set; }
        public virtual DbSet<MobileGameGenresList> MobileGameGenresList { get; set; }
        public virtual DbSet<MobileGameMarketLink> MobileGameMarketLink { get; set; }
        public virtual DbSet<MobileGameRating> MobileGameRating { get; set; }
        public virtual DbSet<MobileGameRatingResult> MobileGameRatingResult { get; set; }
        public virtual DbSet<MobileGamerConfirmation> MobileGamerConfirmation { get; set; }
        public virtual DbSet<MobileGamesAgeRatingReq> MobileGamesAgeRatingReq { get; set; }
        public virtual DbSet<MobileGamesRatingRequest> MobileGamesRatingRequest { get; set; }
        public virtual DbSet<MobileGamesRatingRequestSazmani> MobileGamesRatingRequestSazmani { get; set; }
        public virtual DbSet<MobileGamingLicenseClassificationQuestionnaire> MobileGamingLicenseClassificationQuestionnaire { get; set; }
        public virtual DbSet<MobileGamingLicenseForeignChangeAgeRating> MobileGamingLicenseForeignChangeAgeRating { get; set; }
        public virtual DbSet<MobileGamingLicenseForeignCheckGameRatings> MobileGamingLicenseForeignCheckGameRatings { get; set; }
        public virtual DbSet<MobileGamingLicenseForeignCheckingDocuments> MobileGamingLicenseForeignCheckingDocuments { get; set; }
        public virtual DbSet<MobileGamingLicenseForeignCheckRecievedDocuments> MobileGamingLicenseForeignCheckRecievedDocuments { get; set; }
        public virtual DbSet<MobileGamingLicenseForeignLoadingPackageScheme> MobileGamingLicenseForeignLoadingPackageScheme { get; set; }
        public virtual DbSet<MobileGamingLicenseForeignRequestingPublishing> MobileGamingLicenseForeignRequestingPublishing { get; set; }
        public virtual DbSet<MobileGamingLicenseForeignScheduleReview> MobileGamingLicenseForeignScheduleReview { get; set; }
        public virtual DbSet<MobileGamingLicenseSendRequest> MobileGamingLicenseSendRequest { get; set; }
        public virtual DbSet<MobilePublishCertificateRequest> MobilePublishCertificateRequest { get; set; }
        public virtual DbSet<Modules> Modules { get; set; }
        public virtual DbSet<NarratorReport> NarratorReport { get; set; }
        public virtual DbSet<Nezaratmoavennazaramo> Nezaratmoavennazaramo { get; set; }
        public virtual DbSet<NezaratOw> NezaratOw { get; set; }
        public virtual DbSet<NmobileGameAgeRatingReq> NmobileGameAgeRatingReq { get; set; }
        public virtual DbSet<NmobileGameAgeRatingReqSazmani> NmobileGameAgeRatingReqSazmani { get; set; }
        public virtual DbSet<NodeDetails> NodeDetails { get; set; }
        public virtual DbSet<Notes> Notes { get; set; }
        public virtual DbSet<Notifications> Notifications { get; set; }
        public virtual DbSet<ObjectiveProcessRelations> ObjectiveProcessRelations { get; set; }
        public virtual DbSet<Objectives> Objectives { get; set; }
        public virtual DbSet<OldGamePropellerReleaseSelectPermissionsRelease> OldGamePropellerReleaseSelectPermissionsRelease { get; set; }
        public virtual DbSet<OldGamePropellerReleaseUploadPropellerRelease> OldGamePropellerReleaseUploadPropellerRelease { get; set; }
        public virtual DbSet<OldGameReleaseLicenseSelectGame> OldGameReleaseLicenseSelectGame { get; set; }
        public virtual DbSet<OldHologramGameApplyHologramSubForm> OldHologramGameApplyHologramSubForm { get; set; }
        public virtual DbSet<OldHologramGameCheckCostAttachment> OldHologramGameCheckCostAttachment { get; set; }
        public virtual DbSet<OldHologramGameCostAttachment> OldHologramGameCostAttachment { get; set; }
        public virtual DbSet<OldHologramGameFinalInstallationListSubForm> OldHologramGameFinalInstallationListSubForm { get; set; }
        public virtual DbSet<OldHologramGameHologramNumber> OldHologramGameHologramNumber { get; set; }
        public virtual DbSet<OldHologramGameHologramNumberSubForm> OldHologramGameHologramNumberSubForm { get; set; }
        public virtual DbSet<OnlineMarketsUserRequest> OnlineMarketsUserRequest { get; set; }
        public virtual DbSet<OnlineMobileDistributionCertRequest> OnlineMobileDistributionCertRequest { get; set; }
        public virtual DbSet<Operations> Operations { get; set; }
        public virtual DbSet<OrganizationDocuments> OrganizationDocuments { get; set; }
        public virtual DbSet<OrganizationFolders> OrganizationFolders { get; set; }
        public virtual DbSet<Organizations> Organizations { get; set; }
        public virtual DbSet<Organizations1> Organizations1 { get; set; }
        public virtual DbSet<OtherRatings> OtherRatings { get; set; }
        public virtual DbSet<OutcomingLetterCategories> OutcomingLetterCategories { get; set; }
        public virtual DbSet<OutcomingLetterSendTypes> OutcomingLetterSendTypes { get; set; }
        public virtual DbSet<OutsidePeoples> OutsidePeoples { get; set; }
        public virtual DbSet<PageBlocks> PageBlocks { get; set; }
        public virtual DbSet<PbublishLicenseUpload> PbublishLicenseUpload { get; set; }
        public virtual DbSet<People> People { get; set; }
        public virtual DbSet<PepgameLicenseConfirmation> PepgameLicenseConfirmation { get; set; }
        public virtual DbSet<PepgameLicenseRequest> PepgameLicenseRequest { get; set; }
        public virtual DbSet<PerformancePerspectives> PerformancePerspectives { get; set; }
        public virtual DbSet<PermissionGroups> PermissionGroups { get; set; }
        public virtual DbSet<Permissions> Permissions { get; set; }
        public virtual DbSet<PersonalInformations> PersonalInformations { get; set; }
        public virtual DbSet<PersonFolders> PersonFolders { get; set; }
        public virtual DbSet<PhysicalPublishersAccounts> PhysicalPublishersAccounts { get; set; }
        public virtual DbSet<PhysicalPublishersBasicInformation> PhysicalPublishersBasicInformation { get; set; }
        public virtual DbSet<PhysicalPublishersDisapprovals> PhysicalPublishersDisapprovals { get; set; }
        public virtual DbSet<PhysicalPublishersFinalInformation> PhysicalPublishersFinalInformation { get; set; }
        public virtual DbSet<PhysicalPublishersUserId> PhysicalPublishersUserId { get; set; }
        public virtual DbSet<Pictogram2> Pictogram2 { get; set; }
        public virtual DbSet<PlatformsList> PlatformsList { get; set; }
        public virtual DbSet<PortalEmailSettings> PortalEmailSettings { get; set; }
        public virtual DbSet<PostCategories> PostCategories { get; set; }
        public virtual DbSet<PostPeoples> PostPeoples { get; set; }
        public virtual DbSet<PostRoles> PostRoles { get; set; }
        public virtual DbSet<Posts> Posts { get; set; }
        public virtual DbSet<PrintAuctionsSelectPublisher> PrintAuctionsSelectPublisher { get; set; }
        public virtual DbSet<PrivateIndividuals> PrivateIndividuals { get; set; }
        public virtual DbSet<ProcessChangeRequest> ProcessChangeRequest { get; set; }
        public virtual DbSet<ProcessEntities> ProcessEntities { get; set; }
        public virtual DbSet<Processes> Processes { get; set; }
        public virtual DbSet<ProcessStrategyRelations> ProcessStrategyRelations { get; set; }
        public virtual DbSet<ProductSpecifications> ProductSpecifications { get; set; }
        public virtual DbSet<ProjectAllocations> ProjectAllocations { get; set; }
        public virtual DbSet<ProjectLetters> ProjectLetters { get; set; }
        public virtual DbSet<Projects> Projects { get; set; }
        public virtual DbSet<PropellerReleaseCheckApplyingDeputy> PropellerReleaseCheckApplyingDeputy { get; set; }
        public virtual DbSet<PropellerReleaseSelectPermissionsRelease> PropellerReleaseSelectPermissionsRelease { get; set; }
        public virtual DbSet<PropellerReleaseUploadPropellerRelease> PropellerReleaseUploadPropellerRelease { get; set; }
        public virtual DbSet<PublisherSubmit> PublisherSubmit { get; set; }
        public virtual DbSet<PublishLicenceCover> PublishLicenceCover { get; set; }
        public virtual DbSet<RatingAccountApplyingRatingAccount> RatingAccountApplyingRatingAccount { get; set; }
        public virtual DbSet<RatingAccountCheckingFinancialDeputy> RatingAccountCheckingFinancialDeputy { get; set; }
        public virtual DbSet<RatingAccountFinancialManagerReview> RatingAccountFinancialManagerReview { get; set; }
        public virtual DbSet<RatingAccountReviewExpertSales> RatingAccountReviewExpertSales { get; set; }
        public virtual DbSet<RatingRequest> RatingRequest { get; set; }
        public virtual DbSet<RatingSystem> RatingSystem { get; set; }
        public virtual DbSet<RatingVersion> RatingVersion { get; set; }
        public virtual DbSet<ReadFromAnotherDbs> ReadFromAnotherDbs { get; set; }
        public virtual DbSet<RealDocUpload> RealDocUpload { get; set; }
        public virtual DbSet<ReceiverEmails> ReceiverEmails { get; set; }
        public virtual DbSet<ReceiveSourceFlag> ReceiveSourceFlag { get; set; }
        public virtual DbSet<References> References { get; set; }
        public virtual DbSet<RegisterPyramidTeamsApplyingForAwards> RegisterPyramidTeamsApplyingForAwards { get; set; }
        public virtual DbSet<RegisterPyramidTeamsApplyingForAwardsSub1> RegisterPyramidTeamsApplyingForAwardsSub1 { get; set; }
        public virtual DbSet<RegisterPyramidTeamsApplyingForAwardsSub2> RegisterPyramidTeamsApplyingForAwardsSub2 { get; set; }
        public virtual DbSet<RegisterPyramidTeamsApplyingForAwardsSub3> RegisterPyramidTeamsApplyingForAwardsSub3 { get; set; }
        public virtual DbSet<RegisterPyramidTeamsFurtherInformation> RegisterPyramidTeamsFurtherInformation { get; set; }
        public virtual DbSet<RegisterPyramidTeamsFurtherInformationSub> RegisterPyramidTeamsFurtherInformationSub { get; set; }
        public virtual DbSet<RegisterPyramidTeamsGameInfo> RegisterPyramidTeamsGameInfo { get; set; }
        public virtual DbSet<RegisterPyramidTeamsGameInfoSub1> RegisterPyramidTeamsGameInfoSub1 { get; set; }
        public virtual DbSet<RegisterPyramidTeamsIdentityInformation> RegisterPyramidTeamsIdentityInformation { get; set; }
        public virtual DbSet<RegisterPyramidTeamsPreRegistration> RegisterPyramidTeamsPreRegistration { get; set; }
        public virtual DbSet<RegisterPyramidTeamsRecordAllDocuments> RegisterPyramidTeamsRecordAllDocuments { get; set; }
        public virtual DbSet<RegisterTicket> RegisterTicket { get; set; }
        public virtual DbSet<RegistrationForeignContractForm1> RegistrationForeignContractForm1 { get; set; }
        public virtual DbSet<RegistrationForeignContractForm2> RegistrationForeignContractForm2 { get; set; }
        public virtual DbSet<RegistrationForeignContractForm3> RegistrationForeignContractForm3 { get; set; }
        public virtual DbSet<RegistrationForeignContractForm4> RegistrationForeignContractForm4 { get; set; }
        public virtual DbSet<RelationAddLevel2Test201808013> RelationAddLevel2Test201808013 { get; set; }
        public virtual DbSet<RelationAddVersionToGame> RelationAddVersionToGame { get; set; }
        public virtual DbSet<RelationAnalyzerScoreFormShowScoreAverage> RelationAnalyzerScoreFormShowScoreAverage { get; set; }
        public virtual DbSet<RelationAnotherRatingsGamerAndStoryTellerChoose> RelationAnotherRatingsGamerAndStoryTellerChoose { get; set; }
        public virtual DbSet<RelationApplyingForGoodsForm1> RelationApplyingForGoodsForm1 { get; set; }
        public virtual DbSet<RelationAttractingTestablePersonnelFormE> RelationAttractingTestablePersonnelFormE { get; set; }
        public virtual DbSet<RelationAuctionItems> RelationAuctionItems { get; set; }
        public virtual DbSet<RelationAuctionItems2> RelationAuctionItems2 { get; set; }
        public virtual DbSet<RelationAuctionItemsEditAuctionItems> RelationAuctionItemsEditAuctionItems { get; set; }
        public virtual DbSet<RelationContractPaymentContractSealRequest> RelationContractPaymentContractSealRequest { get; set; }
        public virtual DbSet<RelationConvergentSupportiveStructureApplyAwardAndHonorsSub1ConvergentSupportiveStructureApplyAwardAndHonors> RelationConvergentSupportiveStructureApplyAwardAndHonorsSub1ConvergentSupportiveStructureApplyAwardAndHonors { get; set; }
        public virtual DbSet<RelationConvergentSupportiveStructureApplyAwardAndHonorsSub2ConvergentSupportiveStructureApplyAwardAndHonors> RelationConvergentSupportiveStructureApplyAwardAndHonorsSub2ConvergentSupportiveStructureApplyAwardAndHonors { get; set; }
        public virtual DbSet<RelationConvergentSupportiveStructureApplyAwardAndHonorsSub3ConvergentSupportiveStructureApplyAwardAndHonors> RelationConvergentSupportiveStructureApplyAwardAndHonorsSub3ConvergentSupportiveStructureApplyAwardAndHonors { get; set; }
        public virtual DbSet<RelationConvergentSupportiveStructureCompleteGameInfoSubFormConvergentSupportiveStructureCompleteGameInfo> RelationConvergentSupportiveStructureCompleteGameInfoSubFormConvergentSupportiveStructureCompleteGameInfo { get; set; }
        public virtual DbSet<RelationConvergentSupportiveStructureTeamsApplyingForAwardsSub1ConvergentSupportiveStructureTeamsApplyingForAwards> RelationConvergentSupportiveStructureTeamsApplyingForAwardsSub1ConvergentSupportiveStructureTeamsApplyingForAwards { get; set; }
        public virtual DbSet<RelationConvergentSupportiveStructureTeamsApplyingForAwardsSub2ConvergentSupportiveStructureTeamsApplyingForAwards> RelationConvergentSupportiveStructureTeamsApplyingForAwardsSub2ConvergentSupportiveStructureTeamsApplyingForAwards { get; set; }
        public virtual DbSet<RelationConvergentSupportiveStructureTeamsApplyingForAwardsSub3ConvergentSupportiveStructureTeamsApplyingForAwards> RelationConvergentSupportiveStructureTeamsApplyingForAwardsSub3ConvergentSupportiveStructureTeamsApplyingForAwards { get; set; }
        public virtual DbSet<RelationConvergentSupportiveStructureTeamsFurtherInformationSubConvergentSupportiveStructureTeamsFurtherInformation> RelationConvergentSupportiveStructureTeamsFurtherInformationSubConvergentSupportiveStructureTeamsFurtherInformation { get; set; }
        public virtual DbSet<RelationConvergentSupportiveStructureTeamsGameInfoSub1ConvergentSupportiveStructureTeamsGameInfo> RelationConvergentSupportiveStructureTeamsGameInfoSub1ConvergentSupportiveStructureTeamsGameInfo { get; set; }
        public virtual DbSet<RelationDeclarationHumanResourcesForm1> RelationDeclarationHumanResourcesForm1 { get; set; }
        public virtual DbSet<RelationDisseminationInitialVoting> RelationDisseminationInitialVoting { get; set; }
        public virtual DbSet<RelationDisseminationInitialVotingSubForm> RelationDisseminationInitialVotingSubForm { get; set; }
        public virtual DbSet<RelationDisseminationListItemsCourse> RelationDisseminationListItemsCourse { get; set; }
        public virtual DbSet<RelationDisseminationListItemsCourseSubForm> RelationDisseminationListItemsCourseSubForm { get; set; }
        public virtual DbSet<RelationDisseminationPublishersAuctions> RelationDisseminationPublishersAuctions { get; set; }
        public virtual DbSet<RelationDisseminationPublishersVotes> RelationDisseminationPublishersVotes { get; set; }
        public virtual DbSet<RelationEditAuctionItems> RelationEditAuctionItems { get; set; }
        public virtual DbSet<RelationEditGameChooseEditingGame> RelationEditGameChooseEditingGame { get; set; }
        public virtual DbSet<RelationEditGameChooseNameGameEditGameChooseEditingGame> RelationEditGameChooseNameGameEditGameChooseEditingGame { get; set; }
        public virtual DbSet<RelationEditGameGetEditingDocumentation> RelationEditGameGetEditingDocumentation { get; set; }
        public virtual DbSet<RelationEditGamePublisherReview> RelationEditGamePublisherReview { get; set; }
        public virtual DbSet<RelationEditItemUpload> RelationEditItemUpload { get; set; }
        public virtual DbSet<RelationEditorRatingRegisterRatingEditor> RelationEditorRatingRegisterRatingEditor { get; set; }
        public virtual DbSet<RelationExclusiveOriginalGamesRequestPublisher> RelationExclusiveOriginalGamesRequestPublisher { get; set; }
        public virtual DbSet<RelationExitPersonnelForm6> RelationExitPersonnelForm6 { get; set; }
        public virtual DbSet<RelationFrmpictogram2WRadebandiSazmani> RelationFrmpictogram2WRadebandiSazmani { get; set; }
        public virtual DbSet<RelationFrmpictogramhaWRadebandiSazmani> RelationFrmpictogramhaWRadebandiSazmani { get; set; }
        public virtual DbSet<RelationGameMarketListSelectMyBosses> RelationGameMarketListSelectMyBosses { get; set; }
        public virtual DbSet<RelationGamersFullGameMovieGamersFullMovie2> RelationGamersFullGameMovieGamersFullMovie2 { get; set; }
        public virtual DbSet<RelationGreenHologramApplyItems> RelationGreenHologramApplyItems { get; set; }
        public virtual DbSet<RelationGreenHologramApplyItemsSubFormGreenHologramApplyItems> RelationGreenHologramApplyItemsSubFormGreenHologramApplyItems { get; set; }
        public virtual DbSet<RelationGreenHologramApplyItemsSubFormGreenHologramRequestReview> RelationGreenHologramApplyItemsSubFormGreenHologramRequestReview { get; set; }
        public virtual DbSet<RelationGreenHologramAttachmentDocumentation> RelationGreenHologramAttachmentDocumentation { get; set; }
        public virtual DbSet<RelationGreenHologramDeclareFee> RelationGreenHologramDeclareFee { get; set; }
        public virtual DbSet<RelationGreenHologramRequestReview> RelationGreenHologramRequestReview { get; set; }
        public virtual DbSet<RelationGreenHologramReviewFinancialRequest> RelationGreenHologramReviewFinancialRequest { get; set; }
        public virtual DbSet<RelationGreenHologramReviewFinancialRequestGreenHologramDeclareFee> RelationGreenHologramReviewFinancialRequestGreenHologramDeclareFee { get; set; }
        public virtual DbSet<RelationGreenHologramUploadDocumentation> RelationGreenHologramUploadDocumentation { get; set; }
        public virtual DbSet<RelationHoldingDisseminationMeetingDissemination> RelationHoldingDisseminationMeetingDissemination { get; set; }
        public virtual DbSet<RelationHoldingDisseminationRecordResults> RelationHoldingDisseminationRecordResults { get; set; }
        public virtual DbSet<RelationHoldingDisseminationRecordResultsSubFormHoldingDisseminationRecordResults> RelationHoldingDisseminationRecordResultsSubFormHoldingDisseminationRecordResults { get; set; }
        public virtual DbSet<RelationHologramAttachmentHologramAttachmentRequest> RelationHologramAttachmentHologramAttachmentRequest { get; set; }
        public virtual DbSet<RelationHologramAttachmentHologramAttachmentRequestSubForm> RelationHologramAttachmentHologramAttachmentRequestSubForm { get; set; }
        public virtual DbSet<RelationHologramAttachmentHologramNumber> RelationHologramAttachmentHologramNumber { get; set; }
        public virtual DbSet<RelationHologramAttachmentHologramNumberSubForm> RelationHologramAttachmentHologramNumberSubForm { get; set; }
        public virtual DbSet<RelationHologramAttachmentInstallationList> RelationHologramAttachmentInstallationList { get; set; }
        public virtual DbSet<RelationHologramAttachmentInstallationListSubForm> RelationHologramAttachmentInstallationListSubForm { get; set; }
        public virtual DbSet<RelationHologramTransferToOldGamesApplyAndSelectGame> RelationHologramTransferToOldGamesApplyAndSelectGame { get; set; }
        public virtual DbSet<RelationHologramTransferToOldGamesApplyAndSelectGameSubFormHologramTransferToOldGamesApplyAndSelectGame> RelationHologramTransferToOldGamesApplyAndSelectGameSubFormHologramTransferToOldGamesApplyAndSelectGame { get; set; }
        public virtual DbSet<RelationIidSubFormVgPrimaryInsertion> RelationIidSubFormVgPrimaryInsertion { get; set; }
        public virtual DbSet<RelationIssueLicensingForPublicOldGamesRequestIssuanceLicense> RelationIssueLicensingForPublicOldGamesRequestIssuanceLicense { get; set; }
        public virtual DbSet<RelationLegalPersonRegistrationApplyAwardAndHonorsSub1LegalPersonRegistrationApplyAwardAndHonors> RelationLegalPersonRegistrationApplyAwardAndHonorsSub1LegalPersonRegistrationApplyAwardAndHonors { get; set; }
        public virtual DbSet<RelationLegalPersonRegistrationApplyAwardAndHonorsSub2LegalPersonRegistrationApplyAwardAndHonors> RelationLegalPersonRegistrationApplyAwardAndHonorsSub2LegalPersonRegistrationApplyAwardAndHonors { get; set; }
        public virtual DbSet<RelationLegalPersonRegistrationApplyAwardAndHonorsSub3LegalPersonRegistrationApplyAwardAndHonors> RelationLegalPersonRegistrationApplyAwardAndHonorsSub3LegalPersonRegistrationApplyAwardAndHonors { get; set; }
        public virtual DbSet<RelationLegalPersonRegistrationCompleteGameInfo> RelationLegalPersonRegistrationCompleteGameInfo { get; set; }
        public virtual DbSet<RelationLegalPersonRegistrationCompleteGameInfoSubFormLegalPersonRegistrationCompleteGameInfo> RelationLegalPersonRegistrationCompleteGameInfoSubFormLegalPersonRegistrationCompleteGameInfo { get; set; }
        public virtual DbSet<RelationLegalPersonRegistrationRequestAdditionalInformationSub1LegalPersonRegistrationRequestAdditionalInformation> RelationLegalPersonRegistrationRequestAdditionalInformationSub1LegalPersonRegistrationRequestAdditionalInformation { get; set; }
        public virtual DbSet<RelationLicensingPublicationRequestingPublishingLicense> RelationLicensingPublicationRequestingPublishingLicense { get; set; }
        public virtual DbSet<RelationLowLevelAnalyze2AnalyzeManagerObserveForm> RelationLowLevelAnalyze2AnalyzeManagerObserveForm { get; set; }
        public virtual DbSet<RelationLowLevelAnalyze2AnalyzeReportForm> RelationLowLevelAnalyze2AnalyzeReportForm { get; set; }
        public virtual DbSet<RelationLowLevelAnalyze2AnalyzerItemsCheck> RelationLowLevelAnalyze2AnalyzerItemsCheck { get; set; }
        public virtual DbSet<RelationLowLevelAnalyze2LowLevelAnalyzeThree> RelationLowLevelAnalyze2LowLevelAnalyzeThree { get; set; }
        public virtual DbSet<RelationLowLevelAnalyzeThree> RelationLowLevelAnalyzeThree { get; set; }
        public virtual DbSet<RelationMobileGamesRatingRequestSazmani> RelationMobileGamesRatingRequestSazmani { get; set; }
        public virtual DbSet<RelationNmobileGameAgeRatingReq> RelationNmobileGameAgeRatingReq { get; set; }
        public virtual DbSet<RelationNmobileGameAgeRatingReqSazmani> RelationNmobileGameAgeRatingReqSazmani { get; set; }
        public virtual DbSet<RelationOldGameReleaseLicenseSelectGame> RelationOldGameReleaseLicenseSelectGame { get; set; }
        public virtual DbSet<RelationOldHologramGameApplyHologram> RelationOldHologramGameApplyHologram { get; set; }
        public virtual DbSet<RelationOldHologramGameApplyHologramSubForm> RelationOldHologramGameApplyHologramSubForm { get; set; }
        public virtual DbSet<RelationOldHologramGameFinalInstallationList> RelationOldHologramGameFinalInstallationList { get; set; }
        public virtual DbSet<RelationOldHologramGameHologramNumber> RelationOldHologramGameHologramNumber { get; set; }
        public virtual DbSet<RelationOldHologramGameHologramNumberSubForm> RelationOldHologramGameHologramNumberSubForm { get; set; }
        public virtual DbSet<RelationOrganizationMobileGamingLicenseForeignCheckingDocuments> RelationOrganizationMobileGamingLicenseForeignCheckingDocuments { get; set; }
        public virtual DbSet<RelationOrganizationsGameTitleRegisterReq> RelationOrganizationsGameTitleRegisterReq { get; set; }
        public virtual DbSet<RelationOrganizationsMobileGamingLicenseForeignCheckGameRatings> RelationOrganizationsMobileGamingLicenseForeignCheckGameRatings { get; set; }
        public virtual DbSet<RelationOrganizationsSubmitSource> RelationOrganizationsSubmitSource { get; set; }
        public virtual DbSet<RelationOrganizationsSur030GameRatingControl> RelationOrganizationsSur030GameRatingControl { get; set; }
        public virtual DbSet<RelationOrganizationsVersionInsertDecide> RelationOrganizationsVersionInsertDecide { get; set; }
        public virtual DbSet<RelationOtherRatingsGamerAndStoryTellerChoose> RelationOtherRatingsGamerAndStoryTellerChoose { get; set; }
        public virtual DbSet<RelationPeopleAgreementRequest> RelationPeopleAgreementRequest { get; set; }
        public virtual DbSet<RelationPeopleContractFirstRequest> RelationPeopleContractFirstRequest { get; set; }
        public virtual DbSet<RelationPeopleContractSealRequest> RelationPeopleContractSealRequest { get; set; }
        public virtual DbSet<RelationPeopleContractUpload> RelationPeopleContractUpload { get; set; }
        public virtual DbSet<RelationPeopleSuportReplyForm> RelationPeopleSuportReplyForm { get; set; }
        public virtual DbSet<RelationPeopleSupportMgntCheck> RelationPeopleSupportMgntCheck { get; set; }
        public virtual DbSet<RelationPictogram2WRadebandiSazmani> RelationPictogram2WRadebandiSazmani { get; set; }
        public virtual DbSet<RelationPrintAuctionsSelectPublisher> RelationPrintAuctionsSelectPublisher { get; set; }
        public virtual DbSet<RelationPropellerReleaseCheckApplyingDeputy> RelationPropellerReleaseCheckApplyingDeputy { get; set; }
        public virtual DbSet<RelationPropellerReleaseSelectPermissionsRelease> RelationPropellerReleaseSelectPermissionsRelease { get; set; }
        public virtual DbSet<RelationRatingAccountApplyingRatingAccount> RelationRatingAccountApplyingRatingAccount { get; set; }
        public virtual DbSet<RelationRegisterPyramidTeamsGameInfo> RelationRegisterPyramidTeamsGameInfo { get; set; }
        public virtual DbSet<RelationRelationLowLevelAnalyze2AnalyzeReportFormAnalyzerItemsCheck> RelationRelationLowLevelAnalyze2AnalyzeReportFormAnalyzerItemsCheck { get; set; }
        public virtual DbSet<RelationRelationTblPhysicalPublishLicensePropellerReleaseSelectPermissionsReleasePropellerReleaseCheckApplyingDeputy> RelationRelationTblPhysicalPublishLicensePropellerReleaseSelectPermissionsReleasePropellerReleaseCheckApplyingDeputy { get; set; }
        public virtual DbSet<RelationRelationTblVersionGreenHologramApplyItemsSubFormGreenHologramApplyItems> RelationRelationTblVersionGreenHologramApplyItemsSubFormGreenHologramApplyItems { get; set; }
        public virtual DbSet<RelationRelationUnCategorizedContentFormAnalyzeReportFormAnalyzerItemsCheck> RelationRelationUnCategorizedContentFormAnalyzeReportFormAnalyzerItemsCheck { get; set; }
        public virtual DbSet<RelationRolesWiRolesandaccess> RelationRolesWiRolesandaccess { get; set; }
        public virtual DbSet<RelationSelectEditorReviewSuggestions> RelationSelectEditorReviewSuggestions { get; set; }
        public virtual DbSet<RelationSelectEditorSelectGame> RelationSelectEditorSelectGame { get; set; }
        public virtual DbSet<RelationShowScoreAverage> RelationShowScoreAverage { get; set; }
        public virtual DbSet<RelationSubEditItemUploadEditItemUpload> RelationSubEditItemUploadEditItemUpload { get; set; }
        public virtual DbSet<RelationSubFormGamerSeenContentGamerSeenContent> RelationSubFormGamerSeenContentGamerSeenContent { get; set; }
        public virtual DbSet<RelationSubLevelAnalyzeAnalizorMgntSelection> RelationSubLevelAnalyzeAnalizorMgntSelection { get; set; }
        public virtual DbSet<RelationSubLevelAnalyzeAnalyzeMgntReport> RelationSubLevelAnalyzeAnalyzeMgntReport { get; set; }
        public virtual DbSet<RelationTblAccountsHologramAttachmentHologramAttachmentRequest> RelationTblAccountsHologramAttachmentHologramAttachmentRequest { get; set; }
        public virtual DbSet<RelationTblAccountsRatingAccountApplyingRatingAccount> RelationTblAccountsRatingAccountApplyingRatingAccount { get; set; }
        public virtual DbSet<RelationTblAuctionDisseminationListItemsCourse> RelationTblAuctionDisseminationListItemsCourse { get; set; }
        public virtual DbSet<RelationTblAuctionItemDisseminationListItemsCourse> RelationTblAuctionItemDisseminationListItemsCourse { get; set; }
        public virtual DbSet<RelationTblAuctionItemEditAuctionItems> RelationTblAuctionItemEditAuctionItems { get; set; }
        public virtual DbSet<RelationTblAuctionItemEnableDisseminationListItemsCourse> RelationTblAuctionItemEnableDisseminationListItemsCourse { get; set; }
        public virtual DbSet<RelationTblAuctionItemenableEditAuctionItems> RelationTblAuctionItemenableEditAuctionItems { get; set; }
        public virtual DbSet<RelationTblAuctionItemHoldingDisseminationMeetingDissemination> RelationTblAuctionItemHoldingDisseminationMeetingDissemination { get; set; }
        public virtual DbSet<RelationTblAuctionItemHoldingDisseminationRecordResults> RelationTblAuctionItemHoldingDisseminationRecordResults { get; set; }
        public virtual DbSet<RelationTblAuctionItemHologramAttachmentHologramAttachmentRequest> RelationTblAuctionItemHologramAttachmentHologramAttachmentRequest { get; set; }
        public virtual DbSet<RelationTblAuctionItemHologramAttachmentHologramAttachmentRequestSubForm> RelationTblAuctionItemHologramAttachmentHologramAttachmentRequestSubForm { get; set; }
        public virtual DbSet<RelationTblAuctionItemHologramAttachmentHologramNumber> RelationTblAuctionItemHologramAttachmentHologramNumber { get; set; }
        public virtual DbSet<RelationTblAuctionItemHologramAttachmentHologramNumberSubForm> RelationTblAuctionItemHologramAttachmentHologramNumberSubForm { get; set; }
        public virtual DbSet<RelationTblAuctionItemHologramAttachmentInstallationList> RelationTblAuctionItemHologramAttachmentInstallationList { get; set; }
        public virtual DbSet<RelationTblAuctionItemHologramAttachmentInstallationListSubForm> RelationTblAuctionItemHologramAttachmentInstallationListSubForm { get; set; }
        public virtual DbSet<RelationTblDeficiencyTypeHologramAttachmentInstallationListSubForm> RelationTblDeficiencyTypeHologramAttachmentInstallationListSubForm { get; set; }
        public virtual DbSet<RelationTblEditOffersSelectEditorReviewSuggestions2> RelationTblEditOffersSelectEditorReviewSuggestions2 { get; set; }
        public virtual DbSet<RelationTblGameAddVersionToGame> RelationTblGameAddVersionToGame { get; set; }
        public virtual DbSet<RelationTblGameAuctionItems> RelationTblGameAuctionItems { get; set; }
        public virtual DbSet<RelationTblgameAuctionItems2> RelationTblgameAuctionItems2 { get; set; }
        public virtual DbSet<RelationTblGameEditGameChooseNameGame> RelationTblGameEditGameChooseNameGame { get; set; }
        public virtual DbSet<RelationTblgameNmobileGameAgeRatingReq> RelationTblgameNmobileGameAgeRatingReq { get; set; }
        public virtual DbSet<RelationTblItemVersionsEditAuctionItems> RelationTblItemVersionsEditAuctionItems { get; set; }
        public virtual DbSet<RelationTblOrganizationBonyadHologramAttachmentHologramAttachmentRequest> RelationTblOrganizationBonyadHologramAttachmentHologramAttachmentRequest { get; set; }
        public virtual DbSet<RelationTblOrganizationBonyadSimilarGamesListPr> RelationTblOrganizationBonyadSimilarGamesListPr { get; set; }
        public virtual DbSet<RelationTblOrganizationBonyadSubmitSource> RelationTblOrganizationBonyadSubmitSource { get; set; }
        public virtual DbSet<RelationTblPhysicalPublishLicenseHologramAttachmentHologramAttachmentRequest> RelationTblPhysicalPublishLicenseHologramAttachmentHologramAttachmentRequest { get; set; }
        public virtual DbSet<RelationTblPhysicalPublishLicenseHologramAttachmentHologramAttachmentRequestSubForm> RelationTblPhysicalPublishLicenseHologramAttachmentHologramAttachmentRequestSubForm { get; set; }
        public virtual DbSet<RelationTblPhysicalPublishLicenseHologramTransferToOldGamesApplyAndSelectGame> RelationTblPhysicalPublishLicenseHologramTransferToOldGamesApplyAndSelectGame { get; set; }
        public virtual DbSet<RelationTblPhysicalPublishLicenseHologramTransferToOldGamesApplyAndSelectGameSubForm> RelationTblPhysicalPublishLicenseHologramTransferToOldGamesApplyAndSelectGameSubForm { get; set; }
        public virtual DbSet<RelationTblPhysicalPublishLicenseIssueLicensingForPublicOldGamesRequestIssuanceLicense> RelationTblPhysicalPublishLicenseIssueLicensingForPublicOldGamesRequestIssuanceLicense { get; set; }
        public virtual DbSet<RelationTblPhysicalPublishLicenseOldGamePropellerReleaseSelectPermissionsRelease> RelationTblPhysicalPublishLicenseOldGamePropellerReleaseSelectPermissionsRelease { get; set; }
        public virtual DbSet<RelationTblPhysicalPublishLicensePropellerReleaseSelectPermissionsRelease> RelationTblPhysicalPublishLicensePropellerReleaseSelectPermissionsRelease { get; set; }
        public virtual DbSet<RelationTblPictogramWRadebandiSazmani> RelationTblPictogramWRadebandiSazmani { get; set; }
        public virtual DbSet<RelationTblProducerNexclusiveNuserDisseminationPublishersAuctions> RelationTblProducerNexclusiveNuserDisseminationPublishersAuctions { get; set; }
        public virtual DbSet<RelationTblProducerNexclusiveNuserPrintAuctionsSelectPublisher> RelationTblProducerNexclusiveNuserPrintAuctionsSelectPublisher { get; set; }
        public virtual DbSet<RelationTblTransactionEditGameChooseEditingGame> RelationTblTransactionEditGameChooseEditingGame { get; set; }
        public virtual DbSet<RelationTblUserAccountGreenHologramDeclareFee> RelationTblUserAccountGreenHologramDeclareFee { get; set; }
        public virtual DbSet<RelationTblUserAccountGreenHologramUploadDocumentation> RelationTblUserAccountGreenHologramUploadDocumentation { get; set; }
        public virtual DbSet<RelationTblUserAccountHologramAttachmentHologramAttachmentRequest> RelationTblUserAccountHologramAttachmentHologramAttachmentRequest { get; set; }
        public virtual DbSet<RelationTblUserAccountHologramTransferToOldGamesApplyAndSelectGame> RelationTblUserAccountHologramTransferToOldGamesApplyAndSelectGame { get; set; }
        public virtual DbSet<RelationTblversionAllGameVersions> RelationTblversionAllGameVersions { get; set; }
        public virtual DbSet<RelationTblVersionAllocateGameBasketsEditInformationDataEntry> RelationTblVersionAllocateGameBasketsEditInformationDataEntry { get; set; }
        public virtual DbSet<RelationTblVersionAnalizSubEditItemUpload> RelationTblVersionAnalizSubEditItemUpload { get; set; }
        public virtual DbSet<RelationTblVersionAuctionItems2> RelationTblVersionAuctionItems2 { get; set; }
        public virtual DbSet<RelationTblVersionDisseminationInitialVoting> RelationTblVersionDisseminationInitialVoting { get; set; }
        public virtual DbSet<RelationTblVersionDisseminationListItemsCourse> RelationTblVersionDisseminationListItemsCourse { get; set; }
        public virtual DbSet<RelationTblVersionEditGameChooseEditingGame> RelationTblVersionEditGameChooseEditingGame { get; set; }
        public virtual DbSet<RelationTblversioneditItemEditItemUpload> RelationTblversioneditItemEditItemUpload { get; set; }
        public virtual DbSet<RelationTblVersionEditItemSubEditItemUpload> RelationTblVersionEditItemSubEditItemUpload { get; set; }
        public virtual DbSet<RelationTblVersionEsra2RequestRegister> RelationTblVersionEsra2RequestRegister { get; set; }
        public virtual DbSet<RelationTblVersionFinalGameRegisterForm> RelationTblVersionFinalGameRegisterForm { get; set; }
        public virtual DbSet<RelationTblVersionGamerAndStoryTellerChoose> RelationTblVersionGamerAndStoryTellerChoose { get; set; }
        public virtual DbSet<RelationTblVersionGameTitleRegisterReq> RelationTblVersionGameTitleRegisterReq { get; set; }
        public virtual DbSet<RelationTblVersionGreenHologramApplyItemsSubForm> RelationTblVersionGreenHologramApplyItemsSubForm { get; set; }
        public virtual DbSet<RelationTblVersionGreenHologramAttachmentDocumentation> RelationTblVersionGreenHologramAttachmentDocumentation { get; set; }
        public virtual DbSet<RelationTblVersionGreenHologramDeclareFee> RelationTblVersionGreenHologramDeclareFee { get; set; }
        public virtual DbSet<RelationTblVersionGreenHologramRequestReview> RelationTblVersionGreenHologramRequestReview { get; set; }
        public virtual DbSet<RelationTblVersionGreenHologramReviewFinancialRequest> RelationTblVersionGreenHologramReviewFinancialRequest { get; set; }
        public virtual DbSet<RelationTblVersionGreenHologramUploadDocumentation> RelationTblVersionGreenHologramUploadDocumentation { get; set; }
        public virtual DbSet<RelationTblVersionHoldingDisseminationRecordResults> RelationTblVersionHoldingDisseminationRecordResults { get; set; }
        public virtual DbSet<RelationTblVersionHologramAttachmentHologramAttachmentRequest> RelationTblVersionHologramAttachmentHologramAttachmentRequest { get; set; }
        public virtual DbSet<RelationTblVersionHologramAttachmentHologramNumber> RelationTblVersionHologramAttachmentHologramNumber { get; set; }
        public virtual DbSet<RelationTblVersionIssueLicensingForPublicOldGamesRequestIssuanceLicense> RelationTblVersionIssueLicensingForPublicOldGamesRequestIssuanceLicense { get; set; }
        public virtual DbSet<RelationTblversionMobileGamingLicenseForeignCheckingDocuments> RelationTblversionMobileGamingLicenseForeignCheckingDocuments { get; set; }
        public virtual DbSet<RelationTblVersionNmobileGameAgeRatingReq> RelationTblVersionNmobileGameAgeRatingReq { get; set; }
        public virtual DbSet<RelationTblVersionOldGameReleaseLicenseSelectGame> RelationTblVersionOldGameReleaseLicenseSelectGame { get; set; }
        public virtual DbSet<RelationTblVersionPbublishLicenseUpload> RelationTblVersionPbublishLicenseUpload { get; set; }
        public virtual DbSet<RelationTblVersionRatingVersion> RelationTblVersionRatingVersion { get; set; }
        public virtual DbSet<RelationTblVersionReceiveSourceFlag> RelationTblVersionReceiveSourceFlag { get; set; }
        public virtual DbSet<RelationTblVersionSelectEditorReviewSuggestions2> RelationTblVersionSelectEditorReviewSuggestions2 { get; set; }
        public virtual DbSet<RelationTblVersionSelectEditorSelectGame> RelationTblVersionSelectEditorSelectGame { get; set; }
        public virtual DbSet<RelationTblVersionSimilarGamesListPr> RelationTblVersionSimilarGamesListPr { get; set; }
        public virtual DbSet<RelationTblVersionSimilarVersions> RelationTblVersionSimilarVersions { get; set; }
        public virtual DbSet<RelationTblversionSimilarVersionsSelect> RelationTblversionSimilarVersionsSelect { get; set; }
        public virtual DbSet<RelationTblVersionSubmitGameForCertificate> RelationTblVersionSubmitGameForCertificate { get; set; }
        public virtual DbSet<RelationTblVersionSur030CheckExistenceVersion> RelationTblVersionSur030CheckExistenceVersion { get; set; }
        public virtual DbSet<RelationTblVersionTestP002Sub1> RelationTblVersionTestP002Sub1 { get; set; }
        public virtual DbSet<RelationTblVersionTestP002Sub2> RelationTblVersionTestP002Sub2 { get; set; }
        public virtual DbSet<RelationTblversionVersionInsertDecide> RelationTblversionVersionInsertDecide { get; set; }
        public virtual DbSet<RelationTblVersionWRadebandiSazmani> RelationTblVersionWRadebandiSazmani { get; set; }
        public virtual DbSet<RelationTest001> RelationTest001 { get; set; }
        public virtual DbSet<RelationTest201808012> RelationTest201808012 { get; set; }
        public virtual DbSet<RelationTestTableGtblTest> RelationTestTableGtblTest { get; set; }
        public virtual DbSet<RelationTestZdff> RelationTestZdff { get; set; }
        public virtual DbSet<RelationTransferPointsApplyFinancialChanges> RelationTransferPointsApplyFinancialChanges { get; set; }
        public virtual DbSet<RelationTransferPointsApplyingInternalSoftwareChanges> RelationTransferPointsApplyingInternalSoftwareChanges { get; set; }
        public virtual DbSet<RelationTransferPointsFinancialReviews> RelationTransferPointsFinancialReviews { get; set; }
        public virtual DbSet<RelationTransferPointsInitialReviewRequest> RelationTransferPointsInitialReviewRequest { get; set; }
        public virtual DbSet<RelationTransferPointsInternalSoftwareReviews> RelationTransferPointsInternalSoftwareReviews { get; set; }
        public virtual DbSet<RelationTransferPointsLawyerReviews> RelationTransferPointsLawyerReviews { get; set; }
        public virtual DbSet<RelationTransferPointsSupervisoryReviews> RelationTransferPointsSupervisoryReviews { get; set; }
        public virtual DbSet<RelationUnCategorizedContentFormAnalyzeManagerObserveForm> RelationUnCategorizedContentFormAnalyzeManagerObserveForm { get; set; }
        public virtual DbSet<RelationUnCategorizedContentFormAnalyzeReportForm> RelationUnCategorizedContentFormAnalyzeReportForm { get; set; }
        public virtual DbSet<RelationUnCategorizedContentFormAnalyzerItemsCheck> RelationUnCategorizedContentFormAnalyzerItemsCheck { get; set; }
        public virtual DbSet<RelationUsersCaptchatest> RelationUsersCaptchatest { get; set; }
        public virtual DbSet<RelationUsersContractManualInsertion> RelationUsersContractManualInsertion { get; set; }
        public virtual DbSet<RelationUsersDb34> RelationUsersDb34 { get; set; }
        public virtual DbSet<RelationUsersEditorRatingRegisterRatingEditor> RelationUsersEditorRatingRegisterRatingEditor { get; set; }
        public virtual DbSet<RelationUsersGreenHologramDeclareFee> RelationUsersGreenHologramDeclareFee { get; set; }
        public virtual DbSet<RelationUsersHoldingDisseminationMeetingDissemination> RelationUsersHoldingDisseminationMeetingDissemination { get; set; }
        public virtual DbSet<RelationUsersHoldingDisseminationRecordResults> RelationUsersHoldingDisseminationRecordResults { get; set; }
        public virtual DbSet<RelationUsersMobileGamingLicenseForeignCheckGameRatings> RelationUsersMobileGamingLicenseForeignCheckGameRatings { get; set; }
        public virtual DbSet<RelationValetUploadsValetChecking> RelationValetUploadsValetChecking { get; set; }
        public virtual DbSet<RelationVersionInsertDecide> RelationVersionInsertDecide { get; set; }
        public virtual DbSet<RelationWorFromInsertSubWorkFlowFormInsertion> RelationWorFromInsertSubWorkFlowFormInsertion { get; set; }
        public virtual DbSet<RelationZdffTest> RelationZdffTest { get; set; }
        public virtual DbSet<Replies> Replies { get; set; }
        public virtual DbSet<ReportConditions> ReportConditions { get; set; }
        public virtual DbSet<Reports> Reports { get; set; }
        public virtual DbSet<ReportSettings> ReportSettings { get; set; }
        public virtual DbSet<ReportTblContestLicenses> ReportTblContestLicenses { get; set; }
        public virtual DbSet<ReportTblOnlineContestLicenses> ReportTblOnlineContestLicenses { get; set; }
        public virtual DbSet<ReportTblPhysicalPublishLicenses> ReportTblPhysicalPublishLicenses { get; set; }
        public virtual DbSet<ReportTblPhysicalPublishLicensesAuc> ReportTblPhysicalPublishLicensesAuc { get; set; }
        public virtual DbSet<ReportTblProductionLicenses> ReportTblProductionLicenses { get; set; }
        public virtual DbSet<ReportTblSingleUseInstitutes> ReportTblSingleUseInstitutes { get; set; }
        public virtual DbSet<ReportTblSupplyLicenses> ReportTblSupplyLicenses { get; set; }
        public virtual DbSet<RequestConfirmationForm> RequestConfirmationForm { get; set; }
        public virtual DbSet<RequestPaymentCeoreview> RequestPaymentCeoreview { get; set; }
        public virtual DbSet<RequestPaymentCheckPropertyRegistration> RequestPaymentCheckPropertyRegistration { get; set; }
        public virtual DbSet<RequestPaymentDocumentationOfDeliveryCheck> RequestPaymentDocumentationOfDeliveryCheck { get; set; }
        public virtual DbSet<RequestPaymentFinancialDeputyReview> RequestPaymentFinancialDeputyReview { get; set; }
        public virtual DbSet<RequestPaymentFinancialManagerReview> RequestPaymentFinancialManagerReview { get; set; }
        public virtual DbSet<RequestPaymentRecordFinancialDocuments> RequestPaymentRecordFinancialDocuments { get; set; }
        public virtual DbSet<RequestPaymentSubmitApplication> RequestPaymentSubmitApplication { get; set; }
        public virtual DbSet<ReservedIndicatorAccesses> ReservedIndicatorAccesses { get; set; }
        public virtual DbSet<ReservedIndicators> ReservedIndicators { get; set; }
        public virtual DbSet<ReviewTheEditOfAuctionItems> ReviewTheEditOfAuctionItems { get; set; }
        public virtual DbSet<RolePermissions> RolePermissions { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Sabtezamanehozoorfiziki> Sabtezamanehozoorfiziki { get; set; }
        public virtual DbSet<ScheduleTargets> ScheduleTargets { get; set; }
        public virtual DbSet<SelectEditorReviewSuggestions2> SelectEditorReviewSuggestions2 { get; set; }
        public virtual DbSet<SelectEditorSelectGame> SelectEditorSelectGame { get; set; }
        public virtual DbSet<SelectMyBosses> SelectMyBosses { get; set; }
        public virtual DbSet<SendingGameSource> SendingGameSource { get; set; }
        public virtual DbSet<SendingMails> SendingMails { get; set; }
        public virtual DbSet<SendingSms> SendingSms { get; set; }
        public virtual DbSet<SeratingRequest> SeratingRequest { get; set; }
        public virtual DbSet<ShowScoreAverage> ShowScoreAverage { get; set; }
        public virtual DbSet<SignUpExpertCompletedRegistration> SignUpExpertCompletedRegistration { get; set; }
        public virtual DbSet<SignUpExpertCompletedRegistration1> SignUpExpertCompletedRegistration1 { get; set; }
        public virtual DbSet<SignUpExpertCouncilReview> SignUpExpertCouncilReview { get; set; }
        public virtual DbSet<SimilarGamesListPr> SimilarGamesListPr { get; set; }
        public virtual DbSet<SimilarVersions> SimilarVersions { get; set; }
        public virtual DbSet<SimilarVersionsSelect> SimilarVersionsSelect { get; set; }
        public virtual DbSet<SinglePurposeInstitutionProfile> SinglePurposeInstitutionProfile { get; set; }
        public virtual DbSet<SmsMessages> SmsMessages { get; set; }
        public virtual DbSet<Smspanels> Smspanels { get; set; }
        public virtual DbSet<SourceEratingRequestSubform> SourceEratingRequestSubform { get; set; }
        public virtual DbSet<SourceMedia> SourceMedia { get; set; }
        public virtual DbSet<SourceRatingRequestSubform> SourceRatingRequestSubform { get; set; }
        public virtual DbSet<SponsorRegistrationCompletionSponsorRegistration> SponsorRegistrationCompletionSponsorRegistration { get; set; }
        public virtual DbSet<SponsorRegistrationCouncilReview> SponsorRegistrationCouncilReview { get; set; }
        public virtual DbSet<SratingRequest> SratingRequest { get; set; }
        public virtual DbSet<StatuteUpload> StatuteUpload { get; set; }
        public virtual DbSet<Stestddl> Stestddl { get; set; }
        public virtual DbSet<StoreInAnotherDbs> StoreInAnotherDbs { get; set; }
        public virtual DbSet<Strategies> Strategies { get; set; }
        public virtual DbSet<StrategyObjectiveRelations> StrategyObjectiveRelations { get; set; }
        public virtual DbSet<SubEditItemUpload> SubEditItemUpload { get; set; }
        public virtual DbSet<SubFormGamerSeenContent> SubFormGamerSeenContent { get; set; }
        public virtual DbSet<SubForms> SubForms { get; set; }
        public virtual DbSet<SubHoghughiTozih> SubHoghughiTozih { get; set; }
        public virtual DbSet<SubLevelAnalyze> SubLevelAnalyze { get; set; }
        public virtual DbSet<SubmitAgeRating> SubmitAgeRating { get; set; }
        public virtual DbSet<SubmitGameForCertificate> SubmitGameForCertificate { get; set; }
        public virtual DbSet<SubmitGameForCertificateNezaratExpert> SubmitGameForCertificateNezaratExpert { get; set; }
        public virtual DbSet<SubmitInquiries> SubmitInquiries { get; set; }
        public virtual DbSet<SubmitSource> SubmitSource { get; set; }
        public virtual DbSet<SubWorkFlowExecutions> SubWorkFlowExecutions { get; set; }
        public virtual DbSet<SuportReplyForm> SuportReplyForm { get; set; }
        public virtual DbSet<SupportCategories> SupportCategories { get; set; }
        public virtual DbSet<SupportMgntCheck> SupportMgntCheck { get; set; }
        public virtual DbSet<SupportReplyRequestForm> SupportReplyRequestForm { get; set; }
        public virtual DbSet<Sur030AskForBusinessGames> Sur030AskForBusinessGames { get; set; }
        public virtual DbSet<Sur030CheckContentRequest> Sur030CheckContentRequest { get; set; }
        public virtual DbSet<Sur030CheckExistenceVersion> Sur030CheckExistenceVersion { get; set; }
        public virtual DbSet<Sur030DataEntryBasicGame> Sur030DataEntryBasicGame { get; set; }
        public virtual DbSet<Sur030DistributionLicenseCode> Sur030DistributionLicenseCode { get; set; }
        public virtual DbSet<Sur030GameRatingControl> Sur030GameRatingControl { get; set; }
        public virtual DbSet<SurGameType> SurGameType { get; set; }
        public virtual DbSet<Swots> Swots { get; set; }
        public virtual DbSet<SystemPages> SystemPages { get; set; }
        public virtual DbSet<TableDetails> TableDetails { get; set; }
        public virtual DbSet<Targets> Targets { get; set; }
        public virtual DbSet<TblAccounts> TblAccounts { get; set; }
        public virtual DbSet<TblAccountStates> TblAccountStates { get; set; }
        public virtual DbSet<TblAccountType> TblAccountType { get; set; }
        public virtual DbSet<TblAccountTypeUnit> TblAccountTypeUnit { get; set; }
        public virtual DbSet<TblAnalizGamePart> TblAnalizGamePart { get; set; }
        public virtual DbSet<TblAreaActivity> TblAreaActivity { get; set; }
        public virtual DbSet<TblArticles> TblArticles { get; set; }
        public virtual DbSet<TblArticlesType> TblArticlesType { get; set; }
        public virtual DbSet<TblAuction> TblAuction { get; set; }
        public virtual DbSet<TblAuctionItem> TblAuctionItem { get; set; }
        public virtual DbSet<TblAuctionItemDisable> TblAuctionItemDisable { get; set; }
        public virtual DbSet<TblAuctionItemEnable> TblAuctionItemEnable { get; set; }
        public virtual DbSet<TblAuctionItemState> TblAuctionItemState { get; set; }
        public virtual DbSet<TblAuctionItemVersion> TblAuctionItemVersion { get; set; }
        public virtual DbSet<TblAuctionParticipant> TblAuctionParticipant { get; set; }
        public virtual DbSet<TblAuctionVote> TblAuctionVote { get; set; }
        public virtual DbSet<TblAuctionWinner> TblAuctionWinner { get; set; }
        public virtual DbSet<TblAward> TblAward { get; set; }
        public virtual DbSet<TblCategory> TblCategory { get; set; }
        public virtual DbSet<TblCategory1> TblCategory1 { get; set; }
        public virtual DbSet<TblCategoryType> TblCategoryType { get; set; }
        public virtual DbSet<TblCategoryType1> TblCategoryType1 { get; set; }
        public virtual DbSet<TblCertificationVersion> TblCertificationVersion { get; set; }
        public virtual DbSet<TblCities> TblCities { get; set; }
        public virtual DbSet<TblCompanyAriaActivity> TblCompanyAriaActivity { get; set; }
        public virtual DbSet<TblConsultation> TblConsultation { get; set; }
        public virtual DbSet<TblCountry> TblCountry { get; set; }
        public virtual DbSet<TblDeficiencyType> TblDeficiencyType { get; set; }
        public virtual DbSet<TblEditableType> TblEditableType { get; set; }
        public virtual DbSet<TblEditOffers> TblEditOffers { get; set; }
        public virtual DbSet<TblEditOfferStates> TblEditOfferStates { get; set; }
        public virtual DbSet<TblEducationDegree> TblEducationDegree { get; set; }
        public virtual DbSet<TblEsra> TblEsra { get; set; }
        public virtual DbSet<TblEsra1> TblEsra1 { get; set; }
        public virtual DbSet<TblEsraStatus> TblEsraStatus { get; set; }
        public virtual DbSet<TblEsraType> TblEsraType { get; set; }
        public virtual DbSet<TblExclusiveType> TblExclusiveType { get; set; }
        public virtual DbSet<TblExclusiveVersions> TblExclusiveVersions { get; set; }
        public virtual DbSet<TblExhibition> TblExhibition { get; set; }
        public virtual DbSet<TblExhibitionOther> TblExhibitionOther { get; set; }
        public virtual DbSet<TblExhibitionPresent> TblExhibitionPresent { get; set; }
        public virtual DbSet<TblExhibitionType> TblExhibitionType { get; set; }
        public virtual DbSet<TblFestival> TblFestival { get; set; }
        public virtual DbSet<TblFestivalAward> TblFestivalAward { get; set; }
        public virtual DbSet<TblFestivalAwardOther> TblFestivalAwardOther { get; set; }
        public virtual DbSet<TblFile> TblFile { get; set; }
        public virtual DbSet<TblFile1> TblFile1 { get; set; }
        public virtual DbSet<TblFounderGroup> TblFounderGroup { get; set; }
        public virtual DbSet<TblGame> TblGame { get; set; }
        public virtual DbSet<TblGame1> TblGame1 { get; set; }
        public virtual DbSet<TblGameCategory> TblGameCategory { get; set; }
        public virtual DbSet<TblGameCategory1> TblGameCategory1 { get; set; }
        public virtual DbSet<TblGameCreatorProjects> TblGameCreatorProjects { get; set; }
        public virtual DbSet<TblGamePart> TblGamePart { get; set; }
        public virtual DbSet<TblGamerScreenShot> TblGamerScreenShot { get; set; }
        public virtual DbSet<TblGamerScreenVideo> TblGamerScreenVideo { get; set; }
        public virtual DbSet<TblHologramInstallFail> TblHologramInstallFail { get; set; }
        public virtual DbSet<TblHologramInstalltion> TblHologramInstalltion { get; set; }
        public virtual DbSet<TblHologramList> TblHologramList { get; set; }
        public virtual DbSet<TblHologramListItems> TblHologramListItems { get; set; }
        public virtual DbSet<TblIdentificationType> TblIdentificationType { get; set; }
        public virtual DbSet<TblIndependentGameCreatorFile> TblIndependentGameCreatorFile { get; set; }
        public virtual DbSet<TblIndicator> TblIndicator { get; set; }
        public virtual DbSet<TblIranianPhysicalPublisherVersion> TblIranianPhysicalPublisherVersion { get; set; }
        public virtual DbSet<TblItemVersions> TblItemVersions { get; set; }
        public virtual DbSet<TblLanguage> TblLanguage { get; set; }
        public virtual DbSet<TblLog> TblLog { get; set; }
        public virtual DbSet<TblMilitary> TblMilitary { get; set; }
        public virtual DbSet<TblMobileDistributeLicense> TblMobileDistributeLicense { get; set; }
        public virtual DbSet<TblMobileDistributeLicenseStates> TblMobileDistributeLicenseStates { get; set; }
        public virtual DbSet<TblMobileDistributeLicenseTypes> TblMobileDistributeLicenseTypes { get; set; }
        public virtual DbSet<TblMobileDistributeLicenseVersions> TblMobileDistributeLicenseVersions { get; set; }
        public virtual DbSet<TblMobilePublishLicenseTypes> TblMobilePublishLicenseTypes { get; set; }
        public virtual DbSet<TblMobilePublishLicenseVersions> TblMobilePublishLicenseVersions { get; set; }
        public virtual DbSet<TblNezaratAuction> TblNezaratAuction { get; set; }
        public virtual DbSet<TblNezaratAuctionActionItem> TblNezaratAuctionActionItem { get; set; }
        public virtual DbSet<TblNezaratAuctionResult> TblNezaratAuctionResult { get; set; }
        public virtual DbSet<TblNezaratAuctionState> TblNezaratAuctionState { get; set; }
        public virtual DbSet<TblNezaratAuctionUsers> TblNezaratAuctionUsers { get; set; }
        public virtual DbSet<TblOrganizationBonyad> TblOrganizationBonyad { get; set; }
        public virtual DbSet<TblOrganizationBonyad1> TblOrganizationBonyad1 { get; set; }
        public virtual DbSet<TblOrganizationBonyadFile> TblOrganizationBonyadFile { get; set; }
        public virtual DbSet<TblOrganizationBonyadFileType> TblOrganizationBonyadFileType { get; set; }
        public virtual DbSet<TblOrgType> TblOrgType { get; set; }
        public virtual DbSet<TblParticipant> TblParticipant { get; set; }
        public virtual DbSet<TblPersonBonyad> TblPersonBonyad { get; set; }
        public virtual DbSet<TblPhysicalPublishLicense> TblPhysicalPublishLicense { get; set; }
        public virtual DbSet<TblPhysicalPublishLicenseStates> TblPhysicalPublishLicenseStates { get; set; }
        public virtual DbSet<TblPhysicalPublishLicenseVersions> TblPhysicalPublishLicenseVersions { get; set; }
        public virtual DbSet<TblPictogram> TblPictogram { get; set; }
        public virtual DbSet<TblPictogram1> TblPictogram1 { get; set; }
        public virtual DbSet<TblPlatform> TblPlatform { get; set; }
        public virtual DbSet<TblPlatform1> TblPlatform1 { get; set; }
        public virtual DbSet<TblProducerNexclusiveNuser> TblProducerNexclusiveNuser { get; set; }
        public virtual DbSet<TblProvinces> TblProvinces { get; set; }
        public virtual DbSet<TblPublishCertification> TblPublishCertification { get; set; }
        public virtual DbSet<TblPublishCertificationValet> TblPublishCertificationValet { get; set; }
        public virtual DbSet<TblPublishLicense> TblPublishLicense { get; set; }
        public virtual DbSet<TblQuality> TblQuality { get; set; }
        public virtual DbSet<TblRate> TblRate { get; set; }
        public virtual DbSet<TblRefundType> TblRefundType { get; set; }
        public virtual DbSet<TblRefundTypeOther> TblRefundTypeOther { get; set; }
        public virtual DbSet<TblScreenshotType> TblScreenshotType { get; set; }
        public virtual DbSet<TblScreenshotType1> TblScreenshotType1 { get; set; }
        public virtual DbSet<TblSkillType> TblSkillType { get; set; }
        public virtual DbSet<TblSourceMedia> TblSourceMedia { get; set; }
        public virtual DbSet<TblSourceMediaFile> TblSourceMediaFile { get; set; }
        public virtual DbSet<TblSourceMediaSentType> TblSourceMediaSentType { get; set; }
        public virtual DbSet<TblSourceMediaType> TblSourceMediaType { get; set; }
        public virtual DbSet<TblSourceType> TblSourceType { get; set; }
        public virtual DbSet<TblSourceType1> TblSourceType1 { get; set; }
        public virtual DbSet<TblStaticPage> TblStaticPage { get; set; }
        public virtual DbSet<TblStaticPageFile> TblStaticPageFile { get; set; }
        public virtual DbSet<TblTag> TblTag { get; set; }
        public virtual DbSet<TblTeams> TblTeams { get; set; }
        public virtual DbSet<TblTempData> TblTempData { get; set; }
        public virtual DbSet<TblTrainees> TblTrainees { get; set; }
        public virtual DbSet<TblTransaction> TblTransaction { get; set; }
        public virtual DbSet<TblTransactionType> TblTransactionType { get; set; }
        public virtual DbSet<TblUserDocumentFile> TblUserDocumentFile { get; set; }
        public virtual DbSet<TblVersion> TblVersion { get; set; }
        public virtual DbSet<TblVersion1> TblVersion1 { get; set; }
        public virtual DbSet<TblVersionAnaliz> TblVersionAnaliz { get; set; }
        public virtual DbSet<TblVersionBasket> TblVersionBasket { get; set; }
        public virtual DbSet<TblVersionCategory> TblVersionCategory { get; set; }
        public virtual DbSet<TblVersionCategory1> TblVersionCategory1 { get; set; }
        public virtual DbSet<TblVersionDetail> TblVersionDetail { get; set; }
        public virtual DbSet<TblVersionDetailGameType> TblVersionDetailGameType { get; set; }
        public virtual DbSet<TblVersionDetailOther> TblVersionDetailOther { get; set; }
        public virtual DbSet<TblVersionEsra> TblVersionEsra { get; set; }
        public virtual DbSet<TblVersionEsra1> TblVersionEsra1 { get; set; }
        public virtual DbSet<TblVersionExclusive> TblVersionExclusive { get; set; }
        public virtual DbSet<TblVersionGenre> TblVersionGenre { get; set; }
        public virtual DbSet<TblVersionGenre1> TblVersionGenre1 { get; set; }
        public virtual DbSet<TblVersionNarrat> TblVersionNarrat { get; set; }
        public virtual DbSet<TblVersionPictogram> TblVersionPictogram { get; set; }
        public virtual DbSet<TblVersionPictogram1> TblVersionPictogram1 { get; set; }
        public virtual DbSet<TblVersionPublisherProducers> TblVersionPublisherProducers { get; set; }
        public virtual DbSet<TblVersionScreenshot> TblVersionScreenshot { get; set; }
        public virtual DbSet<TblVersionScreenshot1> TblVersionScreenshot1 { get; set; }
        public virtual DbSet<TblVersionSkill> TblVersionSkill { get; set; }
        public virtual DbSet<TblVersionViewAngle> TblVersionViewAngle { get; set; }
        public virtual DbSet<TblViewAngleType> TblViewAngleType { get; set; }
        public virtual DbSet<TblVisitLogs> TblVisitLogs { get; set; }
        public virtual DbSet<TemplateAccesses> TemplateAccesses { get; set; }
        public virtual DbSet<Templates> Templates { get; set; }
        public virtual DbSet<Test> Test { get; set; }
        public virtual DbSet<Test001> Test001 { get; set; }
        public virtual DbSet<Test2> Test2 { get; set; }
        public virtual DbSet<Test201808012> Test201808012 { get; set; }
        public virtual DbSet<Test201808013> Test201808013 { get; set; }
        public virtual DbSet<Test3> Test3 { get; set; }
        public virtual DbSet<TestForm> TestForm { get; set; }
        public virtual DbSet<TestP001> TestP001 { get; set; }
        public virtual DbSet<TestP002> TestP002 { get; set; }
        public virtual DbSet<TestP002Sub1> TestP002Sub1 { get; set; }
        public virtual DbSet<TestP002Sub2> TestP002Sub2 { get; set; }
        public virtual DbSet<TestP00f2> TestP00f2 { get; set; }
        public virtual DbSet<TestP00f3> TestP00f3 { get; set; }
        public virtual DbSet<Testtx> Testtx { get; set; }
        public virtual DbSet<TrackChanges> TrackChanges { get; set; }
        public virtual DbSet<TransferPointsApplyingInternalSoftwareChanges> TransferPointsApplyingInternalSoftwareChanges { get; set; }
        public virtual DbSet<TransferPointsFinalExaminationRequest> TransferPointsFinalExaminationRequest { get; set; }
        public virtual DbSet<TransferPointsFinancialReviews> TransferPointsFinancialReviews { get; set; }
        public virtual DbSet<TransferPointsInitialReviewRequest> TransferPointsInitialReviewRequest { get; set; }
        public virtual DbSet<TransferPointsInternalSoftwareReviews> TransferPointsInternalSoftwareReviews { get; set; }
        public virtual DbSet<TransferPointsLawyerReviews> TransferPointsLawyerReviews { get; set; }
        public virtual DbSet<TransferPointsSubmitRatingTransfer> TransferPointsSubmitRatingTransfer { get; set; }
        public virtual DbSet<TransferPointsSupervisoryReviews> TransferPointsSupervisoryReviews { get; set; }
        public virtual DbSet<UnCategorizedContentForm> UnCategorizedContentForm { get; set; }
        public virtual DbSet<UnclassifiedContent> UnclassifiedContent { get; set; }
        public virtual DbSet<UnitMainActivity> UnitMainActivity { get; set; }
        public virtual DbSet<Units> Units { get; set; }
        public virtual DbSet<UnitSubActivity> UnitSubActivity { get; set; }
        public virtual DbSet<UploadFullGameVideo> UploadFullGameVideo { get; set; }
        public virtual DbSet<UpstreamDocuments> UpstreamDocuments { get; set; }
        public virtual DbSet<UserIdeditorDescriptionRejection> UserIdeditorDescriptionRejection { get; set; }
        public virtual DbSet<UserIdeditorFinalInformation> UserIdeditorFinalInformation { get; set; }
        public virtual DbSet<UserIdeditorPrimaryInformation> UserIdeditorPrimaryInformation { get; set; }
        public virtual DbSet<UserIdeditorUserName> UserIdeditorUserName { get; set; }
        public virtual DbSet<UserMessages> UserMessages { get; set; }
        public virtual DbSet<UserRoles> UserRoles { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<ValetChecking> ValetChecking { get; set; }
        public virtual DbSet<ValetUploads> ValetUploads { get; set; }
        public virtual DbSet<VersionInsertDecide> VersionInsertDecide { get; set; }
        public virtual DbSet<VgPrimaryInsertion> VgPrimaryInsertion { get; set; }
        public virtual DbSet<VideoUpload> VideoUpload { get; set; }
        public virtual DbSet<Visions> Visions { get; set; }
        public virtual DbSet<WebServices> WebServices { get; set; }
        public virtual DbSet<WfiOveralReport> WfiOveralReport { get; set; }
        public virtual DbSet<WfProgressDetails> WfProgressDetails { get; set; }
        public virtual DbSet<WfwCalculations> WfwCalculations { get; set; }
        public virtual DbSet<WfwConditions> WfwConditions { get; set; }
        public virtual DbSet<WfwDecisions> WfwDecisions { get; set; }
        public virtual DbSet<WfwInstances> WfwInstances { get; set; }
        public virtual DbSet<WfwInstanceStateReceivers> WfwInstanceStateReceivers { get; set; }
        public virtual DbSet<WfwInstanceStates> WfwInstanceStates { get; set; }
        public virtual DbSet<WfwOperations> WfwOperations { get; set; }
        public virtual DbSet<WfwRecordStateReceiverResults> WfwRecordStateReceiverResults { get; set; }
        public virtual DbSet<WiDataModelSession> WiDataModelSession { get; set; }
        public virtual DbSet<WiRolesandaccess> WiRolesandaccess { get; set; }
        public virtual DbSet<WorFromInsertSub> WorFromInsertSub { get; set; }
        public virtual DbSet<WorkExperience> WorkExperience { get; set; }
        public virtual DbSet<WorkflowAnalysePrimaryDocs> WorkflowAnalysePrimaryDocs { get; set; }
        public virtual DbSet<Workflowbugsreportme> Workflowbugsreportme { get; set; }
        public virtual DbSet<WorkFlowDetails> WorkFlowDetails { get; set; }
        public virtual DbSet<WorkflowFinalDocs> WorkflowFinalDocs { get; set; }
        public virtual DbSet<WorkFlowFormInsertion> WorkFlowFormInsertion { get; set; }
        public virtual DbSet<WorkFlowProgresses> WorkFlowProgresses { get; set; }
        public virtual DbSet<WorkFlowStartEnds> WorkFlowStartEnds { get; set; }
        public virtual DbSet<WRadebandiSazmani> WRadebandiSazmani { get; set; }
        public virtual DbSet<Zones> Zones { get; set; }

        // Unable to generate entity type for table 'dbo.tblPublishCertificates'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblPublishCertificateStates'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblThreeMonthPublishAgreements'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblThreeMonthPublishAgreementStates'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.testTABLE'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblPublishCertificateTypes'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.sajjadtmp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblExclusive'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblIndependentGameCreator'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblLegalProducer'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblRealProducer'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.hbltemp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.__TEMP_TABLE'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.reportTbl_StoreCertificates'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblVersionEditItem'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblMobilePublishLicence'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblMobilePublishCertificateTypes'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblMobilePublishLicenceStates'. Please see the warning messages.

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer(@"Data Source=.;Initial Catalog=ipdb;User ID=sa;Password=Admin123.");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AddLevel1>(entity =>
            {
                entity.Property(e => e.AuditStatusAddLevel1).HasColumnName("AuditStatus_AddLevel1");

                entity.Property(e => e.CreatorAddLevel1).HasColumnName("Creator_AddLevel1");

                entity.Property(e => e.InstanceIdAddLevel1).HasColumnName("InstanceId_AddLevel1");

                entity.Property(e => e.InstanceSridAddLevel1).HasColumnName("InstanceSRId_AddLevel1");

                entity.Property(e => e.IpAddLevel1).HasColumnName("IP_AddLevel1");

                entity.Property(e => e.RegistrationDateAddLevel1).HasColumnName("RegistrationDate_AddLevel1");

                entity.Property(e => e.RegistrationStatusAddLevel1).HasColumnName("RegistrationStatus_AddLevel1");

                entity.Property(e => e.RegistrationTimeAddLevel1).HasColumnName("RegistrationTime_AddLevel1");

                entity.Property(e => e.TxtLevel1).HasColumnName("txtLevel1");
            });

            modelBuilder.Entity<AddLevel2>(entity =>
            {
                entity.Property(e => e.AuditStatusAddLevel2).HasColumnName("AuditStatus_AddLevel2");

                entity.Property(e => e.CreatorAddLevel2).HasColumnName("Creator_AddLevel2");

                entity.Property(e => e.DdlLevel1).HasColumnName("ddlLevel1");

                entity.Property(e => e.InstanceIdAddLevel2).HasColumnName("InstanceId_AddLevel2");

                entity.Property(e => e.InstanceSridAddLevel2).HasColumnName("InstanceSRId_AddLevel2");

                entity.Property(e => e.IpAddLevel2).HasColumnName("IP_AddLevel2");

                entity.Property(e => e.RegistrationDateAddLevel2).HasColumnName("RegistrationDate_AddLevel2");

                entity.Property(e => e.RegistrationStatusAddLevel2).HasColumnName("RegistrationStatus_AddLevel2");

                entity.Property(e => e.RegistrationTimeAddLevel2).HasColumnName("RegistrationTime_AddLevel2");

                entity.Property(e => e.TxtLevel2).HasColumnName("txtLevel2");
            });

            modelBuilder.Entity<AddLevel3>(entity =>
            {
                entity.Property(e => e.AuditStatusAddLevel3).HasColumnName("AuditStatus_AddLevel3");

                entity.Property(e => e.CreatorAddLevel3).HasColumnName("Creator_AddLevel3");

                entity.Property(e => e.Ddl2Level2).HasColumnName("ddl2Level2");

                entity.Property(e => e.DdlLevel1).HasColumnName("ddlLevel1");

                entity.Property(e => e.InstanceIdAddLevel3).HasColumnName("InstanceId_AddLevel3");

                entity.Property(e => e.InstanceSridAddLevel3).HasColumnName("InstanceSRId_AddLevel3");

                entity.Property(e => e.IpAddLevel3).HasColumnName("IP_AddLevel3");

                entity.Property(e => e.RegistrationDateAddLevel3).HasColumnName("RegistrationDate_AddLevel3");

                entity.Property(e => e.RegistrationStatusAddLevel3).HasColumnName("RegistrationStatus_AddLevel3");

                entity.Property(e => e.RegistrationTimeAddLevel3).HasColumnName("RegistrationTime_AddLevel3");

                entity.Property(e => e.TxtLevel3).HasColumnName("txtLevel3");
            });

            modelBuilder.Entity<AddVersionToGame>(entity =>
            {
                entity.ToTable("addVersionToGame");

                entity.Property(e => e.AuditStatusAddVersionToGame).HasColumnName("AuditStatus_addVersionToGame");

                entity.Property(e => e.CreatorAddVersionToGame).HasColumnName("Creator_addVersionToGame");

                entity.Property(e => e.DatePdate).HasColumnName("datePdate");

                entity.Property(e => e.DatePdateGregorian)
                    .HasColumnName("datePdate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateReleaseDate).HasColumnName("dateReleaseDate");

                entity.Property(e => e.DdlGenres).HasColumnName("ddlGenres");

                entity.Property(e => e.DdlIranCompany).HasColumnName("ddlIranCompany");

                entity.Property(e => e.DdlIsEdited).HasColumnName("ddlIsEdited");

                entity.Property(e => e.DdlIsOriginal).HasColumnName("ddlIsOriginal");

                entity.Property(e => e.DdlIsPersian).HasColumnName("ddlIsPersian");

                entity.Property(e => e.DdlPlatform).HasColumnName("ddlPlatform");

                entity.Property(e => e.InstanceIdAddVersionToGame).HasColumnName("InstanceId_addVersionToGame");

                entity.Property(e => e.InstanceSridAddVersionToGame).HasColumnName("InstanceSRId_addVersionToGame");

                entity.Property(e => e.IpAddVersionToGame).HasColumnName("IP_addVersionToGame");

                entity.Property(e => e.RegistrationDateAddVersionToGame).HasColumnName("RegistrationDate_addVersionToGame");

                entity.Property(e => e.RegistrationStatusAddVersionToGame).HasColumnName("RegistrationStatus_addVersionToGame");

                entity.Property(e => e.RegistrationTimeAddVersionToGame).HasColumnName("RegistrationTime_addVersionToGame");

                entity.Property(e => e.TxtCompany).HasColumnName("txtCompany");

                entity.Property(e => e.TxtVersionName).HasColumnName("txtVersionName");
            });

            modelBuilder.Entity<AgreementDeputyConfirmation1>(entity =>
            {
                entity.Property(e => e.AuditStatusAgreementDeputyConfirmation1).HasColumnName("AuditStatus_AgreementDeputyConfirmation1");

                entity.Property(e => e.CreatorAgreementDeputyConfirmation1).HasColumnName("Creator_AgreementDeputyConfirmation1");

                entity.Property(e => e.DdlContractCommission).HasColumnName("ddlContractCommission");

                entity.Property(e => e.InstanceIdAgreementDeputyConfirmation1).HasColumnName("InstanceId_AgreementDeputyConfirmation1");

                entity.Property(e => e.InstanceSridAgreementDeputyConfirmation1).HasColumnName("InstanceSRId_AgreementDeputyConfirmation1");

                entity.Property(e => e.IpAgreementDeputyConfirmation1).HasColumnName("IP_AgreementDeputyConfirmation1");

                entity.Property(e => e.RegistrationDateAgreementDeputyConfirmation1).HasColumnName("RegistrationDate_AgreementDeputyConfirmation1");

                entity.Property(e => e.RegistrationStatusAgreementDeputyConfirmation1).HasColumnName("RegistrationStatus_AgreementDeputyConfirmation1");

                entity.Property(e => e.RegistrationTimeAgreementDeputyConfirmation1).HasColumnName("RegistrationTime_AgreementDeputyConfirmation1");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxaContractCommissionReason).HasColumnName("txaContractCommissionReason");
            });

            modelBuilder.Entity<AgreementRequest>(entity =>
            {
                entity.Property(e => e.AuditStatusAgreementRequest).HasColumnName("AuditStatus_AgreementRequest");

                entity.Property(e => e.Bcnumber).HasColumnName("BCNumber");

                entity.Property(e => e.CreatorAgreementRequest).HasColumnName("Creator_AgreementRequest");

                entity.Property(e => e.Ddl2MainActivity).HasColumnName("ddl2MainActivity");

                entity.Property(e => e.Ddl2SubActivity).HasColumnName("ddl2SubActivity");

                entity.Property(e => e.Ddl2Unit).HasColumnName("ddl2Unit");

                entity.Property(e => e.DdlKing).HasColumnName("ddlKing");

                entity.Property(e => e.InstanceIdAgreementRequest).HasColumnName("InstanceId_AgreementRequest");

                entity.Property(e => e.InstanceSridAgreementRequest).HasColumnName("InstanceSRId_AgreementRequest");

                entity.Property(e => e.IpAgreementRequest).HasColumnName("IP_AgreementRequest");

                entity.Property(e => e.RegistrationDateAgreementRequest).HasColumnName("RegistrationDate_AgreementRequest");

                entity.Property(e => e.RegistrationStatusAgreementRequest).HasColumnName("RegistrationStatus_AgreementRequest");

                entity.Property(e => e.RegistrationTimeAgreementRequest).HasColumnName("RegistrationTime_AgreementRequest");

                entity.Property(e => e.TxaAddress).HasColumnName("txaAddress");

                entity.Property(e => e.TxaContractPlace).HasColumnName("txaContractPlace");

                entity.Property(e => e.TxaContractTime).HasColumnName("txaContractTime");

                entity.Property(e => e.TxaFcommitments).HasColumnName("txaFCommitments");

                entity.Property(e => e.TxaLcommitments).HasColumnName("txaLCommitments");

                entity.Property(e => e.TxaOrganizationAddress).HasColumnName("txaOrganizationAddress");

                entity.Property(e => e.TxtAgentName).HasColumnName("txtAgentName");

                entity.Property(e => e.TxtAgentPost).HasColumnName("txtAgentPost");

                entity.Property(e => e.TxtAgentTel).HasColumnName("txtAgentTel");

                entity.Property(e => e.TxtLfname).HasColumnName("txtLFName");

                entity.Property(e => e.TxtOrganizationId).HasColumnName("txtOrganizationId");

                entity.Property(e => e.TxtOrganizationName).HasColumnName("txtOrganizationName");

                entity.Property(e => e.TxtOrganizationTel).HasColumnName("txtOrganizationTel");

                entity.Property(e => e.TxtPhone).HasColumnName("txtPhone");

                entity.Property(e => e.TxtTel).HasColumnName("txtTel");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");
            });

            modelBuilder.Entity<Agreements>(entity =>
            {
                entity.Property(e => e.AgreementDate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AgreementFile).IsRequired();

                entity.Property(e => e.AgreementId)
                    .IsRequired()
                    .HasColumnName("AgreementID")
                    .HasMaxLength(50);

                entity.Property(e => e.AgreementTitle).IsRequired();

                entity.Property(e => e.ContractorId)
                    .IsRequired()
                    .HasColumnName("ContractorID")
                    .HasMaxLength(50);

                entity.Property(e => e.ContractorName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AllGameVersions>(entity =>
            {
                entity.ToTable("allGameVersions");

                entity.Property(e => e.AuditStatusAllGameVersions).HasColumnName("AuditStatus_allGameVersions");

                entity.Property(e => e.CreatorAllGameVersions).HasColumnName("Creator_allGameVersions");

                entity.Property(e => e.InstanceIdAllGameVersions).HasColumnName("InstanceId_allGameVersions");

                entity.Property(e => e.InstanceSridAllGameVersions).HasColumnName("InstanceSRId_allGameVersions");

                entity.Property(e => e.IpAllGameVersions).HasColumnName("IP_allGameVersions");

                entity.Property(e => e.RegistrationDateAllGameVersions).HasColumnName("RegistrationDate_allGameVersions");

                entity.Property(e => e.RegistrationStatusAllGameVersions).HasColumnName("RegistrationStatus_allGameVersions");

                entity.Property(e => e.RegistrationTimeAllGameVersions).HasColumnName("RegistrationTime_allGameVersions");
            });

            modelBuilder.Entity<AllocateGameBasketsEditInformationDataEntry>(entity =>
            {
                entity.ToTable("AllocateGameBasketsEditInformation_DataEntry");

                entity.Property(e => e.AuditStatusAllocateGameBasketsEditInformationDataEntry).HasColumnName("AuditStatus_AllocateGameBasketsEditInformation_DataEntry");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.AxtDescriptionOfEditing).HasColumnName("axtDescriptionOfEditing");

                entity.Property(e => e.CreatorAllocateGameBasketsEditInformationDataEntry).HasColumnName("Creator_AllocateGameBasketsEditInformation_DataEntry");

                entity.Property(e => e.DdlActionType).HasColumnName("ddlActionType");

                entity.Property(e => e.DdlDefineGameVersion).HasColumnName("ddlDefineGameVersion");

                entity.Property(e => e.InstanceIdAllocateGameBasketsEditInformationDataEntry).HasColumnName("InstanceId_AllocateGameBasketsEditInformation_DataEntry");

                entity.Property(e => e.InstanceSridAllocateGameBasketsEditInformationDataEntry).HasColumnName("InstanceSRId_AllocateGameBasketsEditInformation_DataEntry");

                entity.Property(e => e.IpAllocateGameBasketsEditInformationDataEntry).HasColumnName("IP_AllocateGameBasketsEditInformation_DataEntry");

                entity.Property(e => e.RegistrationDateAllocateGameBasketsEditInformationDataEntry).HasColumnName("RegistrationDate_AllocateGameBasketsEditInformation_DataEntry");

                entity.Property(e => e.RegistrationStatusAllocateGameBasketsEditInformationDataEntry).HasColumnName("RegistrationStatus_AllocateGameBasketsEditInformation_DataEntry");

                entity.Property(e => e.RegistrationTimeAllocateGameBasketsEditInformationDataEntry).HasColumnName("RegistrationTime_AllocateGameBasketsEditInformation_DataEntry");
            });

            modelBuilder.Entity<AllocateGameBasketsEditInformationReportActions>(entity =>
            {
                entity.ToTable("AllocateGameBasketsEditInformation_ReportActions");

                entity.Property(e => e.AuditStatusAllocateGameBasketsEditInformationReportActions).HasColumnName("AuditStatus_AllocateGameBasketsEditInformation_ReportActions");

                entity.Property(e => e.AxtReportActions).HasColumnName("axtReportActions");

                entity.Property(e => e.CreatorAllocateGameBasketsEditInformationReportActions).HasColumnName("Creator_AllocateGameBasketsEditInformation_ReportActions");

                entity.Property(e => e.InstanceIdAllocateGameBasketsEditInformationReportActions).HasColumnName("InstanceId_AllocateGameBasketsEditInformation_ReportActions");

                entity.Property(e => e.InstanceSridAllocateGameBasketsEditInformationReportActions).HasColumnName("InstanceSRId_AllocateGameBasketsEditInformation_ReportActions");

                entity.Property(e => e.IpAllocateGameBasketsEditInformationReportActions).HasColumnName("IP_AllocateGameBasketsEditInformation_ReportActions");

                entity.Property(e => e.RegistrationDateAllocateGameBasketsEditInformationReportActions).HasColumnName("RegistrationDate_AllocateGameBasketsEditInformation_ReportActions");

                entity.Property(e => e.RegistrationStatusAllocateGameBasketsEditInformationReportActions).HasColumnName("RegistrationStatus_AllocateGameBasketsEditInformation_ReportActions");

                entity.Property(e => e.RegistrationTimeAllocateGameBasketsEditInformationReportActions).HasColumnName("RegistrationTime_AllocateGameBasketsEditInformation_ReportActions");
            });

            modelBuilder.Entity<AnalizorMgntConfirmation>(entity =>
            {
                entity.Property(e => e.AuditStatusAnalizorMgntConfirmation).HasColumnName("AuditStatus_AnalizorMgntConfirmation");

                entity.Property(e => e.CreatorAnalizorMgntConfirmation).HasColumnName("Creator_AnalizorMgntConfirmation");

                entity.Property(e => e.InstanceIdAnalizorMgntConfirmation).HasColumnName("InstanceId_AnalizorMgntConfirmation");

                entity.Property(e => e.InstanceSridAnalizorMgntConfirmation).HasColumnName("InstanceSRId_AnalizorMgntConfirmation");

                entity.Property(e => e.IpAnalizorMgntConfirmation).HasColumnName("IP_AnalizorMgntConfirmation");

                entity.Property(e => e.RegistrationDateAnalizorMgntConfirmation).HasColumnName("RegistrationDate_AnalizorMgntConfirmation");

                entity.Property(e => e.RegistrationStatusAnalizorMgntConfirmation).HasColumnName("RegistrationStatus_AnalizorMgntConfirmation");

                entity.Property(e => e.RegistrationTimeAnalizorMgntConfirmation).HasColumnName("RegistrationTime_AnalizorMgntConfirmation");
            });

            modelBuilder.Entity<AnalizorMgntSelection>(entity =>
            {
                entity.Property(e => e.AuditStatusAnalizorMgntSelection).HasColumnName("AuditStatus_AnalizorMgntSelection");

                entity.Property(e => e.CreatorAnalizorMgntSelection).HasColumnName("Creator_AnalizorMgntSelection");

                entity.Property(e => e.InstanceIdAnalizorMgntSelection).HasColumnName("InstanceId_AnalizorMgntSelection");

                entity.Property(e => e.InstanceSridAnalizorMgntSelection).HasColumnName("InstanceSRId_AnalizorMgntSelection");

                entity.Property(e => e.IpAnalizorMgntSelection).HasColumnName("IP_AnalizorMgntSelection");

                entity.Property(e => e.RegistrationDateAnalizorMgntSelection).HasColumnName("RegistrationDate_AnalizorMgntSelection");

                entity.Property(e => e.RegistrationStatusAnalizorMgntSelection).HasColumnName("RegistrationStatus_AnalizorMgntSelection");

                entity.Property(e => e.RegistrationTimeAnalizorMgntSelection).HasColumnName("RegistrationTime_AnalizorMgntSelection");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.AnalizorMgntSelection)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AnalizorMgntConfirmation_AnalizorMgntSelection");
            });

            modelBuilder.Entity<AnalyzeManagerObserveForm>(entity =>
            {
                entity.Property(e => e.AuditStatusAnalyzeManagerObserveForm).HasColumnName("AuditStatus_AnalyzeManagerObserveForm");

                entity.Property(e => e.CreatorAnalyzeManagerObserveForm).HasColumnName("Creator_AnalyzeManagerObserveForm");

                entity.Property(e => e.InstanceIdAnalyzeManagerObserveForm).HasColumnName("InstanceId_AnalyzeManagerObserveForm");

                entity.Property(e => e.InstanceSridAnalyzeManagerObserveForm).HasColumnName("InstanceSRId_AnalyzeManagerObserveForm");

                entity.Property(e => e.IpAnalyzeManagerObserveForm).HasColumnName("IP_AnalyzeManagerObserveForm");

                entity.Property(e => e.RegistrationDateAnalyzeManagerObserveForm).HasColumnName("RegistrationDate_AnalyzeManagerObserveForm");

                entity.Property(e => e.RegistrationStatusAnalyzeManagerObserveForm).HasColumnName("RegistrationStatus_AnalyzeManagerObserveForm");

                entity.Property(e => e.RegistrationTimeAnalyzeManagerObserveForm).HasColumnName("RegistrationTime_AnalyzeManagerObserveForm");

                entity.Property(e => e.TxaEditTozih).HasColumnName("txaEditTozih");
            });

            modelBuilder.Entity<AnalyzeMgntReport>(entity =>
            {
                entity.Property(e => e.AuditStatusAnalyzeMgntReport).HasColumnName("AuditStatus_AnalyzeMgntReport");

                entity.Property(e => e.CreatorAnalyzeMgntReport).HasColumnName("Creator_AnalyzeMgntReport");

                entity.Property(e => e.InstanceIdAnalyzeMgntReport).HasColumnName("InstanceId_AnalyzeMgntReport");

                entity.Property(e => e.InstanceSridAnalyzeMgntReport).HasColumnName("InstanceSRId_AnalyzeMgntReport");

                entity.Property(e => e.IpAnalyzeMgntReport).HasColumnName("IP_AnalyzeMgntReport");

                entity.Property(e => e.RegistrationDateAnalyzeMgntReport).HasColumnName("RegistrationDate_AnalyzeMgntReport");

                entity.Property(e => e.RegistrationStatusAnalyzeMgntReport).HasColumnName("RegistrationStatus_AnalyzeMgntReport");

                entity.Property(e => e.RegistrationTimeAnalyzeMgntReport).HasColumnName("RegistrationTime_AnalyzeMgntReport");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");
            });

            modelBuilder.Entity<AnalyzeReportForm>(entity =>
            {
                entity.Property(e => e.AuditStatusAnalyzeReportForm).HasColumnName("AuditStatus_AnalyzeReportForm");

                entity.Property(e => e.CreatorAnalyzeReportForm).HasColumnName("Creator_AnalyzeReportForm");

                entity.Property(e => e.DdlRadeh).HasColumnName("ddlRadeh");

                entity.Property(e => e.InstanceIdAnalyzeReportForm).HasColumnName("InstanceId_AnalyzeReportForm");

                entity.Property(e => e.InstanceSridAnalyzeReportForm).HasColumnName("InstanceSRId_AnalyzeReportForm");

                entity.Property(e => e.IpAnalyzeReportForm).HasColumnName("IP_AnalyzeReportForm");

                entity.Property(e => e.RegistrationDateAnalyzeReportForm).HasColumnName("RegistrationDate_AnalyzeReportForm");

                entity.Property(e => e.RegistrationStatusAnalyzeReportForm).HasColumnName("RegistrationStatus_AnalyzeReportForm");

                entity.Property(e => e.RegistrationTimeAnalyzeReportForm).HasColumnName("RegistrationTime_AnalyzeReportForm");

                entity.Property(e => e.TxtTime).HasColumnName("txtTime");
            });

            modelBuilder.Entity<AnalyzerItemsCheck>(entity =>
            {
                entity.Property(e => e.AuditStatusAnalyzerItemsCheck).HasColumnName("AuditStatus_AnalyzerItemsCheck");

                entity.Property(e => e.CreatorAnalyzerItemsCheck).HasColumnName("Creator_AnalyzerItemsCheck");

                entity.Property(e => e.InstanceIdAnalyzerItemsCheck).HasColumnName("InstanceId_AnalyzerItemsCheck");

                entity.Property(e => e.InstanceSridAnalyzerItemsCheck).HasColumnName("InstanceSRId_AnalyzerItemsCheck");

                entity.Property(e => e.IpAnalyzerItemsCheck).HasColumnName("IP_AnalyzerItemsCheck");

                entity.Property(e => e.RegistrationDateAnalyzerItemsCheck).HasColumnName("RegistrationDate_AnalyzerItemsCheck");

                entity.Property(e => e.RegistrationStatusAnalyzerItemsCheck).HasColumnName("RegistrationStatus_AnalyzerItemsCheck");

                entity.Property(e => e.RegistrationTimeAnalyzerItemsCheck).HasColumnName("RegistrationTime_AnalyzerItemsCheck");

                entity.Property(e => e.TxaTozih).HasColumnName("txaTozih");
            });

            modelBuilder.Entity<AnalyzerReport>(entity =>
            {
                entity.Property(e => e.AuditStatusAnalyzerReport).HasColumnName("AuditStatus_AnalyzerReport");

                entity.Property(e => e.CreatorAnalyzerReport).HasColumnName("Creator_AnalyzerReport");

                entity.Property(e => e.InstanceIdAnalyzerReport).HasColumnName("InstanceId_AnalyzerReport");

                entity.Property(e => e.InstanceSridAnalyzerReport).HasColumnName("InstanceSRId_AnalyzerReport");

                entity.Property(e => e.IpAnalyzerReport).HasColumnName("IP_AnalyzerReport");

                entity.Property(e => e.RegistrationDateAnalyzerReport).HasColumnName("RegistrationDate_AnalyzerReport");

                entity.Property(e => e.RegistrationStatusAnalyzerReport).HasColumnName("RegistrationStatus_AnalyzerReport");

                entity.Property(e => e.RegistrationTimeAnalyzerReport).HasColumnName("RegistrationTime_AnalyzerReport");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxtAgeRating).HasColumnName("txtAgeRating");
            });

            modelBuilder.Entity<AnalyzerScoreForm>(entity =>
            {
                entity.Property(e => e.AuditStatusAnalyzerScoreForm).HasColumnName("AuditStatus_AnalyzerScoreForm");

                entity.Property(e => e.CreatorAnalyzerScoreForm).HasColumnName("Creator_AnalyzerScoreForm");

                entity.Property(e => e.DdlAnom).HasColumnName("ddlAnom");

                entity.Property(e => e.DdlDokhan).HasColumnName("ddlDokhan");

                entity.Property(e => e.DdlFear).HasColumnName("ddlFear");

                entity.Property(e => e.DdlFight).HasColumnName("ddlFight");

                entity.Property(e => e.DdlNoHope).HasColumnName("ddlNoHope");

                entity.Property(e => e.InstanceIdAnalyzerScoreForm).HasColumnName("InstanceId_AnalyzerScoreForm");

                entity.Property(e => e.InstanceSridAnalyzerScoreForm).HasColumnName("InstanceSRId_AnalyzerScoreForm");

                entity.Property(e => e.IpAnalyzerScoreForm).HasColumnName("IP_AnalyzerScoreForm");

                entity.Property(e => e.RegistrationDateAnalyzerScoreForm).HasColumnName("RegistrationDate_AnalyzerScoreForm");

                entity.Property(e => e.RegistrationStatusAnalyzerScoreForm).HasColumnName("RegistrationStatus_AnalyzerScoreForm");

                entity.Property(e => e.RegistrationTimeAnalyzerScoreForm).HasColumnName("RegistrationTime_AnalyzerScoreForm");
            });

            modelBuilder.Entity<AnalyzerSelectionForAnalyze>(entity =>
            {
                entity.Property(e => e.AuditStatusAnalyzerSelectionForAnalyze).HasColumnName("AuditStatus_AnalyzerSelectionForAnalyze");

                entity.Property(e => e.CreatorAnalyzerSelectionForAnalyze).HasColumnName("Creator_AnalyzerSelectionForAnalyze");

                entity.Property(e => e.DdlAnalSelect).HasColumnName("ddlAnalSelect");

                entity.Property(e => e.InstanceIdAnalyzerSelectionForAnalyze).HasColumnName("InstanceId_AnalyzerSelectionForAnalyze");

                entity.Property(e => e.InstanceSridAnalyzerSelectionForAnalyze).HasColumnName("InstanceSRId_AnalyzerSelectionForAnalyze");

                entity.Property(e => e.IpAnalyzerSelectionForAnalyze).HasColumnName("IP_AnalyzerSelectionForAnalyze");

                entity.Property(e => e.RegistrationDateAnalyzerSelectionForAnalyze).HasColumnName("RegistrationDate_AnalyzerSelectionForAnalyze");

                entity.Property(e => e.RegistrationStatusAnalyzerSelectionForAnalyze).HasColumnName("RegistrationStatus_AnalyzerSelectionForAnalyze");

                entity.Property(e => e.RegistrationTimeAnalyzerSelectionForAnalyze).HasColumnName("RegistrationTime_AnalyzerSelectionForAnalyze");
            });

            modelBuilder.Entity<AnalyzorSelection>(entity =>
            {
                entity.Property(e => e.AuditStatusAnalyzorSelection).HasColumnName("AuditStatus_AnalyzorSelection");

                entity.Property(e => e.CreatorAnalyzorSelection).HasColumnName("Creator_AnalyzorSelection");

                entity.Property(e => e.DdlAnalyzor).HasColumnName("ddlAnalyzor");

                entity.Property(e => e.DdlResult).HasColumnName("ddlResult");

                entity.Property(e => e.InstanceIdAnalyzorSelection).HasColumnName("InstanceId_AnalyzorSelection");

                entity.Property(e => e.InstanceSridAnalyzorSelection).HasColumnName("InstanceSRId_AnalyzorSelection");

                entity.Property(e => e.IpAnalyzorSelection).HasColumnName("IP_AnalyzorSelection");

                entity.Property(e => e.RegistrationDateAnalyzorSelection).HasColumnName("RegistrationDate_AnalyzorSelection");

                entity.Property(e => e.RegistrationStatusAnalyzorSelection).HasColumnName("RegistrationStatus_AnalyzorSelection");

                entity.Property(e => e.RegistrationTimeAnalyzorSelection).HasColumnName("RegistrationTime_AnalyzorSelection");
            });

            modelBuilder.Entity<AnotherRatings>(entity =>
            {
                entity.Property(e => e.AuditStatusAnotherRatings).HasColumnName("AuditStatus_AnotherRatings");

                entity.Property(e => e.CreatorAnotherRatings).HasColumnName("Creator_AnotherRatings");

                entity.Property(e => e.DdlNezam).HasColumnName("ddlNezam");

                entity.Property(e => e.DdlRadeh).HasColumnName("ddlRadeh");

                entity.Property(e => e.InstanceIdAnotherRatings).HasColumnName("InstanceId_AnotherRatings");

                entity.Property(e => e.InstanceSridAnotherRatings).HasColumnName("InstanceSRId_AnotherRatings");

                entity.Property(e => e.IpAnotherRatings).HasColumnName("IP_AnotherRatings");

                entity.Property(e => e.RegistrationDateAnotherRatings).HasColumnName("RegistrationDate_AnotherRatings");

                entity.Property(e => e.RegistrationStatusAnotherRatings).HasColumnName("RegistrationStatus_AnotherRatings");

                entity.Property(e => e.RegistrationTimeAnotherRatings).HasColumnName("RegistrationTime_AnotherRatings");

                entity.Property(e => e.TxaTozih).HasColumnName("txaTozih");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.AnotherRatings)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_GamerAndStoryTellerChoose_AnotherRatings");
            });

            modelBuilder.Entity<ApplicantInformation>(entity =>
            {
                entity.Property(e => e.AuditStatusApplicantInformation).HasColumnName("AuditStatus_ApplicantInformation");

                entity.Property(e => e.CreatorApplicantInformation).HasColumnName("Creator_ApplicantInformation");

                entity.Property(e => e.DdlMinimumQualification).HasColumnName("ddlMinimumQualification");

                entity.Property(e => e.InstanceIdApplicantInformation).HasColumnName("InstanceId_ApplicantInformation");

                entity.Property(e => e.InstanceSridApplicantInformation).HasColumnName("InstanceSRId_ApplicantInformation");

                entity.Property(e => e.IpApplicantInformation).HasColumnName("IP_ApplicantInformation");

                entity.Property(e => e.RegistrationDateApplicantInformation).HasColumnName("RegistrationDate_ApplicantInformation");

                entity.Property(e => e.RegistrationStatusApplicantInformation).HasColumnName("RegistrationStatus_ApplicantInformation");

                entity.Property(e => e.RegistrationTimeApplicantInformation).HasColumnName("RegistrationTime_ApplicantInformation");

                entity.Property(e => e.TxtDescription).HasColumnName("txtDescription");

                entity.Property(e => e.TxtExpertiseInIcdl).HasColumnName("txtExpertiseInICDL");

                entity.Property(e => e.TxtFieldOfStudy).HasColumnName("txtFieldOfStudy");

                entity.Property(e => e.TxtJobTitleRequested).HasColumnName("txtJobTitleRequested");

                entity.Property(e => e.TxtMinimumWorkExperience).HasColumnName("txtMinimumWorkExperience");

                entity.Property(e => e.TxtProfessionalExpertise).HasColumnName("txtProfessionalExpertise");

                entity.Property(e => e.TxtSourceOfRecruiting).HasColumnName("txtSourceOfRecruiting");

                entity.Property(e => e.TxtSpecialtySecondLanguage).HasColumnName("txtSpecialtySecondLanguage");

                entity.Property(e => e.TxtTypeOfEmployment).HasColumnName("txtTypeOfEmployment");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.ApplicantInformation)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DeclarationHumanResources_Form1_ApplicantInformation");
            });

            modelBuilder.Entity<ApplyHologramApplyHologram>(entity =>
            {
                entity.ToTable("ApplyHologram_ApplyHologram");

                entity.Property(e => e.AuditStatusApplyHologramApplyHologram).HasColumnName("AuditStatus_ApplyHologram_ApplyHologram");

                entity.Property(e => e.CreatorApplyHologramApplyHologram).HasColumnName("Creator_ApplyHologram_ApplyHologram");

                entity.Property(e => e.InstanceIdApplyHologramApplyHologram).HasColumnName("InstanceId_ApplyHologram_ApplyHologram");

                entity.Property(e => e.InstanceSridApplyHologramApplyHologram).HasColumnName("InstanceSRId_ApplyHologram_ApplyHologram");

                entity.Property(e => e.IpApplyHologramApplyHologram).HasColumnName("IP_ApplyHologram_ApplyHologram");

                entity.Property(e => e.NumNumberHologramsRequested).HasColumnName("numNumberHologramsRequested");

                entity.Property(e => e.RegistrationDateApplyHologramApplyHologram).HasColumnName("RegistrationDate_ApplyHologram_ApplyHologram");

                entity.Property(e => e.RegistrationStatusApplyHologramApplyHologram).HasColumnName("RegistrationStatus_ApplyHologram_ApplyHologram");

                entity.Property(e => e.RegistrationTimeApplyHologramApplyHologram).HasColumnName("RegistrationTime_ApplyHologram_ApplyHologram");

                entity.Property(e => e.TxtCaption).HasColumnName("txtCaption");

                entity.Property(e => e.UplImageTransferReceipt).HasColumnName("uplImageTransferReceipt");
            });

            modelBuilder.Entity<ApplyHologramDocumentaryDefect>(entity =>
            {
                entity.ToTable("ApplyHologram_DocumentaryDefect");

                entity.Property(e => e.AuditStatusApplyHologramDocumentaryDefect).HasColumnName("AuditStatus_ApplyHologram_DocumentaryDefect");

                entity.Property(e => e.AxtApplicationModificationCases).HasColumnName("axtApplicationModificationCases");

                entity.Property(e => e.CreatorApplyHologramDocumentaryDefect).HasColumnName("Creator_ApplyHologram_DocumentaryDefect");

                entity.Property(e => e.InstanceIdApplyHologramDocumentaryDefect).HasColumnName("InstanceId_ApplyHologram_DocumentaryDefect");

                entity.Property(e => e.InstanceSridApplyHologramDocumentaryDefect).HasColumnName("InstanceSRId_ApplyHologram_DocumentaryDefect");

                entity.Property(e => e.IpApplyHologramDocumentaryDefect).HasColumnName("IP_ApplyHologram_DocumentaryDefect");

                entity.Property(e => e.RegistrationDateApplyHologramDocumentaryDefect).HasColumnName("RegistrationDate_ApplyHologram_DocumentaryDefect");

                entity.Property(e => e.RegistrationStatusApplyHologramDocumentaryDefect).HasColumnName("RegistrationStatus_ApplyHologram_DocumentaryDefect");

                entity.Property(e => e.RegistrationTimeApplyHologramDocumentaryDefect).HasColumnName("RegistrationTime_ApplyHologram_DocumentaryDefect");
            });

            modelBuilder.Entity<ApplyHologramDocumentChecking>(entity =>
            {
                entity.ToTable("ApplyHologram_DocumentChecking");

                entity.Property(e => e.AuditStatusApplyHologramDocumentChecking).HasColumnName("AuditStatus_ApplyHologram_DocumentChecking");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.AxtNeedCorrection).HasColumnName("axtNeedCorrection");

                entity.Property(e => e.CreatorApplyHologramDocumentChecking).HasColumnName("Creator_ApplyHologram_DocumentChecking");

                entity.Property(e => e.DdlResultReview).HasColumnName("ddlResultReview");

                entity.Property(e => e.InstanceIdApplyHologramDocumentChecking).HasColumnName("InstanceId_ApplyHologram_DocumentChecking");

                entity.Property(e => e.InstanceSridApplyHologramDocumentChecking).HasColumnName("InstanceSRId_ApplyHologram_DocumentChecking");

                entity.Property(e => e.IpApplyHologramDocumentChecking).HasColumnName("IP_ApplyHologram_DocumentChecking");

                entity.Property(e => e.RegistrationDateApplyHologramDocumentChecking).HasColumnName("RegistrationDate_ApplyHologram_DocumentChecking");

                entity.Property(e => e.RegistrationStatusApplyHologramDocumentChecking).HasColumnName("RegistrationStatus_ApplyHologram_DocumentChecking");

                entity.Property(e => e.RegistrationTimeApplyHologramDocumentChecking).HasColumnName("RegistrationTime_ApplyHologram_DocumentChecking");
            });

            modelBuilder.Entity<ApplyHologramDocumentRegistration>(entity =>
            {
                entity.ToTable("ApplyHologram_DocumentRegistration");

                entity.Property(e => e.AuditStatusApplyHologramDocumentRegistration).HasColumnName("AuditStatus_ApplyHologram_DocumentRegistration");

                entity.Property(e => e.CreatorApplyHologramDocumentRegistration).HasColumnName("Creator_ApplyHologram_DocumentRegistration");

                entity.Property(e => e.DdlGetPhysicalReceipt).HasColumnName("ddlGetPhysicalReceipt");

                entity.Property(e => e.InstanceIdApplyHologramDocumentRegistration).HasColumnName("InstanceId_ApplyHologram_DocumentRegistration");

                entity.Property(e => e.InstanceSridApplyHologramDocumentRegistration).HasColumnName("InstanceSRId_ApplyHologram_DocumentRegistration");

                entity.Property(e => e.IpApplyHologramDocumentRegistration).HasColumnName("IP_ApplyHologram_DocumentRegistration");

                entity.Property(e => e.NumAddedNumberHolograms).HasColumnName("numAddedNumberHolograms");

                entity.Property(e => e.RegistrationDateApplyHologramDocumentRegistration).HasColumnName("RegistrationDate_ApplyHologram_DocumentRegistration");

                entity.Property(e => e.RegistrationStatusApplyHologramDocumentRegistration).HasColumnName("RegistrationStatus_ApplyHologram_DocumentRegistration");

                entity.Property(e => e.RegistrationTimeApplyHologramDocumentRegistration).HasColumnName("RegistrationTime_ApplyHologram_DocumentRegistration");

                entity.Property(e => e.UplDocumentImages).HasColumnName("uplDocumentImages");
            });

            modelBuilder.Entity<ApplyingForGoodsForm1>(entity =>
            {
                entity.ToTable("ApplyingForGoods_Form1");

                entity.Property(e => e.AuditStatusApplyingForGoodsForm1).HasColumnName("AuditStatus_ApplyingForGoods_Form1");

                entity.Property(e => e.CreatorApplyingForGoodsForm1).HasColumnName("Creator_ApplyingForGoods_Form1");

                entity.Property(e => e.InstanceIdApplyingForGoodsForm1).HasColumnName("InstanceId_ApplyingForGoods_Form1");

                entity.Property(e => e.InstanceSridApplyingForGoodsForm1).HasColumnName("InstanceSRId_ApplyingForGoods_Form1");

                entity.Property(e => e.IpApplyingForGoodsForm1).HasColumnName("IP_ApplyingForGoods_Form1");

                entity.Property(e => e.RegistrationDateApplyingForGoodsForm1).HasColumnName("RegistrationDate_ApplyingForGoods_Form1");

                entity.Property(e => e.RegistrationStatusApplyingForGoodsForm1).HasColumnName("RegistrationStatus_ApplyingForGoods_Form1");

                entity.Property(e => e.RegistrationTimeApplyingForGoodsForm1).HasColumnName("RegistrationTime_ApplyingForGoods_Form1");
            });

            modelBuilder.Entity<ApplyingForGoodsForm2>(entity =>
            {
                entity.ToTable("ApplyingForGoods_Form2");

                entity.Property(e => e.AuditStatusApplyingForGoodsForm2).HasColumnName("AuditStatus_ApplyingForGoods_Form2");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorApplyingForGoodsForm2).HasColumnName("Creator_ApplyingForGoods_Form2");

                entity.Property(e => e.DdlResultApplicationReview).HasColumnName("ddlResultApplicationReview");

                entity.Property(e => e.InstanceIdApplyingForGoodsForm2).HasColumnName("InstanceId_ApplyingForGoods_Form2");

                entity.Property(e => e.InstanceSridApplyingForGoodsForm2).HasColumnName("InstanceSRId_ApplyingForGoods_Form2");

                entity.Property(e => e.IpApplyingForGoodsForm2).HasColumnName("IP_ApplyingForGoods_Form2");

                entity.Property(e => e.RegistrationDateApplyingForGoodsForm2).HasColumnName("RegistrationDate_ApplyingForGoods_Form2");

                entity.Property(e => e.RegistrationStatusApplyingForGoodsForm2).HasColumnName("RegistrationStatus_ApplyingForGoods_Form2");

                entity.Property(e => e.RegistrationTimeApplyingForGoodsForm2).HasColumnName("RegistrationTime_ApplyingForGoods_Form2");
            });

            modelBuilder.Entity<ApplyingForGoodsForm3>(entity =>
            {
                entity.ToTable("ApplyingForGoods_Form3");

                entity.Property(e => e.AuditStatusApplyingForGoodsForm3).HasColumnName("AuditStatus_ApplyingForGoods_Form3");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorApplyingForGoodsForm3).HasColumnName("Creator_ApplyingForGoods_Form3");

                entity.Property(e => e.DdlResultApplicationReview).HasColumnName("ddlResultApplicationReview");

                entity.Property(e => e.InstanceIdApplyingForGoodsForm3).HasColumnName("InstanceId_ApplyingForGoods_Form3");

                entity.Property(e => e.InstanceSridApplyingForGoodsForm3).HasColumnName("InstanceSRId_ApplyingForGoods_Form3");

                entity.Property(e => e.IpApplyingForGoodsForm3).HasColumnName("IP_ApplyingForGoods_Form3");

                entity.Property(e => e.RegistrationDateApplyingForGoodsForm3).HasColumnName("RegistrationDate_ApplyingForGoods_Form3");

                entity.Property(e => e.RegistrationStatusApplyingForGoodsForm3).HasColumnName("RegistrationStatus_ApplyingForGoods_Form3");

                entity.Property(e => e.RegistrationTimeApplyingForGoodsForm3).HasColumnName("RegistrationTime_ApplyingForGoods_Form3");
            });

            modelBuilder.Entity<ApplyingForGoodsForm4>(entity =>
            {
                entity.ToTable("ApplyingForGoods_Form4");

                entity.Property(e => e.AuditStatusApplyingForGoodsForm4).HasColumnName("AuditStatus_ApplyingForGoods_Form4");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorApplyingForGoodsForm4).HasColumnName("Creator_ApplyingForGoods_Form4");

                entity.Property(e => e.DdlConfirmationDeliveryGoods).HasColumnName("ddlConfirmationDeliveryGoods");

                entity.Property(e => e.InstanceIdApplyingForGoodsForm4).HasColumnName("InstanceId_ApplyingForGoods_Form4");

                entity.Property(e => e.InstanceSridApplyingForGoodsForm4).HasColumnName("InstanceSRId_ApplyingForGoods_Form4");

                entity.Property(e => e.IpApplyingForGoodsForm4).HasColumnName("IP_ApplyingForGoods_Form4");

                entity.Property(e => e.RegistrationDateApplyingForGoodsForm4).HasColumnName("RegistrationDate_ApplyingForGoods_Form4");

                entity.Property(e => e.RegistrationStatusApplyingForGoodsForm4).HasColumnName("RegistrationStatus_ApplyingForGoods_Form4");

                entity.Property(e => e.RegistrationTimeApplyingForGoodsForm4).HasColumnName("RegistrationTime_ApplyingForGoods_Form4");
            });

            modelBuilder.Entity<ApplyingForGoodsForm5>(entity =>
            {
                entity.ToTable("ApplyingForGoods_Form5");

                entity.Property(e => e.AuditStatusApplyingForGoodsForm5).HasColumnName("AuditStatus_ApplyingForGoods_Form5");

                entity.Property(e => e.CreatorApplyingForGoodsForm5).HasColumnName("Creator_ApplyingForGoods_Form5");

                entity.Property(e => e.InstanceIdApplyingForGoodsForm5).HasColumnName("InstanceId_ApplyingForGoods_Form5");

                entity.Property(e => e.InstanceSridApplyingForGoodsForm5).HasColumnName("InstanceSRId_ApplyingForGoods_Form5");

                entity.Property(e => e.IpApplyingForGoodsForm5).HasColumnName("IP_ApplyingForGoods_Form5");

                entity.Property(e => e.PdateDateOfMeeting).HasColumnName("pdateDateOfMeeting");

                entity.Property(e => e.PdateDateOfMeetingGregorian)
                    .HasColumnName("pdateDateOfMeeting_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateApplyingForGoodsForm5).HasColumnName("RegistrationDate_ApplyingForGoods_Form5");

                entity.Property(e => e.RegistrationStatusApplyingForGoodsForm5).HasColumnName("RegistrationStatus_ApplyingForGoods_Form5");

                entity.Property(e => e.RegistrationTimeApplyingForGoodsForm5).HasColumnName("RegistrationTime_ApplyingForGoods_Form5");

                entity.Property(e => e.TimeMeetingHours).HasColumnName("timeMeetingHours");

                entity.Property(e => e.TxtDayOfMeeting).HasColumnName("txtDayOfMeeting");

                entity.Property(e => e.TxtMeetingPlace).HasColumnName("txtMeetingPlace");

                entity.Property(e => e.TxtTopicMeeting).HasColumnName("txtTopicMeeting");
            });

            modelBuilder.Entity<ApplyingForGoodsForm6>(entity =>
            {
                entity.ToTable("ApplyingForGoods_Form6");

                entity.Property(e => e.AuditStatusApplyingForGoodsForm6).HasColumnName("AuditStatus_ApplyingForGoods_Form6");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorApplyingForGoodsForm6).HasColumnName("Creator_ApplyingForGoods_Form6");

                entity.Property(e => e.InstanceIdApplyingForGoodsForm6).HasColumnName("InstanceId_ApplyingForGoods_Form6");

                entity.Property(e => e.InstanceSridApplyingForGoodsForm6).HasColumnName("InstanceSRId_ApplyingForGoods_Form6");

                entity.Property(e => e.IpApplyingForGoodsForm6).HasColumnName("IP_ApplyingForGoods_Form6");

                entity.Property(e => e.RegistrationDateApplyingForGoodsForm6).HasColumnName("RegistrationDate_ApplyingForGoods_Form6");

                entity.Property(e => e.RegistrationStatusApplyingForGoodsForm6).HasColumnName("RegistrationStatus_ApplyingForGoods_Form6");

                entity.Property(e => e.RegistrationTimeApplyingForGoodsForm6).HasColumnName("RegistrationTime_ApplyingForGoods_Form6");

                entity.Property(e => e.UplProceedings).HasColumnName("uplProceedings");
            });

            modelBuilder.Entity<ApplyingForGoodsForm7>(entity =>
            {
                entity.ToTable("ApplyingForGoods_Form7");

                entity.Property(e => e.AuditStatusApplyingForGoodsForm7).HasColumnName("AuditStatus_ApplyingForGoods_Form7");

                entity.Property(e => e.AxtResultCheck).HasColumnName("axtResultCheck");

                entity.Property(e => e.CreatorApplyingForGoodsForm7).HasColumnName("Creator_ApplyingForGoods_Form7");

                entity.Property(e => e.DdlResultCheck).HasColumnName("ddlResultCheck");

                entity.Property(e => e.InstanceIdApplyingForGoodsForm7).HasColumnName("InstanceId_ApplyingForGoods_Form7");

                entity.Property(e => e.InstanceSridApplyingForGoodsForm7).HasColumnName("InstanceSRId_ApplyingForGoods_Form7");

                entity.Property(e => e.IpApplyingForGoodsForm7).HasColumnName("IP_ApplyingForGoods_Form7");

                entity.Property(e => e.RegistrationDateApplyingForGoodsForm7).HasColumnName("RegistrationDate_ApplyingForGoods_Form7");

                entity.Property(e => e.RegistrationStatusApplyingForGoodsForm7).HasColumnName("RegistrationStatus_ApplyingForGoods_Form7");

                entity.Property(e => e.RegistrationTimeApplyingForGoodsForm7).HasColumnName("RegistrationTime_ApplyingForGoods_Form7");
            });

            modelBuilder.Entity<ArtCulturalActivities>(entity =>
            {
                entity.Property(e => e.AuditStatusArtCulturalActivities).HasColumnName("AuditStatus_ArtCulturalActivities");

                entity.Property(e => e.CreatorArtCulturalActivities).HasColumnName("Creator_ArtCulturalActivities");

                entity.Property(e => e.InstanceIdArtCulturalActivities).HasColumnName("InstanceId_ArtCulturalActivities");

                entity.Property(e => e.InstanceSridArtCulturalActivities).HasColumnName("InstanceSRId_ArtCulturalActivities");

                entity.Property(e => e.IpArtCulturalActivities).HasColumnName("IP_ArtCulturalActivities");

                entity.Property(e => e.RegistrationDateArtCulturalActivities).HasColumnName("RegistrationDate_ArtCulturalActivities");

                entity.Property(e => e.RegistrationStatusArtCulturalActivities).HasColumnName("RegistrationStatus_ArtCulturalActivities");

                entity.Property(e => e.RegistrationTimeArtCulturalActivities).HasColumnName("RegistrationTime_ArtCulturalActivities");

                entity.Property(e => e.TxaDueToLeave).HasColumnName("txaDueToLeave");

                entity.Property(e => e.TxtActivityType).HasColumnName("txtActivityType");

                entity.Property(e => e.TxtPost).HasColumnName("txtPost");

                entity.Property(e => e.TxtWorkPlace).HasColumnName("txtWorkPlace");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.ArtCulturalActivities)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_InstitutionExecutivesProfile_ArtCulturalActivities");
            });

            modelBuilder.Entity<AttractingTestablePersonnelForm1>(entity =>
            {
                entity.ToTable("AttractingTestablePersonnel_Form1");

                entity.Property(e => e.AuditStatusAttractingTestablePersonnelForm1).HasColumnName("AuditStatus_AttractingTestablePersonnel_Form1");

                entity.Property(e => e.AxtAddress).HasColumnName("axtAddress");

                entity.Property(e => e.AxtContractSubject).HasColumnName("axtContractSubject");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.AxtJobDescription).HasColumnName("axtJobDescription");

                entity.Property(e => e.AxtSupervisor).HasColumnName("axtSupervisor");

                entity.Property(e => e.CreatorAttractingTestablePersonnelForm1).HasColumnName("Creator_AttractingTestablePersonnel_Form1");

                entity.Property(e => e.DdlContractKind).HasColumnName("ddlContractKind");

                entity.Property(e => e.DdlKindInsuranceContract).HasColumnName("ddlKindInsuranceContract");

                entity.Property(e => e.InstanceIdAttractingTestablePersonnelForm1).HasColumnName("InstanceId_AttractingTestablePersonnel_Form1");

                entity.Property(e => e.InstanceSridAttractingTestablePersonnelForm1).HasColumnName("InstanceSRId_AttractingTestablePersonnel_Form1");

                entity.Property(e => e.IpAttractingTestablePersonnelForm1).HasColumnName("IP_AttractingTestablePersonnel_Form1");

                entity.Property(e => e.NumDurationContract).HasColumnName("numDurationContract");

                entity.Property(e => e.NumFixedPhoneNumber).HasColumnName("numFixedPhoneNumber");

                entity.Property(e => e.NumMobilePhoneNumber).HasColumnName("numMobilePhoneNumber");

                entity.Property(e => e.NumNetPaymentMonthly).HasColumnName("numNetPaymentMonthly");

                entity.Property(e => e.RegistrationDateAttractingTestablePersonnelForm1).HasColumnName("RegistrationDate_AttractingTestablePersonnel_Form1");

                entity.Property(e => e.RegistrationStatusAttractingTestablePersonnelForm1).HasColumnName("RegistrationStatus_AttractingTestablePersonnel_Form1");

                entity.Property(e => e.RegistrationTimeAttractingTestablePersonnelForm1).HasColumnName("RegistrationTime_AttractingTestablePersonnel_Form1");

                entity.Property(e => e.TxtAttendanceAgreement).HasColumnName("txtAttendanceAgreement");

                entity.Property(e => e.TxtLastName).HasColumnName("txtLastName");

                entity.Property(e => e.TxtName).HasColumnName("txtName");

                entity.Property(e => e.TxtSuggestedJobTitle).HasColumnName("txtSuggestedJobTitle");
            });

            modelBuilder.Entity<AttractingTestablePersonnelFormB>(entity =>
            {
                entity.ToTable("AttractingTestablePersonnel_FormB");

                entity.Property(e => e.AuditStatusAttractingTestablePersonnelFormB).HasColumnName("AuditStatus_AttractingTestablePersonnel_FormB");

                entity.Property(e => e.AxtEditingItems).HasColumnName("axtEditingItems");

                entity.Property(e => e.CreatorAttractingTestablePersonnelFormB).HasColumnName("Creator_AttractingTestablePersonnel_FormB");

                entity.Property(e => e.DdlReceivedData).HasColumnName("ddlReceivedData");

                entity.Property(e => e.InstanceIdAttractingTestablePersonnelFormB).HasColumnName("InstanceId_AttractingTestablePersonnel_FormB");

                entity.Property(e => e.InstanceSridAttractingTestablePersonnelFormB).HasColumnName("InstanceSRId_AttractingTestablePersonnel_FormB");

                entity.Property(e => e.IpAttractingTestablePersonnelFormB).HasColumnName("IP_AttractingTestablePersonnel_FormB");

                entity.Property(e => e.RegistrationDateAttractingTestablePersonnelFormB).HasColumnName("RegistrationDate_AttractingTestablePersonnel_FormB");

                entity.Property(e => e.RegistrationStatusAttractingTestablePersonnelFormB).HasColumnName("RegistrationStatus_AttractingTestablePersonnel_FormB");

                entity.Property(e => e.RegistrationTimeAttractingTestablePersonnelFormB).HasColumnName("RegistrationTime_AttractingTestablePersonnel_FormB");
            });

            modelBuilder.Entity<AttractingTestablePersonnelFormD>(entity =>
            {
                entity.ToTable("AttractingTestablePersonnel_FormD");

                entity.Property(e => e.AuditStatusAttractingTestablePersonnelFormD).HasColumnName("AuditStatus_AttractingTestablePersonnel_FormD");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorAttractingTestablePersonnelFormD).HasColumnName("Creator_AttractingTestablePersonnel_FormD");

                entity.Property(e => e.InstanceIdAttractingTestablePersonnelFormD).HasColumnName("InstanceId_AttractingTestablePersonnel_FormD");

                entity.Property(e => e.InstanceSridAttractingTestablePersonnelFormD).HasColumnName("InstanceSRId_AttractingTestablePersonnel_FormD");

                entity.Property(e => e.IpAttractingTestablePersonnelFormD).HasColumnName("IP_AttractingTestablePersonnel_FormD");

                entity.Property(e => e.RegistrationDateAttractingTestablePersonnelFormD).HasColumnName("RegistrationDate_AttractingTestablePersonnel_FormD");

                entity.Property(e => e.RegistrationStatusAttractingTestablePersonnelFormD).HasColumnName("RegistrationStatus_AttractingTestablePersonnel_FormD");

                entity.Property(e => e.RegistrationTimeAttractingTestablePersonnelFormD).HasColumnName("RegistrationTime_AttractingTestablePersonnel_FormD");

                entity.Property(e => e.UplPreviewImageText).HasColumnName("uplPreviewImageText");
            });

            modelBuilder.Entity<AttractingTestablePersonnelFormESubFormA>(entity =>
            {
                entity.ToTable("AttractingTestablePersonnel_FormE_SubFormA");

                entity.Property(e => e.AuditStatusAttractingTestablePersonnelFormESubFormA).HasColumnName("AuditStatus_AttractingTestablePersonnel_FormE_SubFormA");

                entity.Property(e => e.CreatorAttractingTestablePersonnelFormESubFormA).HasColumnName("Creator_AttractingTestablePersonnel_FormE_SubFormA");

                entity.Property(e => e.DdlGenderCommissioners).HasColumnName("ddlGenderCommissioners");

                entity.Property(e => e.DdllblFirstNameLastName).HasColumnName("ddllblFirstNameLastName");

                entity.Property(e => e.InstanceIdAttractingTestablePersonnelFormESubFormA).HasColumnName("InstanceId_AttractingTestablePersonnel_FormE_SubFormA");

                entity.Property(e => e.InstanceSridAttractingTestablePersonnelFormESubFormA).HasColumnName("InstanceSRId_AttractingTestablePersonnel_FormE_SubFormA");

                entity.Property(e => e.IpAttractingTestablePersonnelFormESubFormA).HasColumnName("IP_AttractingTestablePersonnel_FormE_SubFormA");

                entity.Property(e => e.RegistrationDateAttractingTestablePersonnelFormESubFormA).HasColumnName("RegistrationDate_AttractingTestablePersonnel_FormE_SubFormA");

                entity.Property(e => e.RegistrationStatusAttractingTestablePersonnelFormESubFormA).HasColumnName("RegistrationStatus_AttractingTestablePersonnel_FormE_SubFormA");

                entity.Property(e => e.RegistrationTimeAttractingTestablePersonnelFormESubFormA).HasColumnName("RegistrationTime_AttractingTestablePersonnel_FormE_SubFormA");
            });

            modelBuilder.Entity<AttractingTestablePersonnelFormESubFormB>(entity =>
            {
                entity.ToTable("AttractingTestablePersonnel_FormE_SubFormB");

                entity.Property(e => e.AuditStatusAttractingTestablePersonnelFormESubFormB).HasColumnName("AuditStatus_AttractingTestablePersonnel_FormE_SubFormB");

                entity.Property(e => e.CreatorAttractingTestablePersonnelFormESubFormB).HasColumnName("Creator_AttractingTestablePersonnel_FormE_SubFormB");

                entity.Property(e => e.InstanceIdAttractingTestablePersonnelFormESubFormB).HasColumnName("InstanceId_AttractingTestablePersonnel_FormE_SubFormB");

                entity.Property(e => e.InstanceSridAttractingTestablePersonnelFormESubFormB).HasColumnName("InstanceSRId_AttractingTestablePersonnel_FormE_SubFormB");

                entity.Property(e => e.IpAttractingTestablePersonnelFormESubFormB).HasColumnName("IP_AttractingTestablePersonnel_FormE_SubFormB");

                entity.Property(e => e.RegistrationDateAttractingTestablePersonnelFormESubFormB).HasColumnName("RegistrationDate_AttractingTestablePersonnel_FormE_SubFormB");

                entity.Property(e => e.RegistrationStatusAttractingTestablePersonnelFormESubFormB).HasColumnName("RegistrationStatus_AttractingTestablePersonnel_FormE_SubFormB");

                entity.Property(e => e.RegistrationTimeAttractingTestablePersonnelFormESubFormB).HasColumnName("RegistrationTime_AttractingTestablePersonnel_FormE_SubFormB");

                entity.Property(e => e.TxtInvitedName).HasColumnName("txtInvitedName");

                entity.Property(e => e.UplResumeInvited).HasColumnName("uplResumeInvited");
            });

            modelBuilder.Entity<AttractingTestablePersonnelFormF>(entity =>
            {
                entity.ToTable("AttractingTestablePersonnel_FormF");

                entity.Property(e => e.AuditStatusAttractingTestablePersonnelFormF).HasColumnName("AuditStatus_AttractingTestablePersonnel_FormF");

                entity.Property(e => e.AxtCommissionMinutes).HasColumnName("axtCommissionMinutes");

                entity.Property(e => e.CreatorAttractingTestablePersonnelFormF).HasColumnName("Creator_AttractingTestablePersonnel_FormF");

                entity.Property(e => e.DdlAssessmentResult).HasColumnName("ddlAssessmentResult");

                entity.Property(e => e.InstanceIdAttractingTestablePersonnelFormF).HasColumnName("InstanceId_AttractingTestablePersonnel_FormF");

                entity.Property(e => e.InstanceSridAttractingTestablePersonnelFormF).HasColumnName("InstanceSRId_AttractingTestablePersonnel_FormF");

                entity.Property(e => e.IpAttractingTestablePersonnelFormF).HasColumnName("IP_AttractingTestablePersonnel_FormF");

                entity.Property(e => e.RegistrationDateAttractingTestablePersonnelFormF).HasColumnName("RegistrationDate_AttractingTestablePersonnel_FormF");

                entity.Property(e => e.RegistrationStatusAttractingTestablePersonnelFormF).HasColumnName("RegistrationStatus_AttractingTestablePersonnel_FormF");

                entity.Property(e => e.RegistrationTimeAttractingTestablePersonnelFormF).HasColumnName("RegistrationTime_AttractingTestablePersonnel_FormF");
            });

            modelBuilder.Entity<AttractingTestablePersonnelFormG>(entity =>
            {
                entity.ToTable("AttractingTestablePersonnel_FormG");

                entity.Property(e => e.AuditStatusAttractingTestablePersonnelFormG).HasColumnName("AuditStatus_AttractingTestablePersonnel_FormG");

                entity.Property(e => e.AxtExpertActions).HasColumnName("axtExpertActions");

                entity.Property(e => e.CreatorAttractingTestablePersonnelFormG).HasColumnName("Creator_AttractingTestablePersonnel_FormG");

                entity.Property(e => e.InstanceIdAttractingTestablePersonnelFormG).HasColumnName("InstanceId_AttractingTestablePersonnel_FormG");

                entity.Property(e => e.InstanceSridAttractingTestablePersonnelFormG).HasColumnName("InstanceSRId_AttractingTestablePersonnel_FormG");

                entity.Property(e => e.IpAttractingTestablePersonnelFormG).HasColumnName("IP_AttractingTestablePersonnel_FormG");

                entity.Property(e => e.RegistrationDateAttractingTestablePersonnelFormG).HasColumnName("RegistrationDate_AttractingTestablePersonnel_FormG");

                entity.Property(e => e.RegistrationStatusAttractingTestablePersonnelFormG).HasColumnName("RegistrationStatus_AttractingTestablePersonnel_FormG");

                entity.Property(e => e.RegistrationTimeAttractingTestablePersonnelFormG).HasColumnName("RegistrationTime_AttractingTestablePersonnel_FormG");
            });

            modelBuilder.Entity<AuctionItems>(entity =>
            {
                entity.Property(e => e.AuditStatusAuctionItems).HasColumnName("AuditStatus_AuctionItems");

                entity.Property(e => e.CreatorAuctionItems).HasColumnName("Creator_AuctionItems");

                entity.Property(e => e.DdllMonopoly).HasColumnName("ddllMonopoly");

                entity.Property(e => e.InstanceIdAuctionItems).HasColumnName("InstanceId_AuctionItems");

                entity.Property(e => e.InstanceSridAuctionItems).HasColumnName("InstanceSRId_AuctionItems");

                entity.Property(e => e.IpAuctionItems).HasColumnName("IP_AuctionItems");

                entity.Property(e => e.NumDurationOfPublication).HasColumnName("numDurationOfPublication");

                entity.Property(e => e.RegistrationDateAuctionItems).HasColumnName("RegistrationDate_AuctionItems");

                entity.Property(e => e.RegistrationStatusAuctionItems).HasColumnName("RegistrationStatus_AuctionItems");

                entity.Property(e => e.RegistrationTimeAuctionItems).HasColumnName("RegistrationTime_AuctionItems");
            });

            modelBuilder.Entity<AuctionItems2>(entity =>
            {
                entity.Property(e => e.AuditStatusAuctionItems2).HasColumnName("AuditStatus_AuctionItems2");

                entity.Property(e => e.CreatorAuctionItems2).HasColumnName("Creator_AuctionItems2");

                entity.Property(e => e.InstanceIdAuctionItems2).HasColumnName("InstanceId_AuctionItems2");

                entity.Property(e => e.InstanceSridAuctionItems2).HasColumnName("InstanceSRId_AuctionItems2");

                entity.Property(e => e.IpAuctionItems2).HasColumnName("IP_AuctionItems2");

                entity.Property(e => e.RegistrationDateAuctionItems2).HasColumnName("RegistrationDate_AuctionItems2");

                entity.Property(e => e.RegistrationStatusAuctionItems2).HasColumnName("RegistrationStatus_AuctionItems2");

                entity.Property(e => e.RegistrationTimeAuctionItems2).HasColumnName("RegistrationTime_AuctionItems2");

                entity.Property(e => e.TxtItemName).HasColumnName("txtItemName");
            });

            modelBuilder.Entity<BankHologramReserved>(entity =>
            {
                entity.Property(e => e.AuditStatusBankHologramReserved).HasColumnName("AuditStatus_BankHologramReserved");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorBankHologramReserved).HasColumnName("Creator_BankHologramReserved");

                entity.Property(e => e.InstanceIdBankHologramReserved).HasColumnName("InstanceId_BankHologramReserved");

                entity.Property(e => e.InstanceSridBankHologramReserved).HasColumnName("InstanceSRId_BankHologramReserved");

                entity.Property(e => e.IpBankHologramReserved).HasColumnName("IP_BankHologramReserved");

                entity.Property(e => e.NumHologramAdded).HasColumnName("numHologramAdded");

                entity.Property(e => e.NumHologramAttached).HasColumnName("numHologramAttached");

                entity.Property(e => e.NumHologramRecorded).HasColumnName("numHologramRecorded");

                entity.Property(e => e.NumRemainingHolograms).HasColumnName("numRemainingHolograms");

                entity.Property(e => e.RegistrationDateBankHologramReserved).HasColumnName("RegistrationDate_BankHologramReserved");

                entity.Property(e => e.RegistrationStatusBankHologramReserved).HasColumnName("RegistrationStatus_BankHologramReserved");

                entity.Property(e => e.RegistrationTimeBankHologramReserved).HasColumnName("RegistrationTime_BankHologramReserved");

                entity.Property(e => e.UplDocumentation).HasColumnName("uplDocumentation");
            });

            modelBuilder.Entity<Blocks>(entity =>
            {
                entity.HasKey(e => e.BlockId);

                entity.HasIndex(e => e.ModuleId)
                    .HasName("IX_ModuleId");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.Blocks)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_dbo.Blocks_dbo.Modules_ModuleId");
            });

            modelBuilder.Entity<Bscs>(entity =>
            {
                entity.ToTable("BSCs");
            });

            modelBuilder.Entity<CalendarEventGroupShares>(entity =>
            {
                entity.HasKey(e => e.CalendarEventGroupShareId);

                entity.HasIndex(e => e.CalendarEventId)
                    .HasName("IX_CalendarEventId");

                entity.HasOne(d => d.CalendarEvent)
                    .WithMany(p => p.CalendarEventGroupShares)
                    .HasForeignKey(d => d.CalendarEventId)
                    .HasConstraintName("FK_dbo.CalendarEventGroupShares_dbo.CalenderEvents_CalendarEventId");
            });

            modelBuilder.Entity<CalendarEventParticipantGroups>(entity =>
            {
                entity.HasKey(e => e.CalendarEventParticipantGroupId);

                entity.HasIndex(e => e.CalendarEventId)
                    .HasName("IX_CalendarEventId");

                entity.HasOne(d => d.CalendarEvent)
                    .WithMany(p => p.CalendarEventParticipantGroups)
                    .HasForeignKey(d => d.CalendarEventId)
                    .HasConstraintName("FK_dbo.CalendarEventParticipantGroups_dbo.CalenderEvents_CalendarEventId");
            });

            modelBuilder.Entity<CalendarEventParticipants>(entity =>
            {
                entity.HasKey(e => e.CalendarEventParticipantId);

                entity.HasIndex(e => e.CalendarEventId)
                    .HasName("IX_CalendarEventId");

                entity.HasOne(d => d.CalendarEvent)
                    .WithMany(p => p.CalendarEventParticipants)
                    .HasForeignKey(d => d.CalendarEventId)
                    .HasConstraintName("FK_dbo.CalendarEventParticipants_dbo.CalenderEvents_CalendarEventId");
            });

            modelBuilder.Entity<CalendarEventPersonShares>(entity =>
            {
                entity.HasKey(e => e.CalendarEventPersonShareId);

                entity.HasIndex(e => e.CalendarEventId)
                    .HasName("IX_CalendarEventId");

                entity.HasOne(d => d.CalendarEvent)
                    .WithMany(p => p.CalendarEventPersonShares)
                    .HasForeignKey(d => d.CalendarEventId)
                    .HasConstraintName("FK_dbo.CalendarEventPersonShares_dbo.CalenderEvents_CalendarEventId");
            });

            modelBuilder.Entity<CalenderEvents>(entity =>
            {
                entity.Property(e => e.AlertDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CalenderIsHolidays>(entity =>
            {
                entity.Property(e => e.HolidayType).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Captchatest>(entity =>
            {
                entity.ToTable("captchatest");

                entity.Property(e => e.Asd).HasColumnName("asd");

                entity.Property(e => e.Asdas).HasColumnName("asdas");

                entity.Property(e => e.Asdasdas).HasColumnName("asdasdas");

                entity.Property(e => e.Asdasdasd).HasColumnName("asdasdasd");

                entity.Property(e => e.Asdasdasdasda).HasColumnName("asdasdasdasda");

                entity.Property(e => e.Asdqee).HasColumnName("asdqee");

                entity.Property(e => e.AuditStatusCaptchatest).HasColumnName("AuditStatus_captchatest");

                entity.Property(e => e.Ca).HasColumnName("ca");

                entity.Property(e => e.CreatorCaptchatest).HasColumnName("Creator_captchatest");

                entity.Property(e => e.InstanceIdCaptchatest).HasColumnName("InstanceId_captchatest");

                entity.Property(e => e.InstanceSridCaptchatest).HasColumnName("InstanceSRId_captchatest");

                entity.Property(e => e.IpCaptchatest).HasColumnName("IP_captchatest");

                entity.Property(e => e.RegistrationDateCaptchatest).HasColumnName("RegistrationDate_captchatest");

                entity.Property(e => e.RegistrationStatusCaptchatest).HasColumnName("RegistrationStatus_captchatest");

                entity.Property(e => e.RegistrationTimeCaptchatest).HasColumnName("RegistrationTime_captchatest");
            });

            modelBuilder.Entity<CartableLetters>(entity =>
            {
                entity.HasIndex(e => e.CalenderEventId)
                    .HasName("IX_CalenderEvent_Id");

                entity.HasIndex(e => e.LetterId1)
                    .HasName("IX_Letter_Id");

                entity.HasIndex(e => e.ProceedingsId)
                    .HasName("IX_Proceedings_Id");

                entity.HasIndex(e => e.UserMessageId)
                    .HasName("IX_UserMessage_Id");

                entity.HasIndex(e => e.WfwInstanceStateReceiverId)
                    .HasName("IX_WfwInstanceStateReceiver_Id");

                entity.Property(e => e.CalenderEventId).HasColumnName("CalenderEvent_Id");

                entity.Property(e => e.LetterId1).HasColumnName("Letter_Id");

                entity.Property(e => e.ProceedingsId).HasColumnName("Proceedings_Id");

                entity.Property(e => e.UserMessageId).HasColumnName("UserMessage_Id");

                entity.Property(e => e.WfwInstanceStateReceiverId).HasColumnName("WfwInstanceStateReceiver_Id");

                entity.HasOne(d => d.CalenderEvent)
                    .WithMany(p => p.CartableLettersCalenderEvent)
                    .HasForeignKey(d => d.CalenderEventId)
                    .HasConstraintName("FK_dbo.CartableLetters_dbo.CalenderEvents_CalenderEvent_Id");

                entity.HasOne(d => d.LetterId1Navigation)
                    .WithMany(p => p.CartableLetters)
                    .HasForeignKey(d => d.LetterId1)
                    .HasConstraintName("FK_dbo.CartableLetters_dbo.Letters_Letter_Id");

                entity.HasOne(d => d.Proceedings)
                    .WithMany(p => p.CartableLettersProceedings)
                    .HasForeignKey(d => d.ProceedingsId)
                    .HasConstraintName("FK_dbo.CartableLetters_dbo.CalenderEvents_Proceedings_Id");

                entity.HasOne(d => d.UserMessage)
                    .WithMany(p => p.CartableLetters)
                    .HasForeignKey(d => d.UserMessageId)
                    .HasConstraintName("FK_dbo.CartableLetters_dbo.UserMessages_UserMessage_Id");

                entity.HasOne(d => d.WfwInstanceStateReceiver)
                    .WithMany(p => p.CartableLetters)
                    .HasForeignKey(d => d.WfwInstanceStateReceiverId)
                    .HasConstraintName("FK_dbo.CartableLetters_dbo.WfwInstanceStateReceivers_WfwInstanceStateReceiver_Id");
            });

            modelBuilder.Entity<Cbtest>(entity =>
            {
                entity.ToTable("cbtest");

                entity.Property(e => e.AuditStatusCbtest).HasColumnName("AuditStatus_cbtest");

                entity.Property(e => e.Cba).HasColumnName("cba");

                entity.Property(e => e.CreatorCbtest).HasColumnName("Creator_cbtest");

                entity.Property(e => e.InstanceIdCbtest).HasColumnName("InstanceId_cbtest");

                entity.Property(e => e.InstanceSridCbtest).HasColumnName("InstanceSRId_cbtest");

                entity.Property(e => e.IpCbtest).HasColumnName("IP_cbtest");

                entity.Property(e => e.RegistrationDateCbtest).HasColumnName("RegistrationDate_cbtest");

                entity.Property(e => e.RegistrationStatusCbtest).HasColumnName("RegistrationStatus_cbtest");

                entity.Property(e => e.RegistrationTimeCbtest).HasColumnName("RegistrationTime_cbtest");

                entity.Property(e => e.Txtb).HasColumnName("txtb");
            });

            modelBuilder.Entity<ChartSettings>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<Checkemail>(entity =>
            {
                entity.ToTable("checkemail");

                entity.Property(e => e.AuditStatusCheckemail).HasColumnName("AuditStatus_checkemail");

                entity.Property(e => e.CreatorCheckemail).HasColumnName("Creator_checkemail");

                entity.Property(e => e.InstanceIdCheckemail).HasColumnName("InstanceId_checkemail");

                entity.Property(e => e.InstanceSridCheckemail).HasColumnName("InstanceSRId_checkemail");

                entity.Property(e => e.IpCheckemail).HasColumnName("IP_checkemail");

                entity.Property(e => e.MaileMail).HasColumnName("maileMail");

                entity.Property(e => e.RegistrationDateCheckemail).HasColumnName("RegistrationDate_checkemail");

                entity.Property(e => e.RegistrationStatusCheckemail).HasColumnName("RegistrationStatus_checkemail");

                entity.Property(e => e.RegistrationTimeCheckemail).HasColumnName("RegistrationTime_checkemail");
            });

            modelBuilder.Entity<CheckingFormMessages>(entity =>
            {
                entity.HasIndex(e => e.CheckingFormId)
                    .HasName("IX_CheckingForm_Id");

                entity.HasIndex(e => e.SendingMailId)
                    .HasName("IX_SendingMail_Id");

                entity.Property(e => e.CheckingFormId).HasColumnName("CheckingForm_Id");

                entity.Property(e => e.SendingMailId).HasColumnName("SendingMail_Id");

                entity.HasOne(d => d.CheckingForm)
                    .WithMany(p => p.CheckingFormMessages)
                    .HasForeignKey(d => d.CheckingFormId)
                    .HasConstraintName("FK_dbo.CheckingFormMessages_dbo.CheckingForms_CheckingForm_Id");

                entity.HasOne(d => d.SendingMail)
                    .WithMany(p => p.CheckingFormMessages)
                    .HasForeignKey(d => d.SendingMailId)
                    .HasConstraintName("FK_dbo.CheckingFormMessages_dbo.SendingMails_SendingMail_Id");
            });

            modelBuilder.Entity<CheckingForms>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.CheckingForms)
                    .HasForeignKey<CheckingForms>(d => d.Id)
                    .HasConstraintName("FK_dbo.CheckingForms_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<CheckingGameCertificateR>(entity =>
            {
                entity.Property(e => e.AuditStatusCheckingGameCertificateR).HasColumnName("AuditStatus_CheckingGameCertificateR");

                entity.Property(e => e.CreatorCheckingGameCertificateR).HasColumnName("Creator_CheckingGameCertificateR");

                entity.Property(e => e.DateEnd).HasColumnName("dateEnd");

                entity.Property(e => e.DateEndGregorian)
                    .HasColumnName("dateEnd_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnName("dateStart");

                entity.Property(e => e.DateStartGregorian)
                    .HasColumnName("dateStart_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.InstanceIdCheckingGameCertificateR).HasColumnName("InstanceId_CheckingGameCertificateR");

                entity.Property(e => e.InstanceSridCheckingGameCertificateR).HasColumnName("InstanceSRId_CheckingGameCertificateR");

                entity.Property(e => e.IpCheckingGameCertificateR).HasColumnName("IP_CheckingGameCertificateR");

                entity.Property(e => e.RegistrationDateCheckingGameCertificateR).HasColumnName("RegistrationDate_CheckingGameCertificateR");

                entity.Property(e => e.RegistrationStatusCheckingGameCertificateR).HasColumnName("RegistrationStatus_CheckingGameCertificateR");

                entity.Property(e => e.RegistrationTimeCheckingGameCertificateR).HasColumnName("RegistrationTime_CheckingGameCertificateR");
            });

            modelBuilder.Entity<CheckOutAuctionItems>(entity =>
            {
                entity.Property(e => e.AuditStatusCheckOutAuctionItems).HasColumnName("AuditStatus_CheckOutAuctionItems");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorCheckOutAuctionItems).HasColumnName("Creator_CheckOutAuctionItems");

                entity.Property(e => e.DdlResultOfReview).HasColumnName("ddlResultOfReview");

                entity.Property(e => e.InstanceIdCheckOutAuctionItems).HasColumnName("InstanceId_CheckOutAuctionItems");

                entity.Property(e => e.InstanceSridCheckOutAuctionItems).HasColumnName("InstanceSRId_CheckOutAuctionItems");

                entity.Property(e => e.IpCheckOutAuctionItems).HasColumnName("IP_CheckOutAuctionItems");

                entity.Property(e => e.RegistrationDateCheckOutAuctionItems).HasColumnName("RegistrationDate_CheckOutAuctionItems");

                entity.Property(e => e.RegistrationStatusCheckOutAuctionItems).HasColumnName("RegistrationStatus_CheckOutAuctionItems");

                entity.Property(e => e.RegistrationTimeCheckOutAuctionItems).HasColumnName("RegistrationTime_CheckOutAuctionItems");
            });

            modelBuilder.Entity<CompanyRegistration>(entity =>
            {
                entity.Property(e => e.AuditStatusCompanyRegistration).HasColumnName("AuditStatus_CompanyRegistration");

                entity.Property(e => e.CompanyRegistrationSletter).HasColumnName("CompanyRegistrationSLetter");

                entity.Property(e => e.CompanyRegistrationSletterDate).HasColumnName("CompanyRegistrationSLetterDate");

                entity.Property(e => e.CreatorCompanyRegistration).HasColumnName("Creator_CompanyRegistration");

                entity.Property(e => e.InstanceIdCompanyRegistration).HasColumnName("InstanceId_CompanyRegistration");

                entity.Property(e => e.InstanceSridCompanyRegistration).HasColumnName("InstanceSRId_CompanyRegistration");

                entity.Property(e => e.IpCompanyRegistration).HasColumnName("IP_CompanyRegistration");

                entity.Property(e => e.RegistrationDateCompanyRegistration).HasColumnName("RegistrationDate_CompanyRegistration");

                entity.Property(e => e.RegistrationStatusCompanyRegistration).HasColumnName("RegistrationStatus_CompanyRegistration");

                entity.Property(e => e.RegistrationTimeCompanyRegistration).HasColumnName("RegistrationTime_CompanyRegistration");

                entity.Property(e => e.TxtCompanyName).HasColumnName("txtCompanyName");

                entity.Property(e => e.TxtCompanyRegistrationId).HasColumnName("txtCompanyRegistrationId");
            });

            modelBuilder.Entity<ComplitingForms>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.ComplitingForms)
                    .HasForeignKey<ComplitingForms>(d => d.Id)
                    .HasConstraintName("FK_dbo.ComplitingForms_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<Conditions>(entity =>
            {
                entity.HasIndex(e => e.LawId)
                    .HasName("IX_LawId");

                entity.HasOne(d => d.Law)
                    .WithMany(p => p.Conditions)
                    .HasForeignKey(d => d.LawId)
                    .HasConstraintName("FK_dbo.Conditions_dbo.Laws_LawId");
            });

            modelBuilder.Entity<Contents>(entity =>
            {
                entity.Property(e => e.PublishedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ContentScore>(entity =>
            {
                entity.Property(e => e.AuditStatusContentScore).HasColumnName("AuditStatus_ContentScore");

                entity.Property(e => e.CreatorContentScore).HasColumnName("Creator_ContentScore");

                entity.Property(e => e.InstanceIdContentScore).HasColumnName("InstanceId_ContentScore");

                entity.Property(e => e.InstanceSridContentScore).HasColumnName("InstanceSRId_ContentScore");

                entity.Property(e => e.IpContentScore).HasColumnName("IP_ContentScore");

                entity.Property(e => e.RegistrationDateContentScore).HasColumnName("RegistrationDate_ContentScore");

                entity.Property(e => e.RegistrationStatusContentScore).HasColumnName("RegistrationStatus_ContentScore");

                entity.Property(e => e.RegistrationTimeContentScore).HasColumnName("RegistrationTime_ContentScore");
            });

            modelBuilder.Entity<ContentScoreAverage>(entity =>
            {
                entity.Property(e => e.GameName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContractCommission>(entity =>
            {
                entity.Property(e => e.AuditStatusContractCommission).HasColumnName("AuditStatus_ContractCommission");

                entity.Property(e => e.CreatorContractCommission).HasColumnName("Creator_ContractCommission");

                entity.Property(e => e.Ddlemkanepardakht).HasColumnName("ddlemkanepardakht");

                entity.Property(e => e.Ddlhamkhani).HasColumnName("ddlhamkhani");

                entity.Property(e => e.Ddllblmashmoole38).HasColumnName("ddllblmashmoole38");

                entity.Property(e => e.Ddlmadarek).HasColumnName("ddlmadarek");

                entity.Property(e => e.Ddlmalagh).HasColumnName("ddlmalagh");

                entity.Property(e => e.Ddlmashmoolearzeshafzoode).HasColumnName("ddlmashmoolearzeshafzoode");

                entity.Property(e => e.Ddlmashmoolemostaghim).HasColumnName("ddlmashmoolemostaghim");

                entity.Property(e => e.DdlnahvePardakht).HasColumnName("ddlnahvePardakht");

                entity.Property(e => e.Ddlsaghfeboodje).HasColumnName("ddlsaghfeboodje");

                entity.Property(e => e.Ddltazamin).HasColumnName("ddltazamin");

                entity.Property(e => e.InstanceIdContractCommission).HasColumnName("InstanceId_ContractCommission");

                entity.Property(e => e.InstanceSridContractCommission).HasColumnName("InstanceSRId_ContractCommission");

                entity.Property(e => e.IpContractCommission).HasColumnName("IP_ContractCommission");

                entity.Property(e => e.RegistrationDateContractCommission).HasColumnName("RegistrationDate_ContractCommission");

                entity.Property(e => e.RegistrationStatusContractCommission).HasColumnName("RegistrationStatus_ContractCommission");

                entity.Property(e => e.RegistrationTimeContractCommission).HasColumnName("RegistrationTime_ContractCommission");

                entity.Property(e => e.TxtmablaghTozihat).HasColumnName("txtmablaghTozihat");

                entity.Property(e => e.Txtmablaghegharardad).HasColumnName("txtmablaghegharardad");

                entity.Property(e => e.Txtmozooategharardad).HasColumnName("txtmozooategharardad");

                entity.Property(e => e.Txttozihatemkanepardakht).HasColumnName("txttozihatemkanepardakht");

                entity.Property(e => e.Txttozihatemozooategharardad).HasColumnName("txttozihatemozooategharardad");

                entity.Property(e => e.Txttozihatenahvepardakht).HasColumnName("txttozihatenahvepardakht");

                entity.Property(e => e.Txttozihathamkhani).HasColumnName("txttozihathamkhani");

                entity.Property(e => e.Txttozihatmablaghegharardad).HasColumnName("txttozihatmablaghegharardad");

                entity.Property(e => e.Txttozihatmadarek).HasColumnName("txttozihatmadarek");

                entity.Property(e => e.Txttozihatmashmoole38).HasColumnName("txttozihatmashmoole38");

                entity.Property(e => e.Txttozihatmashmoolearzeshafzoode).HasColumnName("txttozihatmashmoolearzeshafzoode");

                entity.Property(e => e.Txttozihatmashmoolemostaghim).HasColumnName("txttozihatmashmoolemostaghim");

                entity.Property(e => e.Txttozihatsaghfeboodje).HasColumnName("txttozihatsaghfeboodje");

                entity.Property(e => e.Txttozihattazamin).HasColumnName("txttozihattazamin");
            });

            modelBuilder.Entity<ContractCommission2>(entity =>
            {
                entity.Property(e => e.AuditStatusContractCommission2).HasColumnName("AuditStatus_ContractCommission2");

                entity.Property(e => e.CkComissionResult).HasColumnName("ckComissionResult");

                entity.Property(e => e.CkHoghooghi).HasColumnName("ckHoghooghi");

                entity.Property(e => e.Ckboodjeh).HasColumnName("CKBOODJEH");

                entity.Property(e => e.CreatorContractCommission2).HasColumnName("Creator_ContractCommission2");

                entity.Property(e => e.InstanceIdContractCommission2).HasColumnName("InstanceId_ContractCommission2");

                entity.Property(e => e.InstanceSridContractCommission2).HasColumnName("InstanceSRId_ContractCommission2");

                entity.Property(e => e.IpContractCommission2).HasColumnName("IP_ContractCommission2");

                entity.Property(e => e.RegistrationDateContractCommission2).HasColumnName("RegistrationDate_ContractCommission2");

                entity.Property(e => e.RegistrationStatusContractCommission2).HasColumnName("RegistrationStatus_ContractCommission2");

                entity.Property(e => e.RegistrationTimeContractCommission2).HasColumnName("RegistrationTime_ContractCommission2");

                entity.Property(e => e.TxtmablaghTozihat).HasColumnName("txtmablaghTozihat");

                entity.Property(e => e.Txtmablaghegharardad).HasColumnName("txtmablaghegharardad");

                entity.Property(e => e.Txttozihatenahvepardakht).HasColumnName("txttozihatenahvepardakht");

                entity.Property(e => e.Txttozihatmablaghegharardad).HasColumnName("txttozihatmablaghegharardad");

                entity.Property(e => e.Txttozihatmashmoole38).HasColumnName("txttozihatmashmoole38");

                entity.Property(e => e.Txttozihatmashmoolearzeshafzoode).HasColumnName("txttozihatmashmoolearzeshafzoode");

                entity.Property(e => e.Txttozihatmashmoolemostaghim).HasColumnName("txttozihatmashmoolemostaghim");
            });

            modelBuilder.Entity<ContractConsultantForm>(entity =>
            {
                entity.Property(e => e.AuditStatusContractConsultantForm).HasColumnName("AuditStatus_ContractConsultantForm");

                entity.Property(e => e.CreatorContractConsultantForm).HasColumnName("Creator_ContractConsultantForm");

                entity.Property(e => e.InstanceIdContractConsultantForm).HasColumnName("InstanceId_ContractConsultantForm");

                entity.Property(e => e.InstanceSridContractConsultantForm).HasColumnName("InstanceSRId_ContractConsultantForm");

                entity.Property(e => e.IpContractConsultantForm).HasColumnName("IP_ContractConsultantForm");

                entity.Property(e => e.RegistrationDateContractConsultantForm).HasColumnName("RegistrationDate_ContractConsultantForm");

                entity.Property(e => e.RegistrationStatusContractConsultantForm).HasColumnName("RegistrationStatus_ContractConsultantForm");

                entity.Property(e => e.RegistrationTimeContractConsultantForm).HasColumnName("RegistrationTime_ContractConsultantForm");

                entity.Property(e => e.TxaConsult).HasColumnName("txaConsult");
            });

            modelBuilder.Entity<ContractDeputyConfirmation1>(entity =>
            {
                entity.Property(e => e.AuditStatusContractDeputyConfirmation1).HasColumnName("AuditStatus_ContractDeputyConfirmation1");

                entity.Property(e => e.CreatorContractDeputyConfirmation1).HasColumnName("Creator_ContractDeputyConfirmation1");

                entity.Property(e => e.DdlContractAssurance).HasColumnName("ddlContractAssurance");

                entity.Property(e => e.DdlContractCommission).HasColumnName("ddlContractCommission");

                entity.Property(e => e.DdlContractPrice).HasColumnName("ddlContractPrice");

                entity.Property(e => e.InstanceIdContractDeputyConfirmation1).HasColumnName("InstanceId_ContractDeputyConfirmation1");

                entity.Property(e => e.InstanceSridContractDeputyConfirmation1).HasColumnName("InstanceSRId_ContractDeputyConfirmation1");

                entity.Property(e => e.IpContractDeputyConfirmation1).HasColumnName("IP_ContractDeputyConfirmation1");

                entity.Property(e => e.RegistrationDateContractDeputyConfirmation1).HasColumnName("RegistrationDate_ContractDeputyConfirmation1");

                entity.Property(e => e.RegistrationStatusContractDeputyConfirmation1).HasColumnName("RegistrationStatus_ContractDeputyConfirmation1");

                entity.Property(e => e.RegistrationTimeContractDeputyConfirmation1).HasColumnName("RegistrationTime_ContractDeputyConfirmation1");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxaContractCommissionReason).HasColumnName("txaContractCommissionReason");
            });

            modelBuilder.Entity<ContractDeputyConfirmation2>(entity =>
            {
                entity.Property(e => e.AuditStatusContractDeputyConfirmation2).HasColumnName("AuditStatus_ContractDeputyConfirmation2");

                entity.Property(e => e.CreatorContractDeputyConfirmation2).HasColumnName("Creator_ContractDeputyConfirmation2");

                entity.Property(e => e.DdlContractAssurance).HasColumnName("ddlContractAssurance");

                entity.Property(e => e.DdlContractPrice).HasColumnName("ddlContractPrice");

                entity.Property(e => e.InstanceIdContractDeputyConfirmation2).HasColumnName("InstanceId_ContractDeputyConfirmation2");

                entity.Property(e => e.InstanceSridContractDeputyConfirmation2).HasColumnName("InstanceSRId_ContractDeputyConfirmation2");

                entity.Property(e => e.IpContractDeputyConfirmation2).HasColumnName("IP_ContractDeputyConfirmation2");

                entity.Property(e => e.RegistrationDateContractDeputyConfirmation2).HasColumnName("RegistrationDate_ContractDeputyConfirmation2");

                entity.Property(e => e.RegistrationStatusContractDeputyConfirmation2).HasColumnName("RegistrationStatus_ContractDeputyConfirmation2");

                entity.Property(e => e.RegistrationTimeContractDeputyConfirmation2).HasColumnName("RegistrationTime_ContractDeputyConfirmation2");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");
            });

            modelBuilder.Entity<ContractDevelopMgntConfirmation1>(entity =>
            {
                entity.Property(e => e.AuditStatusContractDevelopMgntConfirmation1).HasColumnName("AuditStatus_ContractDevelopMgntConfirmation1");

                entity.Property(e => e.CreatorContractDevelopMgntConfirmation1).HasColumnName("Creator_ContractDevelopMgntConfirmation1");

                entity.Property(e => e.DdlActivityRel).HasColumnName("ddlActivityRel");

                entity.Property(e => e.DdlCommission).HasColumnName("ddlCommission");

                entity.Property(e => e.InstanceIdContractDevelopMgntConfirmation1).HasColumnName("InstanceId_ContractDevelopMgntConfirmation1");

                entity.Property(e => e.InstanceSridContractDevelopMgntConfirmation1).HasColumnName("InstanceSRId_ContractDevelopMgntConfirmation1");

                entity.Property(e => e.IpContractDevelopMgntConfirmation1).HasColumnName("IP_ContractDevelopMgntConfirmation1");

                entity.Property(e => e.RegistrationDateContractDevelopMgntConfirmation1).HasColumnName("RegistrationDate_ContractDevelopMgntConfirmation1");

                entity.Property(e => e.RegistrationStatusContractDevelopMgntConfirmation1).HasColumnName("RegistrationStatus_ContractDevelopMgntConfirmation1");

                entity.Property(e => e.RegistrationTimeContractDevelopMgntConfirmation1).HasColumnName("RegistrationTime_ContractDevelopMgntConfirmation1");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxaCommissionReasin).HasColumnName("txaCommissionReasin");
            });

            modelBuilder.Entity<ContractDevelopMgntConfirmation2>(entity =>
            {
                entity.Property(e => e.AuditStatusContractDevelopMgntConfirmation2).HasColumnName("AuditStatus_ContractDevelopMgntConfirmation2");

                entity.Property(e => e.CreatorContractDevelopMgntConfirmation2).HasColumnName("Creator_ContractDevelopMgntConfirmation2");

                entity.Property(e => e.DdlActivityRel).HasColumnName("ddlActivityRel");

                entity.Property(e => e.InstanceIdContractDevelopMgntConfirmation2).HasColumnName("InstanceId_ContractDevelopMgntConfirmation2");

                entity.Property(e => e.InstanceSridContractDevelopMgntConfirmation2).HasColumnName("InstanceSRId_ContractDevelopMgntConfirmation2");

                entity.Property(e => e.IpContractDevelopMgntConfirmation2).HasColumnName("IP_ContractDevelopMgntConfirmation2");

                entity.Property(e => e.RegistrationDateContractDevelopMgntConfirmation2).HasColumnName("RegistrationDate_ContractDevelopMgntConfirmation2");

                entity.Property(e => e.RegistrationStatusContractDevelopMgntConfirmation2).HasColumnName("RegistrationStatus_ContractDevelopMgntConfirmation2");

                entity.Property(e => e.RegistrationTimeContractDevelopMgntConfirmation2).HasColumnName("RegistrationTime_ContractDevelopMgntConfirmation2");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");
            });

            modelBuilder.Entity<ContractFirstRequest>(entity =>
            {
                entity.Property(e => e.AuditStatusContractFirstRequest).HasColumnName("AuditStatus_ContractFirstRequest");

                entity.Property(e => e.Bcnumber).HasColumnName("BCNumber");

                entity.Property(e => e.CreatorContractFirstRequest).HasColumnName("Creator_ContractFirstRequest");

                entity.Property(e => e.DdlKind).HasColumnName("ddlKind");

                entity.Property(e => e.DdlMainActivities).HasColumnName("ddlMainActivities");

                entity.Property(e => e.DdlSubActivities).HasColumnName("ddlSubActivities");

                entity.Property(e => e.DdlUnits).HasColumnName("ddlUnits");

                entity.Property(e => e.DdlcontractAssurance).HasColumnName("ddlcontractAssurance");

                entity.Property(e => e.Flezamimeh).HasColumnName("flezamimeh");

                entity.Property(e => e.InstanceIdContractFirstRequest).HasColumnName("InstanceId_ContractFirstRequest");

                entity.Property(e => e.InstanceSridContractFirstRequest).HasColumnName("InstanceSRId_ContractFirstRequest");

                entity.Property(e => e.IpContractFirstRequest).HasColumnName("IP_ContractFirstRequest");

                entity.Property(e => e.RegistrationDateContractFirstRequest).HasColumnName("RegistrationDate_ContractFirstRequest");

                entity.Property(e => e.RegistrationStatusContractFirstRequest).HasColumnName("RegistrationStatus_ContractFirstRequest");

                entity.Property(e => e.RegistrationTimeContractFirstRequest).HasColumnName("RegistrationTime_ContractFirstRequest");

                entity.Property(e => e.TxaAddress).HasColumnName("txaAddress");

                entity.Property(e => e.TxaContractPrice).HasColumnName("txaContractPrice");

                entity.Property(e => e.TxaContractTime).HasColumnName("txaContractTime");

                entity.Property(e => e.TxaFcommitments).HasColumnName("txaFCommitments");

                entity.Property(e => e.TxaLcommitments).HasColumnName("txaLCommitments");

                entity.Property(e => e.TxaOrganizationAddress).HasColumnName("txaOrganizationAddress");

                entity.Property(e => e.TxtAgentName).HasColumnName("txtAgentName");

                entity.Property(e => e.TxtAgentPost).HasColumnName("txtAgentPost");

                entity.Property(e => e.TxtAgentTel).HasColumnName("txtAgentTel");

                entity.Property(e => e.TxtContractPlace).HasColumnName("txtContractPlace");

                entity.Property(e => e.TxtContractSuject).HasColumnName("txtContractSuject");

                entity.Property(e => e.TxtLfname).HasColumnName("txtLFName");

                entity.Property(e => e.TxtOrganizationId).HasColumnName("txtOrganizationId");

                entity.Property(e => e.TxtOrganizationName).HasColumnName("txtOrganizationName");

                entity.Property(e => e.TxtOrganizationTel).HasColumnName("txtOrganizationTel");

                entity.Property(e => e.TxtPhone).HasColumnName("txtPhone");

                entity.Property(e => e.TxtSubActivities).HasColumnName("txtSubActivities");

                entity.Property(e => e.TxtSupervisor).HasColumnName("txtSupervisor");

                entity.Property(e => e.TxtTel).HasColumnName("txtTel");
            });

            modelBuilder.Entity<ContractLegalMgntConfirmation1>(entity =>
            {
                entity.Property(e => e.AuditStatusContractLegalMgntConfirmation1).HasColumnName("AuditStatus_ContractLegalMgntConfirmation1");

                entity.Property(e => e.CreatorContractLegalMgntConfirmation1).HasColumnName("Creator_ContractLegalMgntConfirmation1");

                entity.Property(e => e.DdlCommission).HasColumnName("ddlCommission");

                entity.Property(e => e.DdlDocuments).HasColumnName("ddlDocuments");

                entity.Property(e => e.DdlRequiredDoc).HasColumnName("ddlRequiredDoc");

                entity.Property(e => e.InstanceIdContractLegalMgntConfirmation1).HasColumnName("InstanceId_ContractLegalMgntConfirmation1");

                entity.Property(e => e.InstanceSridContractLegalMgntConfirmation1).HasColumnName("InstanceSRId_ContractLegalMgntConfirmation1");

                entity.Property(e => e.IpContractLegalMgntConfirmation1).HasColumnName("IP_ContractLegalMgntConfirmation1");

                entity.Property(e => e.RegistrationDateContractLegalMgntConfirmation1).HasColumnName("RegistrationDate_ContractLegalMgntConfirmation1");

                entity.Property(e => e.RegistrationStatusContractLegalMgntConfirmation1).HasColumnName("RegistrationStatus_ContractLegalMgntConfirmation1");

                entity.Property(e => e.RegistrationTimeContractLegalMgntConfirmation1).HasColumnName("RegistrationTime_ContractLegalMgntConfirmation1");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxaCommissionReasin).HasColumnName("txaCommissionReasin");
            });

            modelBuilder.Entity<ContractLegalMgntConfirmation2>(entity =>
            {
                entity.Property(e => e.AuditStatusContractLegalMgntConfirmation2).HasColumnName("AuditStatus_ContractLegalMgntConfirmation2");

                entity.Property(e => e.CreatorContractLegalMgntConfirmation2).HasColumnName("Creator_ContractLegalMgntConfirmation2");

                entity.Property(e => e.DdlDocuments).HasColumnName("ddlDocuments");

                entity.Property(e => e.InstanceIdContractLegalMgntConfirmation2).HasColumnName("InstanceId_ContractLegalMgntConfirmation2");

                entity.Property(e => e.InstanceSridContractLegalMgntConfirmation2).HasColumnName("InstanceSRId_ContractLegalMgntConfirmation2");

                entity.Property(e => e.IpContractLegalMgntConfirmation2).HasColumnName("IP_ContractLegalMgntConfirmation2");

                entity.Property(e => e.RegistrationDateContractLegalMgntConfirmation2).HasColumnName("RegistrationDate_ContractLegalMgntConfirmation2");

                entity.Property(e => e.RegistrationStatusContractLegalMgntConfirmation2).HasColumnName("RegistrationStatus_ContractLegalMgntConfirmation2");

                entity.Property(e => e.RegistrationTimeContractLegalMgntConfirmation2).HasColumnName("RegistrationTime_ContractLegalMgntConfirmation2");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxaRequiredDoc).HasColumnName("txaRequiredDoc");
            });

            modelBuilder.Entity<ContractLegalMgntConfirmation3>(entity =>
            {
                entity.Property(e => e.AuditStatusContractLegalMgntConfirmation3).HasColumnName("AuditStatus_ContractLegalMgntConfirmation3");

                entity.Property(e => e.CreatorContractLegalMgntConfirmation3).HasColumnName("Creator_ContractLegalMgntConfirmation3");

                entity.Property(e => e.Edate).HasColumnName("EDate");

                entity.Property(e => e.EdateGregorian)
                    .HasColumnName("EDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.InstanceIdContractLegalMgntConfirmation3).HasColumnName("InstanceId_ContractLegalMgntConfirmation3");

                entity.Property(e => e.InstanceSridContractLegalMgntConfirmation3).HasColumnName("InstanceSRId_ContractLegalMgntConfirmation3");

                entity.Property(e => e.IpContractLegalMgntConfirmation3).HasColumnName("IP_ContractLegalMgntConfirmation3");

                entity.Property(e => e.RegistrationDateContractLegalMgntConfirmation3).HasColumnName("RegistrationDate_ContractLegalMgntConfirmation3");

                entity.Property(e => e.RegistrationStatusContractLegalMgntConfirmation3).HasColumnName("RegistrationStatus_ContractLegalMgntConfirmation3");

                entity.Property(e => e.RegistrationTimeContractLegalMgntConfirmation3).HasColumnName("RegistrationTime_ContractLegalMgntConfirmation3");

                entity.Property(e => e.Sdate).HasColumnName("SDate");

                entity.Property(e => e.SdateGregorian)
                    .HasColumnName("SDate_gregorian")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ContractManualInsertion>(entity =>
            {
                entity.Property(e => e.AuditStatusContractManualInsertion).HasColumnName("AuditStatus_ContractManualInsertion");

                entity.Property(e => e.CreatorContractManualInsertion).HasColumnName("Creator_ContractManualInsertion");

                entity.Property(e => e.Datepersianha).HasColumnName("datepersianha");

                entity.Property(e => e.DatepersianhaGregorian)
                    .HasColumnName("datepersianha_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ddlruletest).HasColumnName("ddlruletest");

                entity.Property(e => e.InstanceIdContractManualInsertion).HasColumnName("InstanceId_ContractManualInsertion");

                entity.Property(e => e.InstanceSridContractManualInsertion).HasColumnName("InstanceSRId_ContractManualInsertion");

                entity.Property(e => e.IpContractManualInsertion).HasColumnName("IP_ContractManualInsertion");

                entity.Property(e => e.Mapert).HasColumnName("mapert");

                entity.Property(e => e.RegistrationDateContractManualInsertion).HasColumnName("RegistrationDate_ContractManualInsertion");

                entity.Property(e => e.RegistrationStatusContractManualInsertion).HasColumnName("RegistrationStatus_ContractManualInsertion");

                entity.Property(e => e.RegistrationTimeContractManualInsertion).HasColumnName("RegistrationTime_ContractManualInsertion");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");

                entity.Property(e => e.Txttest3).HasColumnName("txttest3");
            });

            modelBuilder.Entity<ContractPayment>(entity =>
            {
                entity.Property(e => e.AuditStatusContractPayment).HasColumnName("AuditStatus_ContractPayment");

                entity.Property(e => e.CreatorContractPayment).HasColumnName("Creator_ContractPayment");

                entity.Property(e => e.InstanceIdContractPayment).HasColumnName("InstanceId_ContractPayment");

                entity.Property(e => e.InstanceSridContractPayment).HasColumnName("InstanceSRId_ContractPayment");

                entity.Property(e => e.IpContractPayment).HasColumnName("IP_ContractPayment");

                entity.Property(e => e.RegistrationDateContractPayment).HasColumnName("RegistrationDate_ContractPayment");

                entity.Property(e => e.RegistrationStatusContractPayment).HasColumnName("RegistrationStatus_ContractPayment");

                entity.Property(e => e.RegistrationTimeContractPayment).HasColumnName("RegistrationTime_ContractPayment");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxtPaymentNumber).HasColumnName("txtPaymentNumber");

                entity.Property(e => e.TxtPaymentPrice).HasColumnName("txtPaymentPrice");
            });

            modelBuilder.Entity<Contracts>(entity =>
            {
                entity.Property(e => e.ContractDate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractFile).IsRequired();

                entity.Property(e => e.ContractId)
                    .IsRequired()
                    .HasColumnName("ContractID")
                    .HasMaxLength(50);

                entity.Property(e => e.ContractPrice)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractTitle).IsRequired();

                entity.Property(e => e.ContractorId)
                    .IsRequired()
                    .HasColumnName("ContractorID")
                    .HasMaxLength(50);

                entity.Property(e => e.ContractorName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContractSealRequest>(entity =>
            {
                entity.Property(e => e.AuditStatusContractSealRequest).HasColumnName("AuditStatus_ContractSealRequest");

                entity.Property(e => e.Bcnumber).HasColumnName("BCNumber");

                entity.Property(e => e.CreatorContractSealRequest).HasColumnName("Creator_ContractSealRequest");

                entity.Property(e => e.DateEnd).HasColumnName("dateEnd");

                entity.Property(e => e.DateEndGregorian)
                    .HasColumnName("dateEnd_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnName("dateStart");

                entity.Property(e => e.DateStartGregorian)
                    .HasColumnName("dateStart_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.DdlKind).HasColumnName("ddlKind");

                entity.Property(e => e.DdlcontractAssurance).HasColumnName("ddlcontractAssurance");

                entity.Property(e => e.Flezamimeh).HasColumnName("flezamimeh");

                entity.Property(e => e.InstanceIdContractSealRequest).HasColumnName("InstanceId_ContractSealRequest");

                entity.Property(e => e.InstanceSridContractSealRequest).HasColumnName("InstanceSRId_ContractSealRequest");

                entity.Property(e => e.IpContractSealRequest).HasColumnName("IP_ContractSealRequest");

                entity.Property(e => e.RegistrationDateContractSealRequest).HasColumnName("RegistrationDate_ContractSealRequest");

                entity.Property(e => e.RegistrationStatusContractSealRequest).HasColumnName("RegistrationStatus_ContractSealRequest");

                entity.Property(e => e.RegistrationTimeContractSealRequest).HasColumnName("RegistrationTime_ContractSealRequest");

                entity.Property(e => e.TxaAddress).HasColumnName("txaAddress");

                entity.Property(e => e.TxaCompanyAddress).HasColumnName("txaCompanyAddress");

                entity.Property(e => e.TxaContractPrice).HasColumnName("txaContractPrice");

                entity.Property(e => e.TxaFcommitments).HasColumnName("txaFCommitments");

                entity.Property(e => e.TxaLcommitments).HasColumnName("txaLCommitments");

                entity.Property(e => e.TxtAgentTel).HasColumnName("txtAgentTel");

                entity.Property(e => e.TxtCompanyName).HasColumnName("txtCompanyName");

                entity.Property(e => e.TxtCompanyregisterNumber).HasColumnName("txtCompanyregisterNumber");

                entity.Property(e => e.TxtConTitle).HasColumnName("txtConTitle");

                entity.Property(e => e.TxtContractPlace).HasColumnName("txtContractPlace");

                entity.Property(e => e.TxtFullNameLegalPerson).HasColumnName("txtFullNameLegalPerson");

                entity.Property(e => e.TxtLegalPersonPosition).HasColumnName("txtLegalPersonPosition");

                entity.Property(e => e.TxtLfname).HasColumnName("txtLFName");

                entity.Property(e => e.TxtOrganizationTel).HasColumnName("txtOrganizationTel");

                entity.Property(e => e.TxtPhone).HasColumnName("txtPhone");

                entity.Property(e => e.TxtProgramQuestionA).HasColumnName("txtProgramQuestionA");

                entity.Property(e => e.TxtProgramQuestionB).HasColumnName("txtProgramQuestionB");

                entity.Property(e => e.TxtTel).HasColumnName("txtTel");
            });

            modelBuilder.Entity<ContractsManualInsertion>(entity =>
            {
                entity.Property(e => e.AuditStatusContractsManualInsertion).HasColumnName("AuditStatus_ContractsManualInsertion");

                entity.Property(e => e.AxtContractExecutionPlce).HasColumnName("axtContractExecutionPlce");

                entity.Property(e => e.AxtContractPeymentMethod).HasColumnName("axtContractPeymentMethod");

                entity.Property(e => e.AxtFirstContractorAddress).HasColumnName("axtFirstContractorAddress");

                entity.Property(e => e.AxtFirstContractorCommitments).HasColumnName("axtFirstContractorCommitments");

                entity.Property(e => e.AxtSecondContractorAddress).HasColumnName("axtSecondContractorAddress");

                entity.Property(e => e.AxtSecondContractorCommitments).HasColumnName("axtSecondContractorCommitments");

                entity.Property(e => e.CreatorContractsManualInsertion).HasColumnName("Creator_ContractsManualInsertion");

                entity.Property(e => e.DdlDirectTax).HasColumnName("ddlDirectTax");

                entity.Property(e => e.DdlFirstContractorType).HasColumnName("ddlFirstContractorType");

                entity.Property(e => e.DdlInsuranceRule38).HasColumnName("ddlInsuranceRule38");

                entity.Property(e => e.DdlSecondContractorType).HasColumnName("ddlSecondContractorType");

                entity.Property(e => e.DdlVat).HasColumnName("ddlVAT");

                entity.Property(e => e.InstanceIdContractsManualInsertion).HasColumnName("InstanceId_ContractsManualInsertion");

                entity.Property(e => e.InstanceSridContractsManualInsertion).HasColumnName("InstanceSRId_ContractsManualInsertion");

                entity.Property(e => e.IpContractsManualInsertion).HasColumnName("IP_ContractsManualInsertion");

                entity.Property(e => e.PdateContractEnd).HasColumnName("pdateContractEnd");

                entity.Property(e => e.PdateContractEndGregorian)
                    .HasColumnName("pdateContractEnd_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.PdateContractStart).HasColumnName("pdateContractStart");

                entity.Property(e => e.PdateContractStartGregorian)
                    .HasColumnName("pdateContractStart_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateContractsManualInsertion).HasColumnName("RegistrationDate_ContractsManualInsertion");

                entity.Property(e => e.RegistrationStatusContractsManualInsertion).HasColumnName("RegistrationStatus_ContractsManualInsertion");

                entity.Property(e => e.RegistrationTimeContractsManualInsertion).HasColumnName("RegistrationTime_ContractsManualInsertion");

                entity.Property(e => e.TxtContractTitle).HasColumnName("txtContractTitle");

                entity.Property(e => e.TxtGrossPrice).HasColumnName("txtGrossPrice");

                entity.Property(e => e.TxtSeconContractorPersonMobilePhone).HasColumnName("txtSeconContractorPersonMobilePhone");

                entity.Property(e => e.TxtSecondContractorCompanyAgent).HasColumnName("txtSecondContractorCompanyAgent");

                entity.Property(e => e.TxtSecondContractorCompanyAgentPhone).HasColumnName("txtSecondContractorCompanyAgentPhone");

                entity.Property(e => e.TxtSecondContractorCompanyAgentPosition).HasColumnName("txtSecondContractorCompanyAgentPosition");

                entity.Property(e => e.TxtSecondContractorCompanyEconomyId).HasColumnName("txtSecondContractorCompanyEconomyID");

                entity.Property(e => e.TxtSecondContractorCompanyName).HasColumnName("txtSecondContractorCompanyName");

                entity.Property(e => e.TxtSecondContractorCompanyPhone).HasColumnName("txtSecondContractorCompanyPhone");

                entity.Property(e => e.TxtSecondContractorCompanyRegisterNumber).HasColumnName("txtSecondContractorCompanyRegisterNumber");

                entity.Property(e => e.TxtSecondContractorPersonBirthCertificateNum).HasColumnName("txtSecondContractorPersonBirthCertificateNum");

                entity.Property(e => e.TxtSecondContractorPersonName).HasColumnName("txtSecondContractorPersonName");

                entity.Property(e => e.TxtSecondContractorPersonNationalId).HasColumnName("txtSecondContractorPersonNationalID");

                entity.Property(e => e.TxtSecondContractorPersonPhone).HasColumnName("txtSecondContractorPersonPhone");

                entity.Property(e => e.UplContractAttachmentsFile).HasColumnName("uplContractAttachmentsFile");

                entity.Property(e => e.UplContractFile).HasColumnName("uplContractFile");
            });

            modelBuilder.Entity<ContractTozih>(entity =>
            {
                entity.ToTable("contract_Tozih");

                entity.Property(e => e.AuditStatusContractTozih).HasColumnName("AuditStatus_contract_Tozih");

                entity.Property(e => e.CreatorContractTozih).HasColumnName("Creator_contract_Tozih");

                entity.Property(e => e.InstanceIdContractTozih).HasColumnName("InstanceId_contract_Tozih");

                entity.Property(e => e.InstanceSridContractTozih).HasColumnName("InstanceSRId_contract_Tozih");

                entity.Property(e => e.IpContractTozih).HasColumnName("IP_contract_Tozih");

                entity.Property(e => e.RegistrationDateContractTozih).HasColumnName("RegistrationDate_contract_Tozih");

                entity.Property(e => e.RegistrationStatusContractTozih).HasColumnName("RegistrationStatus_contract_Tozih");

                entity.Property(e => e.RegistrationTimeContractTozih).HasColumnName("RegistrationTime_contract_Tozih");
            });

            modelBuilder.Entity<ContractUpload>(entity =>
            {
                entity.Property(e => e.AuditStatusContractUpload).HasColumnName("AuditStatus_ContractUpload");

                entity.Property(e => e.ContractDateGregorian)
                    .HasColumnName("ContractDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatorContractUpload).HasColumnName("Creator_ContractUpload");

                entity.Property(e => e.InstanceIdContractUpload).HasColumnName("InstanceId_ContractUpload");

                entity.Property(e => e.InstanceSridContractUpload).HasColumnName("InstanceSRId_ContractUpload");

                entity.Property(e => e.IpContractUpload).HasColumnName("IP_ContractUpload");

                entity.Property(e => e.RegistrationDateContractUpload).HasColumnName("RegistrationDate_ContractUpload");

                entity.Property(e => e.RegistrationStatusContractUpload).HasColumnName("RegistrationStatus_ContractUpload");

                entity.Property(e => e.RegistrationTimeContractUpload).HasColumnName("RegistrationTime_ContractUpload");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureApplyAwardAndHonors>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureApplyAwardAndHonors).HasColumnName("AuditStatus_ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.CreatorConvergentSupportiveStructureApplyAwardAndHonors).HasColumnName("Creator_ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.DdlAwardsHonors1).HasColumnName("ddlAwardsHonors_1");

                entity.Property(e => e.DdlAwardsHonors4).HasColumnName("ddlAwardsHonors_4");

                entity.Property(e => e.DdlAwardsHonors7).HasColumnName("ddlAwardsHonors_7");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureApplyAwardAndHonors).HasColumnName("InstanceId_ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureApplyAwardAndHonors).HasColumnName("InstanceSRId_ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.IpConvergentSupportiveStructureApplyAwardAndHonors).HasColumnName("IP_ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureApplyAwardAndHonors).HasColumnName("RegistrationDate_ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureApplyAwardAndHonors).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureApplyAwardAndHonors).HasColumnName("RegistrationTime_ConvergentSupportiveStructure_ApplyAwardAndHonors");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureApplyAwardAndHonorsSub1>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureApplyAwardAndHonorsSub1).HasColumnName("AuditStatus_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.CreatorConvergentSupportiveStructureApplyAwardAndHonorsSub1).HasColumnName("Creator_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.DdlFestivalInformation1).HasColumnName("ddlFestivalInformation_1");

                entity.Property(e => e.DdlFestivalInformation3).HasColumnName("ddlFestivalInformation_3");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureApplyAwardAndHonorsSub1).HasColumnName("InstanceId_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureApplyAwardAndHonorsSub1).HasColumnName("InstanceSRId_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.IpConvergentSupportiveStructureApplyAwardAndHonorsSub1).HasColumnName("IP_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureApplyAwardAndHonorsSub1).HasColumnName("RegistrationDate_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureApplyAwardAndHonorsSub1).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureApplyAwardAndHonorsSub1).HasColumnName("RegistrationTime_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.TxtFestivalInformation2).HasColumnName("txtFestivalInformation_2");

                entity.Property(e => e.TxtFestivalInformation4).HasColumnName("txtFestivalInformation_4");

                entity.Property(e => e.UplFestivalInformation5).HasColumnName("uplFestivalInformation_5");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureApplyAwardAndHonorsSub2>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureApplyAwardAndHonorsSub2).HasColumnName("AuditStatus_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.CreatorConvergentSupportiveStructureApplyAwardAndHonorsSub2).HasColumnName("Creator_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureApplyAwardAndHonorsSub2).HasColumnName("InstanceId_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureApplyAwardAndHonorsSub2).HasColumnName("InstanceSRId_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.IpConvergentSupportiveStructureApplyAwardAndHonorsSub2).HasColumnName("IP_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureApplyAwardAndHonorsSub2).HasColumnName("RegistrationDate_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureApplyAwardAndHonorsSub2).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureApplyAwardAndHonorsSub2).HasColumnName("RegistrationTime_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.TxtArticles1).HasColumnName("txtArticles_1");

                entity.Property(e => e.TxtArticles2).HasColumnName("txtArticles_2");

                entity.Property(e => e.UplArticles3).HasColumnName("uplArticles_3");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureApplyAwardAndHonorsSub3>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureApplyAwardAndHonorsSub3).HasColumnName("AuditStatus_ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3");

                entity.Property(e => e.CreatorConvergentSupportiveStructureApplyAwardAndHonorsSub3).HasColumnName("Creator_ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3");

                entity.Property(e => e.DdlExhibitVisit4).HasColumnName("ddlExhibitVisit_4");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureApplyAwardAndHonorsSub3).HasColumnName("InstanceId_ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureApplyAwardAndHonorsSub3).HasColumnName("InstanceSRId_ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3");

                entity.Property(e => e.IpConvergentSupportiveStructureApplyAwardAndHonorsSub3).HasColumnName("IP_ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3");

                entity.Property(e => e.PdateExhibitVisit3).HasColumnName("pdateExhibitVisit_3");

                entity.Property(e => e.PdateExhibitVisit3Gregorian)
                    .HasColumnName("pdateExhibitVisit_3_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureApplyAwardAndHonorsSub3).HasColumnName("RegistrationDate_ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureApplyAwardAndHonorsSub3).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureApplyAwardAndHonorsSub3).HasColumnName("RegistrationTime_ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3");

                entity.Property(e => e.TxtExhibitVisit1).HasColumnName("txtExhibitVisit_1");

                entity.Property(e => e.TxtExhibitVisit2).HasColumnName("txtExhibitVisit_2");

                entity.Property(e => e.TxtExhibitVisit5).HasColumnName("txtExhibitVisit_5");

                entity.Property(e => e.UplExhibitVisit6).HasColumnName("uplExhibitVisit_6");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureCompleteGameInfo>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure_CompleteGameInfo");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureCompleteGameInfo).HasColumnName("AuditStatus_ConvergentSupportiveStructure_CompleteGameInfo");

                entity.Property(e => e.CreatorConvergentSupportiveStructureCompleteGameInfo).HasColumnName("Creator_ConvergentSupportiveStructure_CompleteGameInfo");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureCompleteGameInfo).HasColumnName("InstanceId_ConvergentSupportiveStructure_CompleteGameInfo");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureCompleteGameInfo).HasColumnName("InstanceSRId_ConvergentSupportiveStructure_CompleteGameInfo");

                entity.Property(e => e.IpConvergentSupportiveStructureCompleteGameInfo).HasColumnName("IP_ConvergentSupportiveStructure_CompleteGameInfo");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureCompleteGameInfo).HasColumnName("RegistrationDate_ConvergentSupportiveStructure_CompleteGameInfo");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureCompleteGameInfo).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure_CompleteGameInfo");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureCompleteGameInfo).HasColumnName("RegistrationTime_ConvergentSupportiveStructure_CompleteGameInfo");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureCompleteGameInfoSubForm>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure_CompleteGameInfo_SubForm");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureCompleteGameInfoSubForm).HasColumnName("AuditStatus_ConvergentSupportiveStructure_CompleteGameInfo_SubForm");

                entity.Property(e => e.CreatorConvergentSupportiveStructureCompleteGameInfoSubForm).HasColumnName("Creator_ConvergentSupportiveStructure_CompleteGameInfo_SubForm");

                entity.Property(e => e.DrpGameInfo10).HasColumnName("drpGameInfo10");

                entity.Property(e => e.DrpGameInfo12).HasColumnName("drpGameInfo12");

                entity.Property(e => e.DrpGameInfo14).HasColumnName("drpGameInfo14");

                entity.Property(e => e.DrpGameInfo15).HasColumnName("drpGameInfo15");

                entity.Property(e => e.DrpGameInfo17).HasColumnName("drpGameInfo17");

                entity.Property(e => e.DrpGameInfo2).HasColumnName("drpGameInfo2");

                entity.Property(e => e.DrpGameInfo20).HasColumnName("drpGameInfo20");

                entity.Property(e => e.DrpGameInfo5).HasColumnName("drpGameInfo5");

                entity.Property(e => e.DrpGameInfo6).HasColumnName("drpGameInfo6");

                entity.Property(e => e.DrpGameInfo7).HasColumnName("drpGameInfo7");

                entity.Property(e => e.DrpGameInfo9).HasColumnName("drpGameInfo9");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureCompleteGameInfoSubForm).HasColumnName("InstanceId_ConvergentSupportiveStructure_CompleteGameInfo_SubForm");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureCompleteGameInfoSubForm).HasColumnName("InstanceSRId_ConvergentSupportiveStructure_CompleteGameInfo_SubForm");

                entity.Property(e => e.IpConvergentSupportiveStructureCompleteGameInfoSubForm).HasColumnName("IP_ConvergentSupportiveStructure_CompleteGameInfo_SubForm");

                entity.Property(e => e.PdateGameInfo4).HasColumnName("pdateGameInfo4");

                entity.Property(e => e.PdateGameInfo4Gregorian)
                    .HasColumnName("pdateGameInfo4_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureCompleteGameInfoSubForm).HasColumnName("RegistrationDate_ConvergentSupportiveStructure_CompleteGameInfo_SubForm");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureCompleteGameInfoSubForm).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure_CompleteGameInfo_SubForm");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureCompleteGameInfoSubForm).HasColumnName("RegistrationTime_ConvergentSupportiveStructure_CompleteGameInfo_SubForm");

                entity.Property(e => e.TxtGameInfo1).HasColumnName("txtGameInfo1");

                entity.Property(e => e.TxtGameInfo16).HasColumnName("txtGameInfo16");

                entity.Property(e => e.TxtGameInfo18).HasColumnName("txtGameInfo18");

                entity.Property(e => e.TxtGameInfo19).HasColumnName("txtGameInfo19");

                entity.Property(e => e.TxtGameInfo21).HasColumnName("txtGameInfo21");

                entity.Property(e => e.TxtGameInfo23).HasColumnName("txtGameInfo23");

                entity.Property(e => e.TxtGameInfo24).HasColumnName("txtGameInfo24");

                entity.Property(e => e.TxtGameInfo8).HasColumnName("txtGameInfo8");

                entity.Property(e => e.UplGameInfo11).HasColumnName("uplGameInfo11");

                entity.Property(e => e.UplGameInfo13).HasColumnName("uplGameInfo13");

                entity.Property(e => e.UplGameInfo22).HasColumnName("uplGameInfo22");

                entity.Property(e => e.UplGameInfo3).HasColumnName("uplGameInfo3");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureCompletePreRegistrationForm>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure_CompletePreRegistrationForm");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureCompletePreRegistrationForm).HasColumnName("AuditStatus_ConvergentSupportiveStructure_CompletePreRegistrationForm");

                entity.Property(e => e.CreatorConvergentSupportiveStructureCompletePreRegistrationForm).HasColumnName("Creator_ConvergentSupportiveStructure_CompletePreRegistrationForm");

                entity.Property(e => e.Emailprereg6).HasColumnName("emailprereg6");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureCompletePreRegistrationForm).HasColumnName("InstanceId_ConvergentSupportiveStructure_CompletePreRegistrationForm");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureCompletePreRegistrationForm).HasColumnName("InstanceSRId_ConvergentSupportiveStructure_CompletePreRegistrationForm");

                entity.Property(e => e.IpConvergentSupportiveStructureCompletePreRegistrationForm).HasColumnName("IP_ConvergentSupportiveStructure_CompletePreRegistrationForm");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureCompletePreRegistrationForm).HasColumnName("RegistrationDate_ConvergentSupportiveStructure_CompletePreRegistrationForm");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureCompletePreRegistrationForm).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure_CompletePreRegistrationForm");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureCompletePreRegistrationForm).HasColumnName("RegistrationTime_ConvergentSupportiveStructure_CompletePreRegistrationForm");

                entity.Property(e => e.Txtprereg1).HasColumnName("txtprereg_1");

                entity.Property(e => e.Txtprereg2).HasColumnName("txtprereg_2");

                entity.Property(e => e.Txtprereg21).HasColumnName("txtprereg2");

                entity.Property(e => e.Txtprereg4).HasColumnName("txtprereg4");

                entity.Property(e => e.Txtprereg5).HasColumnName("txtprereg5");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureCompletingIdentityInformation>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure_CompletingIdentityInformation");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureCompletingIdentityInformation).HasColumnName("AuditStatus_ConvergentSupportiveStructure_CompletingIdentityInformation");

                entity.Property(e => e.CkeIdentity11).HasColumnName("ckeIdentity11");

                entity.Property(e => e.CreatorConvergentSupportiveStructureCompletingIdentityInformation).HasColumnName("Creator_ConvergentSupportiveStructure_CompletingIdentityInformation");

                entity.Property(e => e.DdlIdentity21).HasColumnName("ddlIdentity21");

                entity.Property(e => e.DdlIdentity22).HasColumnName("ddlIdentity22");

                entity.Property(e => e.DdlIdentity25).HasColumnName("ddlIdentity25");

                entity.Property(e => e.DdlIdentity28).HasColumnName("ddlIdentity28");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureCompletingIdentityInformation).HasColumnName("InstanceId_ConvergentSupportiveStructure_CompletingIdentityInformation");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureCompletingIdentityInformation).HasColumnName("InstanceSRId_ConvergentSupportiveStructure_CompletingIdentityInformation");

                entity.Property(e => e.IpConvergentSupportiveStructureCompletingIdentityInformation).HasColumnName("IP_ConvergentSupportiveStructure_CompletingIdentityInformation");

                entity.Property(e => e.MailIdentity20).HasColumnName("mailIdentity20");

                entity.Property(e => e.MailIdentity8).HasColumnName("mailIdentity8");

                entity.Property(e => e.NumCodeEghtesadi).HasColumnName("numCodeEghtesadi");

                entity.Property(e => e.NumComNatId).HasColumnName("numComNatId");

                entity.Property(e => e.NumIdentity14).HasColumnName("numIdentity14");

                entity.Property(e => e.NumIdentity15).HasColumnName("numIdentity15");

                entity.Property(e => e.NumRegisterNumber).HasColumnName("numRegisterNumber");

                entity.Property(e => e.PcalRegisterDate).HasColumnName("pcalRegisterDate");

                entity.Property(e => e.PcalRegisterDateGregorian)
                    .HasColumnName("pcalRegisterDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureCompletingIdentityInformation).HasColumnName("RegistrationDate_ConvergentSupportiveStructure_CompletingIdentityInformation");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureCompletingIdentityInformation).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure_CompletingIdentityInformation");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureCompletingIdentityInformation).HasColumnName("RegistrationTime_ConvergentSupportiveStructure_CompletingIdentityInformation");

                entity.Property(e => e.TxtComTelFix).HasColumnName("txtComTelFix");

                entity.Property(e => e.TxtCompanyName).HasColumnName("txtCompanyName");

                entity.Property(e => e.TxtIdentity13).HasColumnName("txtIdentity13");

                entity.Property(e => e.TxtIdentity17).HasColumnName("txtIdentity17");

                entity.Property(e => e.TxtIdentity19).HasColumnName("txtIdentity19");

                entity.Property(e => e.TxtIdentity23).HasColumnName("txtIdentity23");

                entity.Property(e => e.TxtIdentity26).HasColumnName("txtIdentity26");

                entity.Property(e => e.TxtIdentity29).HasColumnName("txtIdentity29");

                entity.Property(e => e.TxtIdentity9).HasColumnName("txtIdentity9");

                entity.Property(e => e.TxtIdentityt12).HasColumnName("txtIdentityt12");

                entity.Property(e => e.TxtRegisterArea).HasColumnName("txtRegisterArea");

                entity.Property(e => e.UplIdentity10).HasColumnName("uplIdentity10");

                entity.Property(e => e.UplIdentity16).HasColumnName("uplIdentity16");

                entity.Property(e => e.UplIdentity18).HasColumnName("uplIdentity18");

                entity.Property(e => e.UplIdentity24).HasColumnName("uplIdentity24");

                entity.Property(e => e.UplIdentity27).HasColumnName("uplIdentity27");

                entity.Property(e => e.UplIdentity30).HasColumnName("uplIdentity30");

                entity.Property(e => e.UplIdentity31).HasColumnName("uplIdentity31");

                entity.Property(e => e.UplIdentity32).HasColumnName("uplIdentity32");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureRecordAllDocuments>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure_RecordAllDocuments");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureRecordAllDocuments).HasColumnName("AuditStatus_ConvergentSupportiveStructure_RecordAllDocuments");

                entity.Property(e => e.CkeDoc2).HasColumnName("ckeDoc2");

                entity.Property(e => e.CreatorConvergentSupportiveStructureRecordAllDocuments).HasColumnName("Creator_ConvergentSupportiveStructure_RecordAllDocuments");

                entity.Property(e => e.DdlDoc1).HasColumnName("ddlDoc1");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureRecordAllDocuments).HasColumnName("InstanceId_ConvergentSupportiveStructure_RecordAllDocuments");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureRecordAllDocuments).HasColumnName("InstanceSRId_ConvergentSupportiveStructure_RecordAllDocuments");

                entity.Property(e => e.IpConvergentSupportiveStructureRecordAllDocuments).HasColumnName("IP_ConvergentSupportiveStructure_RecordAllDocuments");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureRecordAllDocuments).HasColumnName("RegistrationDate_ConvergentSupportiveStructure_RecordAllDocuments");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureRecordAllDocuments).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure_RecordAllDocuments");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureRecordAllDocuments).HasColumnName("RegistrationTime_ConvergentSupportiveStructure_RecordAllDocuments");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureRequestAdditionalInformation>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure_RequestAdditionalInformation");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureRequestAdditionalInformation).HasColumnName("AuditStatus_ConvergentSupportiveStructure_RequestAdditionalInformation");

                entity.Property(e => e.ChkRequest4).HasColumnName("chkRequest_4");

                entity.Property(e => e.CreatorConvergentSupportiveStructureRequestAdditionalInformation).HasColumnName("Creator_ConvergentSupportiveStructure_RequestAdditionalInformation");

                entity.Property(e => e.DdlRequest1).HasColumnName("ddlRequest_1");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureRequestAdditionalInformation).HasColumnName("InstanceId_ConvergentSupportiveStructure_RequestAdditionalInformation");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureRequestAdditionalInformation).HasColumnName("InstanceSRId_ConvergentSupportiveStructure_RequestAdditionalInformation");

                entity.Property(e => e.IpConvergentSupportiveStructureRequestAdditionalInformation).HasColumnName("IP_ConvergentSupportiveStructure_RequestAdditionalInformation");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureRequestAdditionalInformation).HasColumnName("RegistrationDate_ConvergentSupportiveStructure_RequestAdditionalInformation");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureRequestAdditionalInformation).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure_RequestAdditionalInformation");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureRequestAdditionalInformation).HasColumnName("RegistrationTime_ConvergentSupportiveStructure_RequestAdditionalInformation");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureRequestAdditionalInformationSub1>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructure_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureRequestAdditionalInformationSub1).HasColumnName("AuditStatus_ConvergentSupportiveStructure_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.CreatorConvergentSupportiveStructureRequestAdditionalInformationSub1).HasColumnName("Creator_ConvergentSupportiveStructure_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.DdlRequestSub6).HasColumnName("ddlRequestSub_6");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureRequestAdditionalInformationSub1).HasColumnName("InstanceId_ConvergentSupportiveStructure_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureRequestAdditionalInformationSub1).HasColumnName("InstanceSRId_ConvergentSupportiveStructure_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.IpConvergentSupportiveStructureRequestAdditionalInformationSub1).HasColumnName("IP_ConvergentSupportiveStructure_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.PdateRequestSub2).HasColumnName("pdateRequestSub_2");

                entity.Property(e => e.PdateRequestSub2Gregorian)
                    .HasColumnName("pdateRequestSub_2_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.PdateRequestSub3).HasColumnName("pdateRequestSub_3");

                entity.Property(e => e.PdateRequestSub3Gregorian)
                    .HasColumnName("pdateRequestSub_3_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureRequestAdditionalInformationSub1).HasColumnName("RegistrationDate_ConvergentSupportiveStructure_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureRequestAdditionalInformationSub1).HasColumnName("RegistrationStatus_ConvergentSupportiveStructure_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureRequestAdditionalInformationSub1).HasColumnName("RegistrationTime_ConvergentSupportiveStructure_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.TxtRequestSub1).HasColumnName("txtRequestSub_1");

                entity.Property(e => e.TxtRequestSub4).HasColumnName("txtRequestSub_4");

                entity.Property(e => e.TxtRequestSub5).HasColumnName("txtRequestSub_5");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsApplyingForAwards>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsApplyingForAwards).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsApplyingForAwards).HasColumnName("Creator_ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.DdlAwardsHonors1).HasColumnName("ddlAwardsHonors_1");

                entity.Property(e => e.DdlAwardsHonors4).HasColumnName("ddlAwardsHonors_4");

                entity.Property(e => e.DdlAwardsHonors7).HasColumnName("ddlAwardsHonors_7");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsApplyingForAwards).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsApplyingForAwards).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsApplyingForAwards).HasColumnName("IP_ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsApplyingForAwards).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsApplyingForAwards).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsApplyingForAwards).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_ApplyingForAwards");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsApplyingForAwardsSub1>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsApplyingForAwardsSub1).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsApplyingForAwardsSub1).HasColumnName("Creator_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.DdlDataEntry1).HasColumnName("ddlDataEntry_1");

                entity.Property(e => e.DdlDataEntry3).HasColumnName("ddlDataEntry_3");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsApplyingForAwardsSub1).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsApplyingForAwardsSub1).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsApplyingForAwardsSub1).HasColumnName("IP_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsApplyingForAwardsSub1).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsApplyingForAwardsSub1).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsApplyingForAwardsSub1).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.TxtDataEntry2).HasColumnName("txtDataEntry_2");

                entity.Property(e => e.TxtDataEntry4).HasColumnName("txtDataEntry_4");

                entity.Property(e => e.UplDataEntry5).HasColumnName("uplDataEntry_5");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsApplyingForAwardsSub2>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsApplyingForAwardsSub2).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsApplyingForAwardsSub2).HasColumnName("Creator_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsApplyingForAwardsSub2).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsApplyingForAwardsSub2).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsApplyingForAwardsSub2).HasColumnName("IP_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsApplyingForAwardsSub2).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsApplyingForAwardsSub2).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsApplyingForAwardsSub2).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.TxtArticles1).HasColumnName("txtArticles_1");

                entity.Property(e => e.TxtArticles2).HasColumnName("txtArticles_2");

                entity.Property(e => e.UplArticles3).HasColumnName("uplArticles_3");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsApplyingForAwardsSub3>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsApplyingForAwardsSub3).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsApplyingForAwardsSub3).HasColumnName("Creator_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.DdlExhibitVisit4).HasColumnName("ddlExhibitVisit_4");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsApplyingForAwardsSub3).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsApplyingForAwardsSub3).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsApplyingForAwardsSub3).HasColumnName("IP_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.PdateExhibitVisit3).HasColumnName("pdateExhibitVisit_3");

                entity.Property(e => e.PdateExhibitVisit3Gregorian)
                    .HasColumnName("pdateExhibitVisit_3_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsApplyingForAwardsSub3).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsApplyingForAwardsSub3).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsApplyingForAwardsSub3).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.TxtExhibitVisit1).HasColumnName("txtExhibitVisit_1");

                entity.Property(e => e.TxtExhibitVisit2).HasColumnName("txtExhibitVisit_2");

                entity.Property(e => e.TxtExhibitVisit5).HasColumnName("txtExhibitVisit_5");

                entity.Property(e => e.UplExhibitVisit6).HasColumnName("uplExhibitVisit_6");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsFurtherInformation>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_FurtherInformation");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsFurtherInformation).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_FurtherInformation");

                entity.Property(e => e.ChkRequest4).HasColumnName("chkRequest_4");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsFurtherInformation).HasColumnName("Creator_ConvergentSupportiveStructureTeams_FurtherInformation");

                entity.Property(e => e.DdlRequest1).HasColumnName("ddlRequest_1");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsFurtherInformation).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_FurtherInformation");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsFurtherInformation).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_FurtherInformation");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsFurtherInformation).HasColumnName("IP_ConvergentSupportiveStructureTeams_FurtherInformation");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsFurtherInformation).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_FurtherInformation");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsFurtherInformation).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_FurtherInformation");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsFurtherInformation).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_FurtherInformation");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsFurtherInformationSub>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_FurtherInformation_Sub");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsFurtherInformationSub).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_FurtherInformation_Sub");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsFurtherInformationSub).HasColumnName("Creator_ConvergentSupportiveStructureTeams_FurtherInformation_Sub");

                entity.Property(e => e.DdlRequestSub6).HasColumnName("ddlRequestSub_6");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsFurtherInformationSub).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_FurtherInformation_Sub");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsFurtherInformationSub).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_FurtherInformation_Sub");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsFurtherInformationSub).HasColumnName("IP_ConvergentSupportiveStructureTeams_FurtherInformation_Sub");

                entity.Property(e => e.NumRequestSub4).HasColumnName("numRequestSub_4");

                entity.Property(e => e.PdateRequestSub2).HasColumnName("pdateRequestSub_2");

                entity.Property(e => e.PdateRequestSub2Gregorian)
                    .HasColumnName("pdateRequestSub_2_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.PdateRequestSub3).HasColumnName("pdateRequestSub_3");

                entity.Property(e => e.PdateRequestSub3Gregorian)
                    .HasColumnName("pdateRequestSub_3_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsFurtherInformationSub).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_FurtherInformation_Sub");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsFurtherInformationSub).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_FurtherInformation_Sub");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsFurtherInformationSub).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_FurtherInformation_Sub");

                entity.Property(e => e.TxtRequestSub1).HasColumnName("txtRequestSub_1");

                entity.Property(e => e.TxtRequestSub5).HasColumnName("txtRequestSub_5");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsGameInfo>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_GameInfo");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsGameInfo).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_GameInfo");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsGameInfo).HasColumnName("Creator_ConvergentSupportiveStructureTeams_GameInfo");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsGameInfo).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_GameInfo");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsGameInfo).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_GameInfo");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsGameInfo).HasColumnName("IP_ConvergentSupportiveStructureTeams_GameInfo");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsGameInfo).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_GameInfo");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsGameInfo).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_GameInfo");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsGameInfo).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_GameInfo");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsGameInfoSub1>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_GameInfo_Sub1");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsGameInfoSub1).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_GameInfo_Sub1");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsGameInfoSub1).HasColumnName("Creator_ConvergentSupportiveStructureTeams_GameInfo_Sub1");

                entity.Property(e => e.DrpGameInfo10).HasColumnName("drpGameInfo10");

                entity.Property(e => e.DrpGameInfo12).HasColumnName("drpGameInfo12");

                entity.Property(e => e.DrpGameInfo14).HasColumnName("drpGameInfo14");

                entity.Property(e => e.DrpGameInfo15).HasColumnName("drpGameInfo15");

                entity.Property(e => e.DrpGameInfo17).HasColumnName("drpGameInfo17");

                entity.Property(e => e.DrpGameInfo2).HasColumnName("drpGameInfo2");

                entity.Property(e => e.DrpGameInfo20).HasColumnName("drpGameInfo20");

                entity.Property(e => e.DrpGameInfo5).HasColumnName("drpGameInfo5");

                entity.Property(e => e.DrpGameInfo6).HasColumnName("drpGameInfo6");

                entity.Property(e => e.DrpGameInfo7).HasColumnName("drpGameInfo7");

                entity.Property(e => e.DrpGameInfo9).HasColumnName("drpGameInfo9");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsGameInfoSub1).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_GameInfo_Sub1");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsGameInfoSub1).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_GameInfo_Sub1");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsGameInfoSub1).HasColumnName("IP_ConvergentSupportiveStructureTeams_GameInfo_Sub1");

                entity.Property(e => e.PdateGameInfo4).HasColumnName("pdateGameInfo4");

                entity.Property(e => e.PdateGameInfo4Gregorian)
                    .HasColumnName("pdateGameInfo4_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsGameInfoSub1).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_GameInfo_Sub1");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsGameInfoSub1).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_GameInfo_Sub1");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsGameInfoSub1).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_GameInfo_Sub1");

                entity.Property(e => e.TxtGameInfo1).HasColumnName("txtGameInfo1");

                entity.Property(e => e.TxtGameInfo16).HasColumnName("txtGameInfo16");

                entity.Property(e => e.TxtGameInfo18).HasColumnName("txtGameInfo18");

                entity.Property(e => e.TxtGameInfo19).HasColumnName("txtGameInfo19");

                entity.Property(e => e.TxtGameInfo21).HasColumnName("txtGameInfo21");

                entity.Property(e => e.TxtGameInfo23).HasColumnName("txtGameInfo23");

                entity.Property(e => e.TxtGameInfo24).HasColumnName("txtGameInfo24");

                entity.Property(e => e.TxtGameInfo8).HasColumnName("txtGameInfo8");

                entity.Property(e => e.UplGameInfo11).HasColumnName("uplGameInfo11");

                entity.Property(e => e.UplGameInfo13).HasColumnName("uplGameInfo13");

                entity.Property(e => e.UplGameInfo22).HasColumnName("uplGameInfo22");

                entity.Property(e => e.UplGameInfo3).HasColumnName("uplGameInfo3");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsIdentityInformation>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_IdentityInformation");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsIdentityInformation).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_IdentityInformation");

                entity.Property(e => e.CkeIde6).HasColumnName("ckeIde6");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsIdentityInformation).HasColumnName("Creator_ConvergentSupportiveStructureTeams_IdentityInformation");

                entity.Property(e => e.DdlIde13).HasColumnName("ddlIde13");

                entity.Property(e => e.DdlIde16).HasColumnName("ddlIde16");

                entity.Property(e => e.EmailIde3).HasColumnName("emailIde3");

                entity.Property(e => e.EmailIde9).HasColumnName("emailIde9");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsIdentityInformation).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_IdentityInformation");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsIdentityInformation).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_IdentityInformation");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsIdentityInformation).HasColumnName("IP_ConvergentSupportiveStructureTeams_IdentityInformation");

                entity.Property(e => e.NumIde10).HasColumnName("numIde10");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsIdentityInformation).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_IdentityInformation");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsIdentityInformation).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_IdentityInformation");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsIdentityInformation).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_IdentityInformation");

                entity.Property(e => e.TxtIde1).HasColumnName("txtIde1");

                entity.Property(e => e.TxtIde11).HasColumnName("txtIde11");

                entity.Property(e => e.TxtIde14).HasColumnName("txtIde14");

                entity.Property(e => e.TxtIde17).HasColumnName("txtIde17");

                entity.Property(e => e.TxtIde2).HasColumnName("txtIde2");

                entity.Property(e => e.TxtIde4).HasColumnName("txtIde4");

                entity.Property(e => e.TxtIde7).HasColumnName("txtIde7");

                entity.Property(e => e.TxtIde8).HasColumnName("txtIde8");

                entity.Property(e => e.UplIde12).HasColumnName("uplIde12");

                entity.Property(e => e.UplIde15).HasColumnName("uplIde15");

                entity.Property(e => e.UplIde18).HasColumnName("uplIde18");

                entity.Property(e => e.UplIde5).HasColumnName("uplIde5");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsPreRegistration>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_PreRegistration");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsPreRegistration).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_PreRegistration");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsPreRegistration).HasColumnName("Creator_ConvergentSupportiveStructureTeams_PreRegistration");

                entity.Property(e => e.EmailPre6).HasColumnName("emailPre6");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsPreRegistration).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_PreRegistration");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsPreRegistration).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_PreRegistration");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsPreRegistration).HasColumnName("IP_ConvergentSupportiveStructureTeams_PreRegistration");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsPreRegistration).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_PreRegistration");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsPreRegistration).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_PreRegistration");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsPreRegistration).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_PreRegistration");

                entity.Property(e => e.TxtPre1).HasColumnName("txtPre1");

                entity.Property(e => e.TxtPre2).HasColumnName("txtPre2");

                entity.Property(e => e.TxtPre3).HasColumnName("txtPre3");

                entity.Property(e => e.TxtPre4).HasColumnName("txtPre4");

                entity.Property(e => e.TxtPre5).HasColumnName("txtPre5");
            });

            modelBuilder.Entity<ConvergentSupportiveStructureTeamsRecordAllDocuments>(entity =>
            {
                entity.ToTable("ConvergentSupportiveStructureTeams_RecordAllDocuments");

                entity.Property(e => e.AuditStatusConvergentSupportiveStructureTeamsRecordAllDocuments).HasColumnName("AuditStatus_ConvergentSupportiveStructureTeams_RecordAllDocuments");

                entity.Property(e => e.CkeDoc2).HasColumnName("ckeDoc2");

                entity.Property(e => e.CreatorConvergentSupportiveStructureTeamsRecordAllDocuments).HasColumnName("Creator_ConvergentSupportiveStructureTeams_RecordAllDocuments");

                entity.Property(e => e.DdlDoc1).HasColumnName("ddlDoc1");

                entity.Property(e => e.InstanceIdConvergentSupportiveStructureTeamsRecordAllDocuments).HasColumnName("InstanceId_ConvergentSupportiveStructureTeams_RecordAllDocuments");

                entity.Property(e => e.InstanceSridConvergentSupportiveStructureTeamsRecordAllDocuments).HasColumnName("InstanceSRId_ConvergentSupportiveStructureTeams_RecordAllDocuments");

                entity.Property(e => e.IpConvergentSupportiveStructureTeamsRecordAllDocuments).HasColumnName("IP_ConvergentSupportiveStructureTeams_RecordAllDocuments");

                entity.Property(e => e.RegistrationDateConvergentSupportiveStructureTeamsRecordAllDocuments).HasColumnName("RegistrationDate_ConvergentSupportiveStructureTeams_RecordAllDocuments");

                entity.Property(e => e.RegistrationStatusConvergentSupportiveStructureTeamsRecordAllDocuments).HasColumnName("RegistrationStatus_ConvergentSupportiveStructureTeams_RecordAllDocuments");

                entity.Property(e => e.RegistrationTimeConvergentSupportiveStructureTeamsRecordAllDocuments).HasColumnName("RegistrationTime_ConvergentSupportiveStructureTeams_RecordAllDocuments");
            });

            modelBuilder.Entity<CouncilReport>(entity =>
            {
                entity.Property(e => e.AuditStatusCouncilReport).HasColumnName("AuditStatus_CouncilReport");

                entity.Property(e => e.CreatorCouncilReport).HasColumnName("Creator_CouncilReport");

                entity.Property(e => e.DateGregorian)
                    .HasColumnName("Date_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ddl2AgeRating).HasColumnName("ddl2AgeRating");

                entity.Property(e => e.Ddl2ConditionalRating).HasColumnName("ddl2ConditionalRating");

                entity.Property(e => e.DdlOpinion).HasColumnName("ddlOpinion");

                entity.Property(e => e.DdlType).HasColumnName("ddlType");

                entity.Property(e => e.InstanceIdCouncilReport).HasColumnName("InstanceId_CouncilReport");

                entity.Property(e => e.InstanceSridCouncilReport).HasColumnName("InstanceSRId_CouncilReport");

                entity.Property(e => e.IpCouncilReport).HasColumnName("IP_CouncilReport");

                entity.Property(e => e.RegistrationDateCouncilReport).HasColumnName("RegistrationDate_CouncilReport");

                entity.Property(e => e.RegistrationStatusCouncilReport).HasColumnName("RegistrationStatus_CouncilReport");

                entity.Property(e => e.RegistrationTimeCouncilReport).HasColumnName("RegistrationTime_CouncilReport");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");
            });

            modelBuilder.Entity<DailyReportsSubform>(entity =>
            {
                entity.ToTable("dailyReportsSubform");

                entity.Property(e => e.AuditStatusDailyReportsSubform).HasColumnName("AuditStatus_dailyReportsSubform");

                entity.Property(e => e.CreatorDailyReportsSubform).HasColumnName("Creator_dailyReportsSubform");

                entity.Property(e => e.InstanceIdDailyReportsSubform).HasColumnName("InstanceId_dailyReportsSubform");

                entity.Property(e => e.InstanceSridDailyReportsSubform).HasColumnName("InstanceSRId_dailyReportsSubform");

                entity.Property(e => e.IpDailyReportsSubform).HasColumnName("IP_dailyReportsSubform");

                entity.Property(e => e.RegistrationDateDailyReportsSubform).HasColumnName("RegistrationDate_dailyReportsSubform");

                entity.Property(e => e.RegistrationStatusDailyReportsSubform).HasColumnName("RegistrationStatus_dailyReportsSubform");

                entity.Property(e => e.RegistrationTimeDailyReportsSubform).HasColumnName("RegistrationTime_dailyReportsSubform");

                entity.Property(e => e.TastTitle).HasColumnName("tastTitle");

                entity.Property(e => e.TimeEnd).HasColumnName("time_end");

                entity.Property(e => e.TimeStart).HasColumnName("time_start");

                entity.Property(e => e.TxaComment).HasColumnName("txa_comment");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.DailyReportsSubform)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DailyTimeSheet_dailyReportsSubform");
            });

            modelBuilder.Entity<DailyTimeSheet>(entity =>
            {
                entity.Property(e => e.AuditStatusDailyTimeSheet).HasColumnName("AuditStatus_DailyTimeSheet");

                entity.Property(e => e.CreatorDailyTimeSheet).HasColumnName("Creator_DailyTimeSheet");

                entity.Property(e => e.Date).HasColumnName("date");

                entity.Property(e => e.InstanceIdDailyTimeSheet).HasColumnName("InstanceId_DailyTimeSheet");

                entity.Property(e => e.InstanceSridDailyTimeSheet).HasColumnName("InstanceSRId_DailyTimeSheet");

                entity.Property(e => e.IpDailyTimeSheet).HasColumnName("IP_DailyTimeSheet");

                entity.Property(e => e.RegistrationDateDailyTimeSheet).HasColumnName("RegistrationDate_DailyTimeSheet");

                entity.Property(e => e.RegistrationStatusDailyTimeSheet).HasColumnName("RegistrationStatus_DailyTimeSheet");

                entity.Property(e => e.RegistrationTimeDailyTimeSheet).HasColumnName("RegistrationTime_DailyTimeSheet");
            });

            modelBuilder.Entity<DamagedSourceComment>(entity =>
            {
                entity.Property(e => e.AuditStatusDamagedSourceComment).HasColumnName("AuditStatus_DamagedSourceComment");

                entity.Property(e => e.CreatorDamagedSourceComment).HasColumnName("Creator_DamagedSourceComment");

                entity.Property(e => e.InstanceIdDamagedSourceComment).HasColumnName("InstanceId_DamagedSourceComment");

                entity.Property(e => e.InstanceSridDamagedSourceComment).HasColumnName("InstanceSRId_DamagedSourceComment");

                entity.Property(e => e.IpDamagedSourceComment).HasColumnName("IP_DamagedSourceComment");

                entity.Property(e => e.RegistrationDateDamagedSourceComment).HasColumnName("RegistrationDate_DamagedSourceComment");

                entity.Property(e => e.RegistrationStatusDamagedSourceComment).HasColumnName("RegistrationStatus_DamagedSourceComment");

                entity.Property(e => e.RegistrationTimeDamagedSourceComment).HasColumnName("RegistrationTime_DamagedSourceComment");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");
            });

            modelBuilder.Entity<DataModelInformation>(entity =>
            {
                entity.ToTable("dataModelInformation");

                entity.Property(e => e.AuditStatusDataModelInformation).HasColumnName("AuditStatus_dataModelInformation");

                entity.Property(e => e.CkDminfo).HasColumnName("ckDMinfo");

                entity.Property(e => e.CreatorDataModelInformation).HasColumnName("Creator_dataModelInformation");

                entity.Property(e => e.InstanceIdDataModelInformation).HasColumnName("InstanceId_dataModelInformation");

                entity.Property(e => e.InstanceSridDataModelInformation).HasColumnName("InstanceSRId_dataModelInformation");

                entity.Property(e => e.IpDataModelInformation).HasColumnName("IP_dataModelInformation");

                entity.Property(e => e.RegistrationDateDataModelInformation).HasColumnName("RegistrationDate_dataModelInformation");

                entity.Property(e => e.RegistrationStatusDataModelInformation).HasColumnName("RegistrationStatus_dataModelInformation");

                entity.Property(e => e.RegistrationTimeDataModelInformation).HasColumnName("RegistrationTime_dataModelInformation");

                entity.Property(e => e.UplDocs).HasColumnName("uplDocs");
            });

            modelBuilder.Entity<Db34>(entity =>
            {
                entity.ToTable("db34");

                entity.Property(e => e.Asdasd).HasColumnName("asdasd");

                entity.Property(e => e.AuditStatusDb34).HasColumnName("AuditStatus_db34");

                entity.Property(e => e.CreatorDb34).HasColumnName("Creator_db34");

                entity.Property(e => e.DdlA).HasColumnName("ddlA");

                entity.Property(e => e.DdlB).HasColumnName("ddlB");

                entity.Property(e => e.DdlC).HasColumnName("ddlC");

                entity.Property(e => e.DdlTd).HasColumnName("ddlTD");

                entity.Property(e => e.InstanceIdDb34).HasColumnName("InstanceId_db34");

                entity.Property(e => e.InstanceSridDb34).HasColumnName("InstanceSRId_db34");

                entity.Property(e => e.IpDb34).HasColumnName("IP_db34");

                entity.Property(e => e.RegistrationDateDb34).HasColumnName("RegistrationDate_db34");

                entity.Property(e => e.RegistrationStatusDb34).HasColumnName("RegistrationStatus_db34");

                entity.Property(e => e.RegistrationTimeDb34).HasColumnName("RegistrationTime_db34");

                entity.Property(e => e.TxtMaskTest1).HasColumnName("txtMaskTest1");
            });

            modelBuilder.Entity<DeclarationHumanResourcesForm1>(entity =>
            {
                entity.ToTable("DeclarationHumanResources_Form1");

                entity.Property(e => e.AuditStatusDeclarationHumanResourcesForm1).HasColumnName("AuditStatus_DeclarationHumanResources_Form1");

                entity.Property(e => e.CreatorDeclarationHumanResourcesForm1).HasColumnName("Creator_DeclarationHumanResources_Form1");

                entity.Property(e => e.DdlApplicantUnit).HasColumnName("ddlApplicantUnit");

                entity.Property(e => e.DdlGender).HasColumnName("ddlGender");

                entity.Property(e => e.DdlTheAgeRange).HasColumnName("ddlTheAgeRange");

                entity.Property(e => e.InstanceIdDeclarationHumanResourcesForm1).HasColumnName("InstanceId_DeclarationHumanResources_Form1");

                entity.Property(e => e.InstanceSridDeclarationHumanResourcesForm1).HasColumnName("InstanceSRId_DeclarationHumanResources_Form1");

                entity.Property(e => e.IpDeclarationHumanResourcesForm1).HasColumnName("IP_DeclarationHumanResources_Form1");

                entity.Property(e => e.NumRequiredForce).HasColumnName("numRequiredForce");

                entity.Property(e => e.RegistrationDateDeclarationHumanResourcesForm1).HasColumnName("RegistrationDate_DeclarationHumanResources_Form1");

                entity.Property(e => e.RegistrationStatusDeclarationHumanResourcesForm1).HasColumnName("RegistrationStatus_DeclarationHumanResources_Form1");

                entity.Property(e => e.RegistrationTimeDeclarationHumanResourcesForm1).HasColumnName("RegistrationTime_DeclarationHumanResources_Form1");
            });

            modelBuilder.Entity<DeclarationHumanResourcesForm2>(entity =>
            {
                entity.ToTable("DeclarationHumanResources_Form2");

                entity.Property(e => e.AuditStatusDeclarationHumanResourcesForm2).HasColumnName("AuditStatus_DeclarationHumanResources_Form2");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.AxtEditingItems).HasColumnName("axtEditingItems");

                entity.Property(e => e.CreatorDeclarationHumanResourcesForm2).HasColumnName("Creator_DeclarationHumanResources_Form2");

                entity.Property(e => e.DdlResultApplicationReview).HasColumnName("ddlResultApplicationReview");

                entity.Property(e => e.InstanceIdDeclarationHumanResourcesForm2).HasColumnName("InstanceId_DeclarationHumanResources_Form2");

                entity.Property(e => e.InstanceSridDeclarationHumanResourcesForm2).HasColumnName("InstanceSRId_DeclarationHumanResources_Form2");

                entity.Property(e => e.IpDeclarationHumanResourcesForm2).HasColumnName("IP_DeclarationHumanResources_Form2");

                entity.Property(e => e.RegistrationDateDeclarationHumanResourcesForm2).HasColumnName("RegistrationDate_DeclarationHumanResources_Form2");

                entity.Property(e => e.RegistrationStatusDeclarationHumanResourcesForm2).HasColumnName("RegistrationStatus_DeclarationHumanResources_Form2");

                entity.Property(e => e.RegistrationTimeDeclarationHumanResourcesForm2).HasColumnName("RegistrationTime_DeclarationHumanResources_Form2");
            });

            modelBuilder.Entity<DeclarationHumanResourcesForm3>(entity =>
            {
                entity.ToTable("DeclarationHumanResources_Form3");

                entity.Property(e => e.AuditStatusDeclarationHumanResourcesForm3).HasColumnName("AuditStatus_DeclarationHumanResources_Form3");

                entity.Property(e => e.AxtSubmitComment).HasColumnName("axtSubmitComment");

                entity.Property(e => e.CreatorDeclarationHumanResourcesForm3).HasColumnName("Creator_DeclarationHumanResources_Form3");

                entity.Property(e => e.InstanceIdDeclarationHumanResourcesForm3).HasColumnName("InstanceId_DeclarationHumanResources_Form3");

                entity.Property(e => e.InstanceSridDeclarationHumanResourcesForm3).HasColumnName("InstanceSRId_DeclarationHumanResources_Form3");

                entity.Property(e => e.IpDeclarationHumanResourcesForm3).HasColumnName("IP_DeclarationHumanResources_Form3");

                entity.Property(e => e.RegistrationDateDeclarationHumanResourcesForm3).HasColumnName("RegistrationDate_DeclarationHumanResources_Form3");

                entity.Property(e => e.RegistrationStatusDeclarationHumanResourcesForm3).HasColumnName("RegistrationStatus_DeclarationHumanResources_Form3");

                entity.Property(e => e.RegistrationTimeDeclarationHumanResourcesForm3).HasColumnName("RegistrationTime_DeclarationHumanResources_Form3");
            });

            modelBuilder.Entity<DeclarationHumanResourcesForm4>(entity =>
            {
                entity.ToTable("DeclarationHumanResources_Form4");

                entity.Property(e => e.AuditStatusDeclarationHumanResourcesForm4).HasColumnName("AuditStatus_DeclarationHumanResources_Form4");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorDeclarationHumanResourcesForm4).HasColumnName("Creator_DeclarationHumanResources_Form4");

                entity.Property(e => e.DdlFinalResultRequestCheck).HasColumnName("ddlFinalResultRequestCheck");

                entity.Property(e => e.InstanceIdDeclarationHumanResourcesForm4).HasColumnName("InstanceId_DeclarationHumanResources_Form4");

                entity.Property(e => e.InstanceSridDeclarationHumanResourcesForm4).HasColumnName("InstanceSRId_DeclarationHumanResources_Form4");

                entity.Property(e => e.IpDeclarationHumanResourcesForm4).HasColumnName("IP_DeclarationHumanResources_Form4");

                entity.Property(e => e.RegistrationDateDeclarationHumanResourcesForm4).HasColumnName("RegistrationDate_DeclarationHumanResources_Form4");

                entity.Property(e => e.RegistrationStatusDeclarationHumanResourcesForm4).HasColumnName("RegistrationStatus_DeclarationHumanResources_Form4");

                entity.Property(e => e.RegistrationTimeDeclarationHumanResourcesForm4).HasColumnName("RegistrationTime_DeclarationHumanResources_Form4");
            });

            modelBuilder.Entity<DeclarationHumanResourcesForm5>(entity =>
            {
                entity.ToTable("DeclarationHumanResources_Form5");

                entity.Property(e => e.AuditStatusDeclarationHumanResourcesForm5).HasColumnName("AuditStatus_DeclarationHumanResources_Form5");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorDeclarationHumanResourcesForm5).HasColumnName("Creator_DeclarationHumanResources_Form5");

                entity.Property(e => e.DdlApplicantDeputy).HasColumnName("ddlApplicantDeputy");

                entity.Property(e => e.InstanceIdDeclarationHumanResourcesForm5).HasColumnName("InstanceId_DeclarationHumanResources_Form5");

                entity.Property(e => e.InstanceSridDeclarationHumanResourcesForm5).HasColumnName("InstanceSRId_DeclarationHumanResources_Form5");

                entity.Property(e => e.IpDeclarationHumanResourcesForm5).HasColumnName("IP_DeclarationHumanResources_Form5");

                entity.Property(e => e.RegistrationDateDeclarationHumanResourcesForm5).HasColumnName("RegistrationDate_DeclarationHumanResources_Form5");

                entity.Property(e => e.RegistrationStatusDeclarationHumanResourcesForm5).HasColumnName("RegistrationStatus_DeclarationHumanResources_Form5");

                entity.Property(e => e.RegistrationTimeDeclarationHumanResourcesForm5).HasColumnName("RegistrationTime_DeclarationHumanResources_Form5");
            });

            modelBuilder.Entity<DefectiveSource>(entity =>
            {
                entity.Property(e => e.DefectiveSubmitDate).HasColumnType("datetime");

                entity.Property(e => e.GameCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GameName).IsRequired();

                entity.Property(e => e.Gamer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Publisher)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DependantPersons>(entity =>
            {
                entity.HasIndex(e => e.PersonId)
                    .HasName("IX_PersonId");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.DependantPersons)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_dbo.DependantPersons_dbo.People_PersonId");
            });

            modelBuilder.Entity<DescriptionForm>(entity =>
            {
                entity.Property(e => e.AuditStatusDescriptionForm).HasColumnName("AuditStatus_DescriptionForm");

                entity.Property(e => e.CreatorDescriptionForm).HasColumnName("Creator_DescriptionForm");

                entity.Property(e => e.InstanceIdDescriptionForm).HasColumnName("InstanceId_DescriptionForm");

                entity.Property(e => e.InstanceSridDescriptionForm).HasColumnName("InstanceSRId_DescriptionForm");

                entity.Property(e => e.IpDescriptionForm).HasColumnName("IP_DescriptionForm");

                entity.Property(e => e.RegistrationDateDescriptionForm).HasColumnName("RegistrationDate_DescriptionForm");

                entity.Property(e => e.RegistrationStatusDescriptionForm).HasColumnName("RegistrationStatus_DescriptionForm");

                entity.Property(e => e.RegistrationTimeDescriptionForm).HasColumnName("RegistrationTime_DescriptionForm");

                entity.Property(e => e.TxaDescription).HasColumnName("txaDescription");
            });

            modelBuilder.Entity<DetermineAheTypeOfBidAction>(entity =>
            {
                entity.Property(e => e.AuditStatusDetermineAheTypeOfBidAction).HasColumnName("AuditStatus_DetermineAheTypeOfBidAction");

                entity.Property(e => e.CreatorDetermineAheTypeOfBidAction).HasColumnName("Creator_DetermineAheTypeOfBidAction");

                entity.Property(e => e.DdlDetermineAheTypeOfBidAction).HasColumnName("ddlDetermineAheTypeOfBidAction");

                entity.Property(e => e.InstanceIdDetermineAheTypeOfBidAction).HasColumnName("InstanceId_DetermineAheTypeOfBidAction");

                entity.Property(e => e.InstanceSridDetermineAheTypeOfBidAction).HasColumnName("InstanceSRId_DetermineAheTypeOfBidAction");

                entity.Property(e => e.IpDetermineAheTypeOfBidAction).HasColumnName("IP_DetermineAheTypeOfBidAction");

                entity.Property(e => e.RegistrationDateDetermineAheTypeOfBidAction).HasColumnName("RegistrationDate_DetermineAheTypeOfBidAction");

                entity.Property(e => e.RegistrationStatusDetermineAheTypeOfBidAction).HasColumnName("RegistrationStatus_DetermineAheTypeOfBidAction");

                entity.Property(e => e.RegistrationTimeDetermineAheTypeOfBidAction).HasColumnName("RegistrationTime_DetermineAheTypeOfBidAction");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");
            });

            modelBuilder.Entity<DisseminationAuctionSpecification>(entity =>
            {
                entity.ToTable("Dissemination_AuctionSpecification");

                entity.Property(e => e.AuditStatusDisseminationAuctionSpecification).HasColumnName("AuditStatus_Dissemination_AuctionSpecification");

                entity.Property(e => e.CreatorDisseminationAuctionSpecification).HasColumnName("Creator_Dissemination_AuctionSpecification");

                entity.Property(e => e.InstanceIdDisseminationAuctionSpecification).HasColumnName("InstanceId_Dissemination_AuctionSpecification");

                entity.Property(e => e.InstanceSridDisseminationAuctionSpecification).HasColumnName("InstanceSRId_Dissemination_AuctionSpecification");

                entity.Property(e => e.IpDisseminationAuctionSpecification).HasColumnName("IP_Dissemination_AuctionSpecification");

                entity.Property(e => e.PdateDateMeeting).HasColumnName("pdateDateMeeting");

                entity.Property(e => e.PdateDateMeetingGregorian)
                    .HasColumnName("pdateDateMeeting_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.PdateEndDateVoting).HasColumnName("pdateEndDateVoting");

                entity.Property(e => e.PdateEndDateVotingGregorian)
                    .HasColumnName("pdateEndDateVoting_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.PdateStartDateVoting).HasColumnName("pdateStartDateVoting");

                entity.Property(e => e.PdateStartDateVotingGregorian)
                    .HasColumnName("pdateStartDateVoting_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateDisseminationAuctionSpecification).HasColumnName("RegistrationDate_Dissemination_AuctionSpecification");

                entity.Property(e => e.RegistrationStatusDisseminationAuctionSpecification).HasColumnName("RegistrationStatus_Dissemination_AuctionSpecification");

                entity.Property(e => e.RegistrationTimeDisseminationAuctionSpecification).HasColumnName("RegistrationTime_Dissemination_AuctionSpecification");
            });

            modelBuilder.Entity<DisseminationInitialVoting>(entity =>
            {
                entity.ToTable("Dissemination_InitialVoting");

                entity.Property(e => e.AuditStatusDisseminationInitialVoting).HasColumnName("AuditStatus_Dissemination_InitialVoting");

                entity.Property(e => e.CreatorDisseminationInitialVoting).HasColumnName("Creator_Dissemination_InitialVoting");

                entity.Property(e => e.InstanceIdDisseminationInitialVoting).HasColumnName("InstanceId_Dissemination_InitialVoting");

                entity.Property(e => e.InstanceSridDisseminationInitialVoting).HasColumnName("InstanceSRId_Dissemination_InitialVoting");

                entity.Property(e => e.IpDisseminationInitialVoting).HasColumnName("IP_Dissemination_InitialVoting");

                entity.Property(e => e.RegistrationDateDisseminationInitialVoting).HasColumnName("RegistrationDate_Dissemination_InitialVoting");

                entity.Property(e => e.RegistrationStatusDisseminationInitialVoting).HasColumnName("RegistrationStatus_Dissemination_InitialVoting");

                entity.Property(e => e.RegistrationTimeDisseminationInitialVoting).HasColumnName("RegistrationTime_Dissemination_InitialVoting");
            });

            modelBuilder.Entity<DisseminationInitialVotingSubForm>(entity =>
            {
                entity.ToTable("Dissemination_InitialVoting_SubForm");

                entity.Property(e => e.AuditStatusDisseminationInitialVotingSubForm).HasColumnName("AuditStatus_Dissemination_InitialVoting_SubForm");

                entity.Property(e => e.CreatorDisseminationInitialVotingSubForm).HasColumnName("Creator_Dissemination_InitialVoting_SubForm");

                entity.Property(e => e.InstanceIdDisseminationInitialVotingSubForm).HasColumnName("InstanceId_Dissemination_InitialVoting_SubForm");

                entity.Property(e => e.InstanceSridDisseminationInitialVotingSubForm).HasColumnName("InstanceSRId_Dissemination_InitialVoting_SubForm");

                entity.Property(e => e.IpDisseminationInitialVotingSubForm).HasColumnName("IP_Dissemination_InitialVoting_SubForm");

                entity.Property(e => e.RegistrationDateDisseminationInitialVotingSubForm).HasColumnName("RegistrationDate_Dissemination_InitialVoting_SubForm");

                entity.Property(e => e.RegistrationStatusDisseminationInitialVotingSubForm).HasColumnName("RegistrationStatus_Dissemination_InitialVoting_SubForm");

                entity.Property(e => e.RegistrationTimeDisseminationInitialVotingSubForm).HasColumnName("RegistrationTime_Dissemination_InitialVoting_SubForm");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.DisseminationInitialVotingSubForm)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Dissemination_InitialVoting_Dissemination_InitialVoting_SubForm");
            });

            modelBuilder.Entity<DisseminationListItemsCourse>(entity =>
            {
                entity.ToTable("Dissemination_ListItemsCourse");

                entity.Property(e => e.AuditStatusDisseminationListItemsCourse).HasColumnName("AuditStatus_Dissemination_ListItemsCourse");

                entity.Property(e => e.CreatorDisseminationListItemsCourse).HasColumnName("Creator_Dissemination_ListItemsCourse");

                entity.Property(e => e.InstanceIdDisseminationListItemsCourse).HasColumnName("InstanceId_Dissemination_ListItemsCourse");

                entity.Property(e => e.InstanceSridDisseminationListItemsCourse).HasColumnName("InstanceSRId_Dissemination_ListItemsCourse");

                entity.Property(e => e.IpDisseminationListItemsCourse).HasColumnName("IP_Dissemination_ListItemsCourse");

                entity.Property(e => e.RegistrationDateDisseminationListItemsCourse).HasColumnName("RegistrationDate_Dissemination_ListItemsCourse");

                entity.Property(e => e.RegistrationStatusDisseminationListItemsCourse).HasColumnName("RegistrationStatus_Dissemination_ListItemsCourse");

                entity.Property(e => e.RegistrationTimeDisseminationListItemsCourse).HasColumnName("RegistrationTime_Dissemination_ListItemsCourse");
            });

            modelBuilder.Entity<DisseminationListItemsCourseSubForm>(entity =>
            {
                entity.ToTable("Dissemination_ListItemsCourse_SubForm");

                entity.Property(e => e.AuditStatusDisseminationListItemsCourseSubForm).HasColumnName("AuditStatus_Dissemination_ListItemsCourse_SubForm");

                entity.Property(e => e.CreatorDisseminationListItemsCourseSubForm).HasColumnName("Creator_Dissemination_ListItemsCourse_SubForm");

                entity.Property(e => e.InstanceIdDisseminationListItemsCourseSubForm).HasColumnName("InstanceId_Dissemination_ListItemsCourse_SubForm");

                entity.Property(e => e.InstanceSridDisseminationListItemsCourseSubForm).HasColumnName("InstanceSRId_Dissemination_ListItemsCourse_SubForm");

                entity.Property(e => e.IpDisseminationListItemsCourseSubForm).HasColumnName("IP_Dissemination_ListItemsCourse_SubForm");

                entity.Property(e => e.RegistrationDateDisseminationListItemsCourseSubForm).HasColumnName("RegistrationDate_Dissemination_ListItemsCourse_SubForm");

                entity.Property(e => e.RegistrationStatusDisseminationListItemsCourseSubForm).HasColumnName("RegistrationStatus_Dissemination_ListItemsCourse_SubForm");

                entity.Property(e => e.RegistrationTimeDisseminationListItemsCourseSubForm).HasColumnName("RegistrationTime_Dissemination_ListItemsCourse_SubForm");
            });

            modelBuilder.Entity<DisseminationPublishersAuctions>(entity =>
            {
                entity.ToTable("Dissemination_PublishersAuctions");

                entity.Property(e => e.AuditStatusDisseminationPublishersAuctions).HasColumnName("AuditStatus_Dissemination_PublishersAuctions");

                entity.Property(e => e.CreatorDisseminationPublishersAuctions).HasColumnName("Creator_Dissemination_PublishersAuctions");

                entity.Property(e => e.DdlPublishersParticipatingAuctions).HasColumnName("ddlPublishersParticipatingAuctions");

                entity.Property(e => e.InstanceIdDisseminationPublishersAuctions).HasColumnName("InstanceId_Dissemination_PublishersAuctions");

                entity.Property(e => e.InstanceSridDisseminationPublishersAuctions).HasColumnName("InstanceSRId_Dissemination_PublishersAuctions");

                entity.Property(e => e.IpDisseminationPublishersAuctions).HasColumnName("IP_Dissemination_PublishersAuctions");

                entity.Property(e => e.RegistrationDateDisseminationPublishersAuctions).HasColumnName("RegistrationDate_Dissemination_PublishersAuctions");

                entity.Property(e => e.RegistrationStatusDisseminationPublishersAuctions).HasColumnName("RegistrationStatus_Dissemination_PublishersAuctions");

                entity.Property(e => e.RegistrationTimeDisseminationPublishersAuctions).HasColumnName("RegistrationTime_Dissemination_PublishersAuctions");
            });

            modelBuilder.Entity<DisseminationPublishersVotes>(entity =>
            {
                entity.ToTable("Dissemination_PublishersVotes");

                entity.Property(e => e.AuditStatusDisseminationPublishersVotes).HasColumnName("AuditStatus_Dissemination_PublishersVotes");

                entity.Property(e => e.CreatorDisseminationPublishersVotes).HasColumnName("Creator_Dissemination_PublishersVotes");

                entity.Property(e => e.InstanceIdDisseminationPublishersVotes).HasColumnName("InstanceId_Dissemination_PublishersVotes");

                entity.Property(e => e.InstanceSridDisseminationPublishersVotes).HasColumnName("InstanceSRId_Dissemination_PublishersVotes");

                entity.Property(e => e.IpDisseminationPublishersVotes).HasColumnName("IP_Dissemination_PublishersVotes");

                entity.Property(e => e.RegistrationDateDisseminationPublishersVotes).HasColumnName("RegistrationDate_Dissemination_PublishersVotes");

                entity.Property(e => e.RegistrationStatusDisseminationPublishersVotes).HasColumnName("RegistrationStatus_Dissemination_PublishersVotes");

                entity.Property(e => e.RegistrationTimeDisseminationPublishersVotes).HasColumnName("RegistrationTime_Dissemination_PublishersVotes");
            });

            modelBuilder.Entity<DmlTblGame>(entity =>
            {
                entity.ToTable("dml_tblGame");

                entity.Property(e => e.PublishDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DmlTblProducerNexclusiveNuser>(entity =>
            {
                entity.ToTable("dml_tblProducerNExclusiveNUser");
            });

            modelBuilder.Entity<EaDialog>(entity =>
            {
                entity.ToTable("eaDialog");

                entity.Property(e => e.AuditStatusEaDialog).HasColumnName("AuditStatus_eaDialog");

                entity.Property(e => e.CreatorEaDialog).HasColumnName("Creator_eaDialog");

                entity.Property(e => e.FileAnalyseDoc).HasColumnName("fileAnalyseDoc");

                entity.Property(e => e.FileConfirmDoc).HasColumnName("fileConfirmDoc");

                entity.Property(e => e.FileDataModelDoc).HasColumnName("fileDataModelDoc");

                entity.Property(e => e.InstanceIdEaDialog).HasColumnName("InstanceId_eaDialog");

                entity.Property(e => e.InstanceSridEaDialog).HasColumnName("InstanceSRId_eaDialog");

                entity.Property(e => e.IpEaDialog).HasColumnName("IP_eaDialog");

                entity.Property(e => e.RegistrationDateEaDialog).HasColumnName("RegistrationDate_eaDialog");

                entity.Property(e => e.RegistrationStatusEaDialog).HasColumnName("RegistrationStatus_eaDialog");

                entity.Property(e => e.RegistrationTimeEaDialog).HasColumnName("RegistrationTime_eaDialog");

                entity.Property(e => e.TxtCode).HasColumnName("txtCode");

                entity.Property(e => e.TxtWorkflowName).HasColumnName("txtWorkflowName");
            });

            modelBuilder.Entity<EditAuctionItems>(entity =>
            {
                entity.Property(e => e.AuditStatusEditAuctionItems).HasColumnName("AuditStatus_EditAuctionItems");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorEditAuctionItems).HasColumnName("Creator_EditAuctionItems");

                entity.Property(e => e.InstanceIdEditAuctionItems).HasColumnName("InstanceId_EditAuctionItems");

                entity.Property(e => e.InstanceSridEditAuctionItems).HasColumnName("InstanceSRId_EditAuctionItems");

                entity.Property(e => e.IpEditAuctionItems).HasColumnName("IP_EditAuctionItems");

                entity.Property(e => e.RegistrationDateEditAuctionItems).HasColumnName("RegistrationDate_EditAuctionItems");

                entity.Property(e => e.RegistrationStatusEditAuctionItems).HasColumnName("RegistrationStatus_EditAuctionItems");

                entity.Property(e => e.RegistrationTimeEditAuctionItems).HasColumnName("RegistrationTime_EditAuctionItems");
            });

            modelBuilder.Entity<EditGameChooseEditingGame>(entity =>
            {
                entity.ToTable("EditGame_ChooseEditingGame");

                entity.Property(e => e.AuditStatusEditGameChooseEditingGame).HasColumnName("AuditStatus_EditGame_ChooseEditingGame");

                entity.Property(e => e.CreatorEditGameChooseEditingGame).HasColumnName("Creator_EditGame_ChooseEditingGame");

                entity.Property(e => e.InstanceIdEditGameChooseEditingGame).HasColumnName("InstanceId_EditGame_ChooseEditingGame");

                entity.Property(e => e.InstanceSridEditGameChooseEditingGame).HasColumnName("InstanceSRId_EditGame_ChooseEditingGame");

                entity.Property(e => e.IpEditGameChooseEditingGame).HasColumnName("IP_EditGame_ChooseEditingGame");

                entity.Property(e => e.NumAmountToRial).HasColumnName("numAmountToRial");

                entity.Property(e => e.RegistrationDateEditGameChooseEditingGame).HasColumnName("RegistrationDate_EditGame_ChooseEditingGame");

                entity.Property(e => e.RegistrationStatusEditGameChooseEditingGame).HasColumnName("RegistrationStatus_EditGame_ChooseEditingGame");

                entity.Property(e => e.RegistrationTimeEditGameChooseEditingGame).HasColumnName("RegistrationTime_EditGame_ChooseEditingGame");

                entity.Property(e => e.TxtDeliveryTimeProject).HasColumnName("txtDeliveryTimeProject");
            });

            modelBuilder.Entity<EditGameChooseNameGame>(entity =>
            {
                entity.ToTable("EditGame_ChooseNameGame");

                entity.Property(e => e.AuditStatusEditGameChooseNameGame).HasColumnName("AuditStatus_EditGame_ChooseNameGame");

                entity.Property(e => e.CreatorEditGameChooseNameGame).HasColumnName("Creator_EditGame_ChooseNameGame");

                entity.Property(e => e.InstanceIdEditGameChooseNameGame).HasColumnName("InstanceId_EditGame_ChooseNameGame");

                entity.Property(e => e.InstanceSridEditGameChooseNameGame).HasColumnName("InstanceSRId_EditGame_ChooseNameGame");

                entity.Property(e => e.IpEditGameChooseNameGame).HasColumnName("IP_EditGame_ChooseNameGame");

                entity.Property(e => e.RegistrationDateEditGameChooseNameGame).HasColumnName("RegistrationDate_EditGame_ChooseNameGame");

                entity.Property(e => e.RegistrationStatusEditGameChooseNameGame).HasColumnName("RegistrationStatus_EditGame_ChooseNameGame");

                entity.Property(e => e.RegistrationTimeEditGameChooseNameGame).HasColumnName("RegistrationTime_EditGame_ChooseNameGame");
            });

            modelBuilder.Entity<EditGameEntryEditingDocumentation>(entity =>
            {
                entity.ToTable("EditGame_EntryEditingDocumentation");

                entity.Property(e => e.AuditStatusEditGameEntryEditingDocumentation).HasColumnName("AuditStatus_EditGame_EntryEditingDocumentation");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorEditGameEntryEditingDocumentation).HasColumnName("Creator_EditGame_EntryEditingDocumentation");

                entity.Property(e => e.InstanceIdEditGameEntryEditingDocumentation).HasColumnName("InstanceId_EditGame_EntryEditingDocumentation");

                entity.Property(e => e.InstanceSridEditGameEntryEditingDocumentation).HasColumnName("InstanceSRId_EditGame_EntryEditingDocumentation");

                entity.Property(e => e.IpEditGameEntryEditingDocumentation).HasColumnName("IP_EditGame_EntryEditingDocumentation");

                entity.Property(e => e.RegistrationDateEditGameEntryEditingDocumentation).HasColumnName("RegistrationDate_EditGame_EntryEditingDocumentation");

                entity.Property(e => e.RegistrationStatusEditGameEntryEditingDocumentation).HasColumnName("RegistrationStatus_EditGame_EntryEditingDocumentation");

                entity.Property(e => e.RegistrationTimeEditGameEntryEditingDocumentation).HasColumnName("RegistrationTime_EditGame_EntryEditingDocumentation");

                entity.Property(e => e.UplCommitmentLetterSignature).HasColumnName("uplCommitmentLetterSignature");

                entity.Property(e => e.UplSubmitEditingItems).HasColumnName("uplSubmitEditingItems");
            });

            modelBuilder.Entity<EditGameGetEditingDocumentation>(entity =>
            {
                entity.ToTable("EditGame_GetEditingDocumentation");

                entity.Property(e => e.AuditStatusEditGameGetEditingDocumentation).HasColumnName("AuditStatus_EditGame_GetEditingDocumentation");

                entity.Property(e => e.CreatorEditGameGetEditingDocumentation).HasColumnName("Creator_EditGame_GetEditingDocumentation");

                entity.Property(e => e.InstanceIdEditGameGetEditingDocumentation).HasColumnName("InstanceId_EditGame_GetEditingDocumentation");

                entity.Property(e => e.InstanceSridEditGameGetEditingDocumentation).HasColumnName("InstanceSRId_EditGame_GetEditingDocumentation");

                entity.Property(e => e.IpEditGameGetEditingDocumentation).HasColumnName("IP_EditGame_GetEditingDocumentation");

                entity.Property(e => e.RegistrationDateEditGameGetEditingDocumentation).HasColumnName("RegistrationDate_EditGame_GetEditingDocumentation");

                entity.Property(e => e.RegistrationStatusEditGameGetEditingDocumentation).HasColumnName("RegistrationStatus_EditGame_GetEditingDocumentation");

                entity.Property(e => e.RegistrationTimeEditGameGetEditingDocumentation).HasColumnName("RegistrationTime_EditGame_GetEditingDocumentation");

                entity.Property(e => e.TxtRequestTitle).HasColumnName("txtRequestTitle");

                entity.Property(e => e.UplDownloadLetterCommitment).HasColumnName("uplDownloadLetterCommitment");
            });

            modelBuilder.Entity<EditGamePublisherReview>(entity =>
            {
                entity.ToTable("EditGame_PublisherReview");

                entity.Property(e => e.AuditStatusEditGamePublisherReview).HasColumnName("AuditStatus_EditGame_PublisherReview");

                entity.Property(e => e.CreatorEditGamePublisherReview).HasColumnName("Creator_EditGame_PublisherReview");

                entity.Property(e => e.DdlResultOfReview).HasColumnName("ddlResultOfReview");

                entity.Property(e => e.InstanceIdEditGamePublisherReview).HasColumnName("InstanceId_EditGame_PublisherReview");

                entity.Property(e => e.InstanceSridEditGamePublisherReview).HasColumnName("InstanceSRId_EditGame_PublisherReview");

                entity.Property(e => e.IpEditGamePublisherReview).HasColumnName("IP_EditGame_PublisherReview");

                entity.Property(e => e.RegistrationDateEditGamePublisherReview).HasColumnName("RegistrationDate_EditGame_PublisherReview");

                entity.Property(e => e.RegistrationStatusEditGamePublisherReview).HasColumnName("RegistrationStatus_EditGame_PublisherReview");

                entity.Property(e => e.RegistrationTimeEditGamePublisherReview).HasColumnName("RegistrationTime_EditGame_PublisherReview");
            });

            modelBuilder.Entity<EditGameRecordPayOff>(entity =>
            {
                entity.ToTable("EditGame_RecordPayOff");

                entity.Property(e => e.AuditStatusEditGameRecordPayOff).HasColumnName("AuditStatus_EditGame_RecordPayOff");

                entity.Property(e => e.CreatorEditGameRecordPayOff).HasColumnName("Creator_EditGame_RecordPayOff");

                entity.Property(e => e.DdlPerformSettlementByPublisher).HasColumnName("ddlPerformSettlementByPublisher");

                entity.Property(e => e.InstanceIdEditGameRecordPayOff).HasColumnName("InstanceId_EditGame_RecordPayOff");

                entity.Property(e => e.InstanceSridEditGameRecordPayOff).HasColumnName("InstanceSRId_EditGame_RecordPayOff");

                entity.Property(e => e.IpEditGameRecordPayOff).HasColumnName("IP_EditGame_RecordPayOff");

                entity.Property(e => e.PdatePerformSettlementByPublisher).HasColumnName("pdatePerformSettlementByPublisher");

                entity.Property(e => e.PdatePerformSettlementByPublisherGregorian)
                    .HasColumnName("pdatePerformSettlementByPublisher_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateEditGameRecordPayOff).HasColumnName("RegistrationDate_EditGame_RecordPayOff");

                entity.Property(e => e.RegistrationStatusEditGameRecordPayOff).HasColumnName("RegistrationStatus_EditGame_RecordPayOff");

                entity.Property(e => e.RegistrationTimeEditGameRecordPayOff).HasColumnName("RegistrationTime_EditGame_RecordPayOff");

                entity.Property(e => e.UplLayoutDocumentation).HasColumnName("uplLayoutDocumentation");
            });

            modelBuilder.Entity<EditGameReviewManager>(entity =>
            {
                entity.ToTable("EditGame_ReviewManager");

                entity.Property(e => e.AuditStatusEditGameReviewManager).HasColumnName("AuditStatus_EditGame_ReviewManager");

                entity.Property(e => e.AxtCorrectiveAnnouncement).HasColumnName("axtCorrectiveAnnouncement");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorEditGameReviewManager).HasColumnName("Creator_EditGame_ReviewManager");

                entity.Property(e => e.DdlResultOfReview).HasColumnName("ddlResultOfReview");

                entity.Property(e => e.InstanceIdEditGameReviewManager).HasColumnName("InstanceId_EditGame_ReviewManager");

                entity.Property(e => e.InstanceSridEditGameReviewManager).HasColumnName("InstanceSRId_EditGame_ReviewManager");

                entity.Property(e => e.IpEditGameReviewManager).HasColumnName("IP_EditGame_ReviewManager");

                entity.Property(e => e.NumPositiveScoreediting).HasColumnName("numPositiveScoreediting");

                entity.Property(e => e.NumnegativeScoreEditing).HasColumnName("numnegativeScoreEditing");

                entity.Property(e => e.RegistrationDateEditGameReviewManager).HasColumnName("RegistrationDate_EditGame_ReviewManager");

                entity.Property(e => e.RegistrationStatusEditGameReviewManager).HasColumnName("RegistrationStatus_EditGame_ReviewManager");

                entity.Property(e => e.RegistrationTimeEditGameReviewManager).HasColumnName("RegistrationTime_EditGame_ReviewManager");

                entity.Property(e => e.TxtSetAgeRating).HasColumnName("txtSetAgeRating");
            });

            modelBuilder.Entity<EditItemUpload>(entity =>
            {
                entity.ToTable("editItemUpload");

                entity.Property(e => e.AuditStatusEditItemUpload).HasColumnName("AuditStatus_editItemUpload");

                entity.Property(e => e.CreatorEditItemUpload).HasColumnName("Creator_editItemUpload");

                entity.Property(e => e.InstanceIdEditItemUpload).HasColumnName("InstanceId_editItemUpload");

                entity.Property(e => e.InstanceSridEditItemUpload).HasColumnName("InstanceSRId_editItemUpload");

                entity.Property(e => e.IpEditItemUpload).HasColumnName("IP_editItemUpload");

                entity.Property(e => e.RegistrationDateEditItemUpload).HasColumnName("RegistrationDate_editItemUpload");

                entity.Property(e => e.RegistrationStatusEditItemUpload).HasColumnName("RegistrationStatus_editItemUpload");

                entity.Property(e => e.RegistrationTimeEditItemUpload).HasColumnName("RegistrationTime_editItemUpload");

                entity.Property(e => e.TxaDescription).HasColumnName("txaDescription");
            });

            modelBuilder.Entity<EditorRatingRegisterRatingEditor>(entity =>
            {
                entity.ToTable("EditorRating_RegisterRatingEditor");

                entity.Property(e => e.AuditStatusEditorRatingRegisterRatingEditor).HasColumnName("AuditStatus_EditorRating_RegisterRatingEditor");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorEditorRatingRegisterRatingEditor).HasColumnName("Creator_EditorRating_RegisterRatingEditor");

                entity.Property(e => e.DdlSelectTransactionType).HasColumnName("ddlSelectTransactionType");

                entity.Property(e => e.InstanceIdEditorRatingRegisterRatingEditor).HasColumnName("InstanceId_EditorRating_RegisterRatingEditor");

                entity.Property(e => e.InstanceSridEditorRatingRegisterRatingEditor).HasColumnName("InstanceSRId_EditorRating_RegisterRatingEditor");

                entity.Property(e => e.IpEditorRatingRegisterRatingEditor).HasColumnName("IP_EditorRating_RegisterRatingEditor");

                entity.Property(e => e.NumScorePoints).HasColumnName("numScorePoints");

                entity.Property(e => e.RegistrationDateEditorRatingRegisterRatingEditor).HasColumnName("RegistrationDate_EditorRating_RegisterRatingEditor");

                entity.Property(e => e.RegistrationStatusEditorRatingRegisterRatingEditor).HasColumnName("RegistrationStatus_EditorRating_RegisterRatingEditor");

                entity.Property(e => e.RegistrationTimeEditorRatingRegisterRatingEditor).HasColumnName("RegistrationTime_EditorRating_RegisterRatingEditor");

                entity.Property(e => e.UplDocumentation).HasColumnName("uplDocumentation");
            });

            modelBuilder.Entity<EducationalBackgrounds>(entity =>
            {
                entity.HasIndex(e => e.PersonId)
                    .HasName("IX_PersonId");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.EducationalBackgrounds)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_dbo.EducationalBackgrounds_dbo.People_PersonId");
            });

            modelBuilder.Entity<EmailMessages>(entity =>
            {
                entity.Property(e => e.CreateDateTime).HasColumnType("datetime");

                entity.Property(e => e.SentDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Entities>(entity =>
            {
                entity.Property(e => e.DataModelGroupId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<EntityLogs>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ErrorLogs>(entity =>
            {
                entity.Property(e => e.ErrorDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Esra2RequestRegister>(entity =>
            {
                entity.ToTable("ESRA2_RequestRegister");

                entity.Property(e => e.AuditStatusEsra2RequestRegister).HasColumnName("AuditStatus_ESRA2_RequestRegister");

                entity.Property(e => e.CreatorEsra2RequestRegister).HasColumnName("Creator_ESRA2_RequestRegister");

                entity.Property(e => e.InstanceIdEsra2RequestRegister).HasColumnName("InstanceId_ESRA2_RequestRegister");

                entity.Property(e => e.InstanceSridEsra2RequestRegister).HasColumnName("InstanceSRId_ESRA2_RequestRegister");

                entity.Property(e => e.IpEsra2RequestRegister).HasColumnName("IP_ESRA2_RequestRegister");

                entity.Property(e => e.RegistrationDateEsra2RequestRegister).HasColumnName("RegistrationDate_ESRA2_RequestRegister");

                entity.Property(e => e.RegistrationStatusEsra2RequestRegister).HasColumnName("RegistrationStatus_ESRA2_RequestRegister");

                entity.Property(e => e.RegistrationTimeEsra2RequestRegister).HasColumnName("RegistrationTime_ESRA2_RequestRegister");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");
            });

            modelBuilder.Entity<EsraMngt2>(entity =>
            {
                entity.Property(e => e.AuditStatusEsraMngt2).HasColumnName("AuditStatus_EsraMngt2");

                entity.Property(e => e.CreatorEsraMngt2).HasColumnName("Creator_EsraMngt2");

                entity.Property(e => e.DdlMode).HasColumnName("ddlMode");

                entity.Property(e => e.DdlRadeh).HasColumnName("ddlRadeh");

                entity.Property(e => e.InstanceIdEsraMngt2).HasColumnName("InstanceId_EsraMngt2");

                entity.Property(e => e.InstanceSridEsraMngt2).HasColumnName("InstanceSRId_EsraMngt2");

                entity.Property(e => e.IpEsraMngt2).HasColumnName("IP_EsraMngt2");

                entity.Property(e => e.PdateRadeh).HasColumnName("pdateRadeh");

                entity.Property(e => e.PdateRadehGregorian)
                    .HasColumnName("pdateRadeh_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateEsraMngt2).HasColumnName("RegistrationDate_EsraMngt2");

                entity.Property(e => e.RegistrationStatusEsraMngt2).HasColumnName("RegistrationStatus_EsraMngt2");

                entity.Property(e => e.RegistrationTimeEsraMngt2).HasColumnName("RegistrationTime_EsraMngt2");

                entity.Property(e => e.TxaTozih).HasColumnName("txaTozih");
            });

            modelBuilder.Entity<EsraMngtReport>(entity =>
            {
                entity.Property(e => e.AuditStatusEsraMngtReport).HasColumnName("AuditStatus_EsraMngtReport");

                entity.Property(e => e.CreatorEsraMngtReport).HasColumnName("Creator_EsraMngtReport");

                entity.Property(e => e.DateGregorian)
                    .HasColumnName("Date_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ddl2ConditionalRating).HasColumnName("ddl2ConditionalRating");

                entity.Property(e => e.DdlAgeRating).HasColumnName("ddlAgeRating");

                entity.Property(e => e.DdlOpinion).HasColumnName("ddlOpinion");

                entity.Property(e => e.InstanceIdEsraMngtReport).HasColumnName("InstanceId_EsraMngtReport");

                entity.Property(e => e.InstanceSridEsraMngtReport).HasColumnName("InstanceSRId_EsraMngtReport");

                entity.Property(e => e.IpEsraMngtReport).HasColumnName("IP_EsraMngtReport");

                entity.Property(e => e.RegistrationDateEsraMngtReport).HasColumnName("RegistrationDate_EsraMngtReport");

                entity.Property(e => e.RegistrationStatusEsraMngtReport).HasColumnName("RegistrationStatus_EsraMngtReport");

                entity.Property(e => e.RegistrationTimeEsraMngtReport).HasColumnName("RegistrationTime_EsraMngtReport");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");
            });

            modelBuilder.Entity<Ewewewewewewe>(entity =>
            {
                entity.ToTable("ewewewewewewe");

                entity.Property(e => e.Sdasdsad).HasColumnName("sdasdsad");
            });

            modelBuilder.Entity<ExclusiveOriginalGamesAssistanceNezarat>(entity =>
            {
                entity.ToTable("ExclusiveOriginalGames_AssistanceNezarat");

                entity.Property(e => e.AuditStatusExclusiveOriginalGamesAssistanceNezarat).HasColumnName("AuditStatus_ExclusiveOriginalGames_AssistanceNezarat");

                entity.Property(e => e.AxtRefusedRequests).HasColumnName("axtRefusedRequests");

                entity.Property(e => e.CreatorExclusiveOriginalGamesAssistanceNezarat).HasColumnName("Creator_ExclusiveOriginalGames_AssistanceNezarat");

                entity.Property(e => e.DdlResultApplicationReview).HasColumnName("ddlResultApplicationReview");

                entity.Property(e => e.InstanceIdExclusiveOriginalGamesAssistanceNezarat).HasColumnName("InstanceId_ExclusiveOriginalGames_AssistanceNezarat");

                entity.Property(e => e.InstanceSridExclusiveOriginalGamesAssistanceNezarat).HasColumnName("InstanceSRId_ExclusiveOriginalGames_AssistanceNezarat");

                entity.Property(e => e.IpExclusiveOriginalGamesAssistanceNezarat).HasColumnName("IP_ExclusiveOriginalGames_AssistanceNezarat");

                entity.Property(e => e.RegistrationDateExclusiveOriginalGamesAssistanceNezarat).HasColumnName("RegistrationDate_ExclusiveOriginalGames_AssistanceNezarat");

                entity.Property(e => e.RegistrationStatusExclusiveOriginalGamesAssistanceNezarat).HasColumnName("RegistrationStatus_ExclusiveOriginalGames_AssistanceNezarat");

                entity.Property(e => e.RegistrationTimeExclusiveOriginalGamesAssistanceNezarat).HasColumnName("RegistrationTime_ExclusiveOriginalGames_AssistanceNezarat");
            });

            modelBuilder.Entity<ExclusiveOriginalGamesExpertNezarat>(entity =>
            {
                entity.ToTable("ExclusiveOriginalGames_ExpertNezarat");

                entity.Property(e => e.AuditStatusExclusiveOriginalGamesExpertNezarat).HasColumnName("AuditStatus_ExclusiveOriginalGames_ExpertNezarat");

                entity.Property(e => e.AxtRefusedRequests).HasColumnName("axtRefusedRequests");

                entity.Property(e => e.CreatorExclusiveOriginalGamesExpertNezarat).HasColumnName("Creator_ExclusiveOriginalGames_ExpertNezarat");

                entity.Property(e => e.DdlResultApplicationReview).HasColumnName("ddlResultApplicationReview");

                entity.Property(e => e.InstanceIdExclusiveOriginalGamesExpertNezarat).HasColumnName("InstanceId_ExclusiveOriginalGames_ExpertNezarat");

                entity.Property(e => e.InstanceSridExclusiveOriginalGamesExpertNezarat).HasColumnName("InstanceSRId_ExclusiveOriginalGames_ExpertNezarat");

                entity.Property(e => e.IpExclusiveOriginalGamesExpertNezarat).HasColumnName("IP_ExclusiveOriginalGames_ExpertNezarat");

                entity.Property(e => e.RegistrationDateExclusiveOriginalGamesExpertNezarat).HasColumnName("RegistrationDate_ExclusiveOriginalGames_ExpertNezarat");

                entity.Property(e => e.RegistrationStatusExclusiveOriginalGamesExpertNezarat).HasColumnName("RegistrationStatus_ExclusiveOriginalGames_ExpertNezarat");

                entity.Property(e => e.RegistrationTimeExclusiveOriginalGamesExpertNezarat).HasColumnName("RegistrationTime_ExclusiveOriginalGames_ExpertNezarat");

                entity.Property(e => e.UplCommissionMinutes).HasColumnName("uplCommissionMinutes");
            });

            modelBuilder.Entity<ExclusiveOriginalGamesRequestPublisher>(entity =>
            {
                entity.ToTable("ExclusiveOriginalGames_RequestPublisher");

                entity.Property(e => e.AuditStatusExclusiveOriginalGamesRequestPublisher).HasColumnName("AuditStatus_ExclusiveOriginalGames_RequestPublisher");

                entity.Property(e => e.CreatorExclusiveOriginalGamesRequestPublisher).HasColumnName("Creator_ExclusiveOriginalGames_RequestPublisher");

                entity.Property(e => e.InstanceIdExclusiveOriginalGamesRequestPublisher).HasColumnName("InstanceId_ExclusiveOriginalGames_RequestPublisher");

                entity.Property(e => e.InstanceSridExclusiveOriginalGamesRequestPublisher).HasColumnName("InstanceSRId_ExclusiveOriginalGames_RequestPublisher");

                entity.Property(e => e.IpExclusiveOriginalGamesRequestPublisher).HasColumnName("IP_ExclusiveOriginalGames_RequestPublisher");

                entity.Property(e => e.RegistrationDateExclusiveOriginalGamesRequestPublisher).HasColumnName("RegistrationDate_ExclusiveOriginalGames_RequestPublisher");

                entity.Property(e => e.RegistrationStatusExclusiveOriginalGamesRequestPublisher).HasColumnName("RegistrationStatus_ExclusiveOriginalGames_RequestPublisher");

                entity.Property(e => e.RegistrationTimeExclusiveOriginalGamesRequestPublisher).HasColumnName("RegistrationTime_ExclusiveOriginalGames_RequestPublisher");

                entity.Property(e => e.UplMonopolyOfficialRepresentationGame).HasColumnName("uplMonopoly_OfficialRepresentationGame");
            });

            modelBuilder.Entity<ExitPersonnelForm1>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form1");

                entity.Property(e => e.AuditStatusExitPersonnelForm1).HasColumnName("AuditStatus_ExitPersonnel_Form1");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorExitPersonnelForm1).HasColumnName("Creator_ExitPersonnel_Form1");

                entity.Property(e => e.DdlCauseDisconnection).HasColumnName("ddlCauseDisconnection");

                entity.Property(e => e.InstanceIdExitPersonnelForm1).HasColumnName("InstanceId_ExitPersonnel_Form1");

                entity.Property(e => e.InstanceSridExitPersonnelForm1).HasColumnName("InstanceSRId_ExitPersonnel_Form1");

                entity.Property(e => e.IpExitPersonnelForm1).HasColumnName("IP_ExitPersonnel_Form1");

                entity.Property(e => e.RegistrationDateExitPersonnelForm1).HasColumnName("RegistrationDate_ExitPersonnel_Form1");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm1).HasColumnName("RegistrationStatus_ExitPersonnel_Form1");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm1).HasColumnName("RegistrationTime_ExitPersonnel_Form1");

                entity.Property(e => e.UplDocumentation).HasColumnName("uplDocumentation");
            });

            modelBuilder.Entity<ExitPersonnelForm10>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form10");

                entity.Property(e => e.AuditStatusExitPersonnelForm10).HasColumnName("AuditStatus_ExitPersonnel_Form10");

                entity.Property(e => e.CreatorExitPersonnelForm10).HasColumnName("Creator_ExitPersonnel_Form10");

                entity.Property(e => e.InstanceIdExitPersonnelForm10).HasColumnName("InstanceId_ExitPersonnel_Form10");

                entity.Property(e => e.InstanceSridExitPersonnelForm10).HasColumnName("InstanceSRId_ExitPersonnel_Form10");

                entity.Property(e => e.IpExitPersonnelForm10).HasColumnName("IP_ExitPersonnel_Form10");

                entity.Property(e => e.NumBazkharidMorakhasi).HasColumnName("numBazkharidMorakhasi");

                entity.Property(e => e.NumBazkharidSanavat).HasColumnName("numBazkharidSanavat");

                entity.Property(e => e.NumBonuses).HasColumnName("numBonuses");

                entity.Property(e => e.NumDamageEquipment).HasColumnName("numDamageEquipment");

                entity.Property(e => e.NumOtherDebt).HasColumnName("numOtherDebt");

                entity.Property(e => e.NumOthers).HasColumnName("numOthers");

                entity.Property(e => e.NumRemainingFund).HasColumnName("numRemainingFund");

                entity.Property(e => e.NumRemainingLoan).HasColumnName("numRemainingLoan");

                entity.Property(e => e.NumRemainingPayable).HasColumnName("numRemainingPayable");

                entity.Property(e => e.NumRemainingSalary).HasColumnName("numRemainingSalary");

                entity.Property(e => e.NumSavingsFund).HasColumnName("numSavingsFund");

                entity.Property(e => e.NumTotalPayment).HasColumnName("numTotalPayment");

                entity.Property(e => e.RegistrationDateExitPersonnelForm10).HasColumnName("RegistrationDate_ExitPersonnel_Form10");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm10).HasColumnName("RegistrationStatus_ExitPersonnel_Form10");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm10).HasColumnName("RegistrationTime_ExitPersonnel_Form10");
            });

            modelBuilder.Entity<ExitPersonnelForm11>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form11");

                entity.Property(e => e.AuditStatusExitPersonnelForm11).HasColumnName("AuditStatus_ExitPersonnel_Form11");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorExitPersonnelForm11).HasColumnName("Creator_ExitPersonnel_Form11");

                entity.Property(e => e.DdlRequestReview).HasColumnName("ddlRequestReview");

                entity.Property(e => e.InstanceIdExitPersonnelForm11).HasColumnName("InstanceId_ExitPersonnel_Form11");

                entity.Property(e => e.InstanceSridExitPersonnelForm11).HasColumnName("InstanceSRId_ExitPersonnel_Form11");

                entity.Property(e => e.IpExitPersonnelForm11).HasColumnName("IP_ExitPersonnel_Form11");

                entity.Property(e => e.RegistrationDateExitPersonnelForm11).HasColumnName("RegistrationDate_ExitPersonnel_Form11");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm11).HasColumnName("RegistrationStatus_ExitPersonnel_Form11");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm11).HasColumnName("RegistrationTime_ExitPersonnel_Form11");
            });

            modelBuilder.Entity<ExitPersonnelForm12>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form12");

                entity.Property(e => e.AuditStatusExitPersonnelForm12).HasColumnName("AuditStatus_ExitPersonnel_Form12");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorExitPersonnelForm12).HasColumnName("Creator_ExitPersonnel_Form12");

                entity.Property(e => e.InstanceIdExitPersonnelForm12).HasColumnName("InstanceId_ExitPersonnel_Form12");

                entity.Property(e => e.InstanceSridExitPersonnelForm12).HasColumnName("InstanceSRId_ExitPersonnel_Form12");

                entity.Property(e => e.IpExitPersonnelForm12).HasColumnName("IP_ExitPersonnel_Form12");

                entity.Property(e => e.NumCheckAmountNumber).HasColumnName("numCheckAmountNumber");

                entity.Property(e => e.NumCheckNumber).HasColumnName("numCheckNumber");

                entity.Property(e => e.RegistrationDateExitPersonnelForm12).HasColumnName("RegistrationDate_ExitPersonnel_Form12");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm12).HasColumnName("RegistrationStatus_ExitPersonnel_Form12");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm12).HasColumnName("RegistrationTime_ExitPersonnel_Form12");

                entity.Property(e => e.TxtBankName).HasColumnName("txtBankName");

                entity.Property(e => e.TxtCheckAmountLetters).HasColumnName("txtCheckAmountLetters");

                entity.Property(e => e.TxtFullNameSurName).HasColumnName("txtFullNameSurName");

                entity.Property(e => e.UplCheckPicture).HasColumnName("uplCheckPicture");

                entity.Property(e => e.UplSignedReceiptImage).HasColumnName("uplSignedReceiptImage");
            });

            modelBuilder.Entity<ExitPersonnelForm2>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form2");

                entity.Property(e => e.AuditStatusExitPersonnelForm2).HasColumnName("AuditStatus_ExitPersonnel_Form2");

                entity.Property(e => e.Axt).HasColumnName("axt");

                entity.Property(e => e.CreatorExitPersonnelForm2).HasColumnName("Creator_ExitPersonnel_Form2");

                entity.Property(e => e.InstanceIdExitPersonnelForm2).HasColumnName("InstanceId_ExitPersonnel_Form2");

                entity.Property(e => e.InstanceSridExitPersonnelForm2).HasColumnName("InstanceSRId_ExitPersonnel_Form2");

                entity.Property(e => e.IpExitPersonnelForm2).HasColumnName("IP_ExitPersonnel_Form2");

                entity.Property(e => e.RegistrationDateExitPersonnelForm2).HasColumnName("RegistrationDate_ExitPersonnel_Form2");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm2).HasColumnName("RegistrationStatus_ExitPersonnel_Form2");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm2).HasColumnName("RegistrationTime_ExitPersonnel_Form2");
            });

            modelBuilder.Entity<ExitPersonnelForm3>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form3");

                entity.Property(e => e.AuditStatusExitPersonnelForm3).HasColumnName("AuditStatus_ExitPersonnel_Form3");

                entity.Property(e => e.AxtListPropertyDefects).HasColumnName("axtListPropertyDefects");

                entity.Property(e => e.CreatorExitPersonnelForm3).HasColumnName("Creator_ExitPersonnel_Form3");

                entity.Property(e => e.DdlGetTheProperty).HasColumnName("ddlGetTheProperty");

                entity.Property(e => e.InstanceIdExitPersonnelForm3).HasColumnName("InstanceId_ExitPersonnel_Form3");

                entity.Property(e => e.InstanceSridExitPersonnelForm3).HasColumnName("InstanceSRId_ExitPersonnel_Form3");

                entity.Property(e => e.IpExitPersonnelForm3).HasColumnName("IP_ExitPersonnel_Form3");

                entity.Property(e => e.RegistrationDateExitPersonnelForm3).HasColumnName("RegistrationDate_ExitPersonnel_Form3");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm3).HasColumnName("RegistrationStatus_ExitPersonnel_Form3");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm3).HasColumnName("RegistrationTime_ExitPersonnel_Form3");
            });

            modelBuilder.Entity<ExitPersonnelForm4>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form4");

                entity.Property(e => e.AuditStatusExitPersonnelForm4).HasColumnName("AuditStatus_ExitPersonnel_Form4");

                entity.Property(e => e.CreatorExitPersonnelForm4).HasColumnName("Creator_ExitPersonnel_Form4");

                entity.Property(e => e.InstanceIdExitPersonnelForm4).HasColumnName("InstanceId_ExitPersonnel_Form4");

                entity.Property(e => e.InstanceSridExitPersonnelForm4).HasColumnName("InstanceSRId_ExitPersonnel_Form4");

                entity.Property(e => e.IpExitPersonnelForm4).HasColumnName("IP_ExitPersonnel_Form4");

                entity.Property(e => e.RegistrationDateExitPersonnelForm4).HasColumnName("RegistrationDate_ExitPersonnel_Form4");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm4).HasColumnName("RegistrationStatus_ExitPersonnel_Form4");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm4).HasColumnName("RegistrationTime_ExitPersonnel_Form4");
            });

            modelBuilder.Entity<ExitPersonnelForm5>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form5");

                entity.Property(e => e.AuditStatusExitPersonnelForm5).HasColumnName("AuditStatus_ExitPersonnel_Form5");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorExitPersonnelForm5).HasColumnName("Creator_ExitPersonnel_Form5");

                entity.Property(e => e.InstanceIdExitPersonnelForm5).HasColumnName("InstanceId_ExitPersonnel_Form5");

                entity.Property(e => e.InstanceSridExitPersonnelForm5).HasColumnName("InstanceSRId_ExitPersonnel_Form5");

                entity.Property(e => e.IpExitPersonnelForm5).HasColumnName("IP_ExitPersonnel_Form5");

                entity.Property(e => e.NumLeaveRemainder).HasColumnName("numLeaveRemainder");

                entity.Property(e => e.PdateEndDate).HasColumnName("pdateEndDate");

                entity.Property(e => e.PdateEndDateGregorian)
                    .HasColumnName("pdateEndDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.PdateStartDate).HasColumnName("pdateStartDate");

                entity.Property(e => e.PdateStartDateGregorian)
                    .HasColumnName("pdateStartDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateExitPersonnelForm5).HasColumnName("RegistrationDate_ExitPersonnel_Form5");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm5).HasColumnName("RegistrationStatus_ExitPersonnel_Form5");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm5).HasColumnName("RegistrationTime_ExitPersonnel_Form5");

                entity.Property(e => e.UplLastContractImage).HasColumnName("uplLastContractImage");
            });

            modelBuilder.Entity<ExitPersonnelForm6>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form6");

                entity.Property(e => e.AuditStatusExitPersonnelForm6).HasColumnName("AuditStatus_ExitPersonnel_Form6");

                entity.Property(e => e.CreatorExitPersonnelForm6).HasColumnName("Creator_ExitPersonnel_Form6");

                entity.Property(e => e.DdlResultInformationCheck).HasColumnName("ddlResultInformationCheck");

                entity.Property(e => e.InstanceIdExitPersonnelForm6).HasColumnName("InstanceId_ExitPersonnel_Form6");

                entity.Property(e => e.InstanceSridExitPersonnelForm6).HasColumnName("InstanceSRId_ExitPersonnel_Form6");

                entity.Property(e => e.IpExitPersonnelForm6).HasColumnName("IP_ExitPersonnel_Form6");

                entity.Property(e => e.RegistrationDateExitPersonnelForm6).HasColumnName("RegistrationDate_ExitPersonnel_Form6");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm6).HasColumnName("RegistrationStatus_ExitPersonnel_Form6");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm6).HasColumnName("RegistrationTime_ExitPersonnel_Form6");
            });

            modelBuilder.Entity<ExitPersonnelForm6RegistrationOfDefects>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form6_RegistrationOfDefects");

                entity.Property(e => e.AuditStatusExitPersonnelForm6RegistrationOfDefects).HasColumnName("AuditStatus_ExitPersonnel_Form6_RegistrationOfDefects");

                entity.Property(e => e.AxtDescriptionDefects).HasColumnName("axtDescriptionDefects");

                entity.Property(e => e.CreatorExitPersonnelForm6RegistrationOfDefects).HasColumnName("Creator_ExitPersonnel_Form6_RegistrationOfDefects");

                entity.Property(e => e.InstanceIdExitPersonnelForm6RegistrationOfDefects).HasColumnName("InstanceId_ExitPersonnel_Form6_RegistrationOfDefects");

                entity.Property(e => e.InstanceSridExitPersonnelForm6RegistrationOfDefects).HasColumnName("InstanceSRId_ExitPersonnel_Form6_RegistrationOfDefects");

                entity.Property(e => e.IpExitPersonnelForm6RegistrationOfDefects).HasColumnName("IP_ExitPersonnel_Form6_RegistrationOfDefects");

                entity.Property(e => e.NumAmountPropertyDefect).HasColumnName("numAmountPropertyDefect");

                entity.Property(e => e.RegistrationDateExitPersonnelForm6RegistrationOfDefects).HasColumnName("RegistrationDate_ExitPersonnel_Form6_RegistrationOfDefects");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm6RegistrationOfDefects).HasColumnName("RegistrationStatus_ExitPersonnel_Form6_RegistrationOfDefects");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm6RegistrationOfDefects).HasColumnName("RegistrationTime_ExitPersonnel_Form6_RegistrationOfDefects");
            });

            modelBuilder.Entity<ExitPersonnelForm7>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form7");

                entity.Property(e => e.AuditStatusExitPersonnelForm7).HasColumnName("AuditStatus_ExitPersonnel_Form7");

                entity.Property(e => e.CreatorExitPersonnelForm7).HasColumnName("Creator_ExitPersonnel_Form7");

                entity.Property(e => e.InstanceIdExitPersonnelForm7).HasColumnName("InstanceId_ExitPersonnel_Form7");

                entity.Property(e => e.InstanceSridExitPersonnelForm7).HasColumnName("InstanceSRId_ExitPersonnel_Form7");

                entity.Property(e => e.IpExitPersonnelForm7).HasColumnName("IP_ExitPersonnel_Form7");

                entity.Property(e => e.RegistrationDateExitPersonnelForm7).HasColumnName("RegistrationDate_ExitPersonnel_Form7");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm7).HasColumnName("RegistrationStatus_ExitPersonnel_Form7");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm7).HasColumnName("RegistrationTime_ExitPersonnel_Form7");
            });

            modelBuilder.Entity<ExitPersonnelForm8>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form8");

                entity.Property(e => e.AuditStatusExitPersonnelForm8).HasColumnName("AuditStatus_ExitPersonnel_Form8");

                entity.Property(e => e.AxtDescriptionDefects).HasColumnName("axtDescriptionDefects");

                entity.Property(e => e.CreatorExitPersonnelForm8).HasColumnName("Creator_ExitPersonnel_Form8");

                entity.Property(e => e.DdlResultInformationCheck).HasColumnName("ddlResultInformationCheck");

                entity.Property(e => e.InstanceIdExitPersonnelForm8).HasColumnName("InstanceId_ExitPersonnel_Form8");

                entity.Property(e => e.InstanceSridExitPersonnelForm8).HasColumnName("InstanceSRId_ExitPersonnel_Form8");

                entity.Property(e => e.IpExitPersonnelForm8).HasColumnName("IP_ExitPersonnel_Form8");

                entity.Property(e => e.RegistrationDateExitPersonnelForm8).HasColumnName("RegistrationDate_ExitPersonnel_Form8");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm8).HasColumnName("RegistrationStatus_ExitPersonnel_Form8");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm8).HasColumnName("RegistrationTime_ExitPersonnel_Form8");
            });

            modelBuilder.Entity<ExitPersonnelForm9>(entity =>
            {
                entity.ToTable("ExitPersonnel_Form9");

                entity.Property(e => e.AuditStatusExitPersonnelForm9).HasColumnName("AuditStatus_ExitPersonnel_Form9");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorExitPersonnelForm9).HasColumnName("Creator_ExitPersonnel_Form9");

                entity.Property(e => e.DdlCalculateYears).HasColumnName("ddlCalculateYears");

                entity.Property(e => e.DdlPropertyDeficit).HasColumnName("ddlPropertyDeficit");

                entity.Property(e => e.InstanceIdExitPersonnelForm9).HasColumnName("InstanceId_ExitPersonnel_Form9");

                entity.Property(e => e.InstanceSridExitPersonnelForm9).HasColumnName("InstanceSRId_ExitPersonnel_Form9");

                entity.Property(e => e.IpExitPersonnelForm9).HasColumnName("IP_ExitPersonnel_Form9");

                entity.Property(e => e.RegistrationDateExitPersonnelForm9).HasColumnName("RegistrationDate_ExitPersonnel_Form9");

                entity.Property(e => e.RegistrationStatusExitPersonnelForm9).HasColumnName("RegistrationStatus_ExitPersonnel_Form9");

                entity.Property(e => e.RegistrationTimeExitPersonnelForm9).HasColumnName("RegistrationTime_ExitPersonnel_Form9");
            });

            modelBuilder.Entity<ExpertiseAndSkills>(entity =>
            {
                entity.Property(e => e.AuditStatusExpertiseAndSkills).HasColumnName("AuditStatus_ExpertiseAndSkills");

                entity.Property(e => e.CreatorExpertiseAndSkills).HasColumnName("Creator_ExpertiseAndSkills");

                entity.Property(e => e.DdlLevel).HasColumnName("ddlLevel");

                entity.Property(e => e.InstanceIdExpertiseAndSkills).HasColumnName("InstanceId_ExpertiseAndSkills");

                entity.Property(e => e.InstanceSridExpertiseAndSkills).HasColumnName("InstanceSRId_ExpertiseAndSkills");

                entity.Property(e => e.IpExpertiseAndSkills).HasColumnName("IP_ExpertiseAndSkills");

                entity.Property(e => e.RegistrationDateExpertiseAndSkills).HasColumnName("RegistrationDate_ExpertiseAndSkills");

                entity.Property(e => e.RegistrationStatusExpertiseAndSkills).HasColumnName("RegistrationStatus_ExpertiseAndSkills");

                entity.Property(e => e.RegistrationTimeExpertiseAndSkills).HasColumnName("RegistrationTime_ExpertiseAndSkills");

                entity.Property(e => e.TxtExpertName).HasColumnName("txtExpertName");

                entity.Property(e => e.TxtLearningPlace).HasColumnName("txtLearningPlace");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.ExpertiseAndSkills)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_InstitutionExecutivesProfile_ExpertiseAndSkills");
            });

            modelBuilder.Entity<F1test>(entity =>
            {
                entity.ToTable("f1test");

                entity.Property(e => e.AuditStatusF1test).HasColumnName("AuditStatus_f1test");

                entity.Property(e => e.CreatorF1test).HasColumnName("Creator_f1test");

                entity.Property(e => e.InstanceIdF1test).HasColumnName("InstanceId_f1test");

                entity.Property(e => e.InstanceSridF1test).HasColumnName("InstanceSRId_f1test");

                entity.Property(e => e.IpF1test).HasColumnName("IP_f1test");

                entity.Property(e => e.RegistrationDateF1test).HasColumnName("RegistrationDate_f1test");

                entity.Property(e => e.RegistrationStatusF1test).HasColumnName("RegistrationStatus_f1test");

                entity.Property(e => e.RegistrationTimeF1test).HasColumnName("RegistrationTime_f1test");

                entity.Property(e => e.Txtone).HasColumnName("txtone");
            });

            modelBuilder.Entity<Fff>(entity =>
            {
                entity.ToTable("fff");

                entity.Property(e => e.AuditStatusشسیشس).HasColumnName("AuditStatus_شسیشس");

                entity.Property(e => e.Creatorشسیشس).HasColumnName("Creator_شسیشس");

                entity.Property(e => e.Ddlert).HasColumnName("ddlert");

                entity.Property(e => e.InstanceIdشسیشس).HasColumnName("InstanceId_شسیشس");

                entity.Property(e => e.InstanceSridشسیشس).HasColumnName("InstanceSRId_شسیشس");

                entity.Property(e => e.Ipشسیشس).HasColumnName("IP_شسیشس");

                entity.Property(e => e.RegistrationDateشسیشس).HasColumnName("RegistrationDate_شسیشس");

                entity.Property(e => e.RegistrationStatusشسیشس).HasColumnName("RegistrationStatus_شسیشس");

                entity.Property(e => e.RegistrationTimeشسیشس).HasColumnName("RegistrationTime_شسیشس");

                entity.Property(e => e.TrackingCodeشسیشس).HasColumnName("TrackingCode_شسیشس");
            });

            modelBuilder.Entity<FieldProperties>(entity =>
            {
                entity.Property(e => e.Type).HasMaxLength(256);
            });

            modelBuilder.Entity<FileUpload>(entity =>
            {
                entity.Property(e => e.AuditStatusFileUpload).HasColumnName("AuditStatus_FileUpload");

                entity.Property(e => e.CreatorFileUpload).HasColumnName("Creator_FileUpload");

                entity.Property(e => e.FileUpload1).HasColumnName("FileUpload");

                entity.Property(e => e.InstanceIdFileUpload).HasColumnName("InstanceId_FileUpload");

                entity.Property(e => e.InstanceSridFileUpload).HasColumnName("InstanceSRId_FileUpload");

                entity.Property(e => e.IpFileUpload).HasColumnName("IP_FileUpload");

                entity.Property(e => e.RegistrationDateFileUpload).HasColumnName("RegistrationDate_FileUpload");

                entity.Property(e => e.RegistrationStatusFileUpload).HasColumnName("RegistrationStatus_FileUpload");

                entity.Property(e => e.RegistrationTimeFileUpload).HasColumnName("RegistrationTime_FileUpload");
            });

            modelBuilder.Entity<FileUploadSettings>(entity =>
            {
                entity.Property(e => e.MaxSizeInKb).HasDefaultValueSql("((0))");

                entity.Property(e => e.MinSizeInKb).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<FinalGameRegisterForm>(entity =>
            {
                entity.ToTable("finalGameRegisterForm");

                entity.Property(e => e.AuditStatusFinalGameRegisterForm).HasColumnName("AuditStatus_finalGameRegisterForm");

                entity.Property(e => e.CreatorFinalGameRegisterForm).HasColumnName("Creator_finalGameRegisterForm");

                entity.Property(e => e.Datesaletolidebazi).HasColumnName("datesaletolidebazi");

                entity.Property(e => e.DatesaletolidebaziGregorian)
                    .HasColumnName("datesaletolidebazi_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.DdlGanre).HasColumnName("ddlGanre");

                entity.Property(e => e.DdlSendType).HasColumnName("ddl_SendType");

                entity.Property(e => e.DdlSourceType).HasColumnName("ddl_SourceType");

                entity.Property(e => e.InstanceIdFinalGameRegisterForm).HasColumnName("InstanceId_finalGameRegisterForm");

                entity.Property(e => e.InstanceSridFinalGameRegisterForm).HasColumnName("InstanceSRId_finalGameRegisterForm");

                entity.Property(e => e.IpFinalGameRegisterForm).HasColumnName("IP_finalGameRegisterForm");

                entity.Property(e => e.RegistrationDateFinalGameRegisterForm).HasColumnName("RegistrationDate_finalGameRegisterForm");

                entity.Property(e => e.RegistrationStatusFinalGameRegisterForm).HasColumnName("RegistrationStatus_finalGameRegisterForm");

                entity.Property(e => e.RegistrationTimeFinalGameRegisterForm).HasColumnName("RegistrationTime_finalGameRegisterForm");

                entity.Property(e => e.Txtravayatebazi).HasColumnName("txtravayatebazi");

                entity.Property(e => e.Txtsherkatesazande).HasColumnName("txtsherkatesazande");

                entity.Property(e => e.Uplsorsebazi).HasColumnName("uplsorsebazi");
            });

            modelBuilder.Entity<FormDetails>(entity =>
            {
                entity.Property(e => e.FormGroupId).HasDefaultValueSql("((0))");

                entity.Property(e => e.FormSubGroupId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<FormFields>(entity =>
            {
                entity.HasIndex(e => e.FilteringId)
                    .HasName("IX_Filtering_Id");

                entity.Property(e => e.FilteringId).HasColumnName("Filtering_Id");

                entity.HasOne(d => d.Filtering)
                    .WithMany(p => p.FormFields)
                    .HasForeignKey(d => d.FilteringId)
                    .HasConstraintName("FK_dbo.FormFields_dbo.Filterings_Filtering_Id");
            });

            modelBuilder.Entity<FoundingBoardInformation>(entity =>
            {
                entity.Property(e => e.AuditStatusFoundingBoardInformation).HasColumnName("AuditStatus_FoundingBoardInformation");

                entity.Property(e => e.Bcpic).HasColumnName("BCPic");

                entity.Property(e => e.CreatorFoundingBoardInformation).HasColumnName("Creator_FoundingBoardInformation");

                entity.Property(e => e.Flname).HasColumnName("FLName");

                entity.Property(e => e.InstanceIdFoundingBoardInformation).HasColumnName("InstanceId_FoundingBoardInformation");

                entity.Property(e => e.InstanceSridFoundingBoardInformation).HasColumnName("InstanceSRId_FoundingBoardInformation");

                entity.Property(e => e.IpFoundingBoardInformation).HasColumnName("IP_FoundingBoardInformation");

                entity.Property(e => e.Ncpic).HasColumnName("NCPic");

                entity.Property(e => e.RegistrationDateFoundingBoardInformation).HasColumnName("RegistrationDate_FoundingBoardInformation");

                entity.Property(e => e.RegistrationStatusFoundingBoardInformation).HasColumnName("RegistrationStatus_FoundingBoardInformation");

                entity.Property(e => e.RegistrationTimeFoundingBoardInformation).HasColumnName("RegistrationTime_FoundingBoardInformation");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.FoundingBoardInformation)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PEPGameLicenseRequest_FoundingBoardInformation");
            });

            modelBuilder.Entity<GameDevAreaExpertises>(entity =>
            {
                entity.Property(e => e.AeName)
                    .IsRequired()
                    .HasColumnName("ae_name");
            });

            modelBuilder.Entity<GameInformation>(entity =>
            {
                entity.Property(e => e.AuditStatusGameInformation).HasColumnName("AuditStatus_GameInformation");

                entity.Property(e => e.CreatorGameInformation).HasColumnName("Creator_GameInformation");

                entity.Property(e => e.InstanceIdGameInformation).HasColumnName("InstanceId_GameInformation");

                entity.Property(e => e.InstanceSridGameInformation).HasColumnName("InstanceSRId_GameInformation");

                entity.Property(e => e.IpGameInformation).HasColumnName("IP_GameInformation");

                entity.Property(e => e.RegistrationDateGameInformation).HasColumnName("RegistrationDate_GameInformation");

                entity.Property(e => e.RegistrationStatusGameInformation).HasColumnName("RegistrationStatus_GameInformation");

                entity.Property(e => e.RegistrationTimeGameInformation).HasColumnName("RegistrationTime_GameInformation");
            });

            modelBuilder.Entity<GameMarketList>(entity =>
            {
                entity.Property(e => e.AuditStatusGameMarketList).HasColumnName("AuditStatus_GameMarketList");

                entity.Property(e => e.CreatorGameMarketList).HasColumnName("Creator_GameMarketList");

                entity.Property(e => e.InstanceIdGameMarketList).HasColumnName("InstanceId_GameMarketList");

                entity.Property(e => e.InstanceSridGameMarketList).HasColumnName("InstanceSRId_GameMarketList");

                entity.Property(e => e.IpGameMarketList).HasColumnName("IP_GameMarketList");

                entity.Property(e => e.RegistrationDateGameMarketList).HasColumnName("RegistrationDate_GameMarketList");

                entity.Property(e => e.RegistrationStatusGameMarketList).HasColumnName("RegistrationStatus_GameMarketList");

                entity.Property(e => e.RegistrationTimeGameMarketList).HasColumnName("RegistrationTime_GameMarketList");

                entity.Property(e => e.TxtMarket).HasColumnName("txtMarket");
            });

            modelBuilder.Entity<GameNetRequestForm>(entity =>
            {
                entity.Property(e => e.AuditStatusGameNetRequestForm).HasColumnName("AuditStatus_GameNetRequestForm");

                entity.Property(e => e.CreatorGameNetRequestForm).HasColumnName("Creator_GameNetRequestForm");

                entity.Property(e => e.InstanceIdGameNetRequestForm).HasColumnName("InstanceId_GameNetRequestForm");

                entity.Property(e => e.InstanceSridGameNetRequestForm).HasColumnName("InstanceSRId_GameNetRequestForm");

                entity.Property(e => e.IpGameNetRequestForm).HasColumnName("IP_GameNetRequestForm");

                entity.Property(e => e.RegistrationDateGameNetRequestForm).HasColumnName("RegistrationDate_GameNetRequestForm");

                entity.Property(e => e.RegistrationStatusGameNetRequestForm).HasColumnName("RegistrationStatus_GameNetRequestForm");

                entity.Property(e => e.RegistrationTimeGameNetRequestForm).HasColumnName("RegistrationTime_GameNetRequestForm");
            });

            modelBuilder.Entity<GamePlatform>(entity =>
            {
                entity.Property(e => e.AuditStatusGamePlatform).HasColumnName("AuditStatus_GamePlatform");

                entity.Property(e => e.CreatorGamePlatform).HasColumnName("Creator_GamePlatform");

                entity.Property(e => e.DdlGamePlatform).HasColumnName("ddlGamePlatform");

                entity.Property(e => e.InstanceIdGamePlatform).HasColumnName("InstanceId_GamePlatform");

                entity.Property(e => e.InstanceSridGamePlatform).HasColumnName("InstanceSRId_GamePlatform");

                entity.Property(e => e.IpGamePlatform).HasColumnName("IP_GamePlatform");

                entity.Property(e => e.RegistrationDateGamePlatform).HasColumnName("RegistrationDate_GamePlatform");

                entity.Property(e => e.RegistrationStatusGamePlatform).HasColumnName("RegistrationStatus_GamePlatform");

                entity.Property(e => e.RegistrationTimeGamePlatform).HasColumnName("RegistrationTime_GamePlatform");

                entity.Property(e => e.TxtNumber).HasColumnName("txtNumber");

                entity.Property(e => e.TxtSite).HasColumnName("txtSite");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.GamePlatform)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_GameInformation_GamePlatform");
            });

            modelBuilder.Entity<GamePlatforms>(entity =>
            {
                entity.Property(e => e.Platform)
                    .IsRequired()
                    .HasColumnName("platform")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GamerAndStoryTellerChoose>(entity =>
            {
                entity.Property(e => e.AuditStatusGamerAndStoryTellerChoose).HasColumnName("AuditStatus_GamerAndStoryTellerChoose");

                entity.Property(e => e.CreatorGamerAndStoryTellerChoose).HasColumnName("Creator_GamerAndStoryTellerChoose");

                entity.Property(e => e.DdlGamerSelect).HasColumnName("ddlGamerSelect");

                entity.Property(e => e.InstanceIdGamerAndStoryTellerChoose).HasColumnName("InstanceId_GamerAndStoryTellerChoose");

                entity.Property(e => e.InstanceSridGamerAndStoryTellerChoose).HasColumnName("InstanceSRId_GamerAndStoryTellerChoose");

                entity.Property(e => e.IpGamerAndStoryTellerChoose).HasColumnName("IP_GamerAndStoryTellerChoose");

                entity.Property(e => e.RegistrationDateGamerAndStoryTellerChoose).HasColumnName("RegistrationDate_GamerAndStoryTellerChoose");

                entity.Property(e => e.RegistrationStatusGamerAndStoryTellerChoose).HasColumnName("RegistrationStatus_GamerAndStoryTellerChoose");

                entity.Property(e => e.RegistrationTimeGamerAndStoryTellerChoose).HasColumnName("RegistrationTime_GamerAndStoryTellerChoose");

                entity.Property(e => e.TxtStoryTellerSelect).HasColumnName("txtStoryTellerSelect");
            });

            modelBuilder.Entity<GamerCheckSource>(entity =>
            {
                entity.Property(e => e.AuditStatusGamerCheckSource).HasColumnName("AuditStatus_GamerCheckSource");

                entity.Property(e => e.CreatorGamerCheckSource).HasColumnName("Creator_GamerCheckSource");

                entity.Property(e => e.DdlError).HasColumnName("ddlError");

                entity.Property(e => e.DdlHealth).HasColumnName("ddlHealth");

                entity.Property(e => e.DdlPerspective).HasColumnName("ddlPerspective");

                entity.Property(e => e.InstanceIdGamerCheckSource).HasColumnName("InstanceId_GamerCheckSource");

                entity.Property(e => e.InstanceSridGamerCheckSource).HasColumnName("InstanceSRId_GamerCheckSource");

                entity.Property(e => e.IpGamerCheckSource).HasColumnName("IP_GamerCheckSource");

                entity.Property(e => e.RegistrationDateGamerCheckSource).HasColumnName("RegistrationDate_GamerCheckSource");

                entity.Property(e => e.RegistrationStatusGamerCheckSource).HasColumnName("RegistrationStatus_GamerCheckSource");

                entity.Property(e => e.RegistrationTimeGamerCheckSource).HasColumnName("RegistrationTime_GamerCheckSource");

                entity.Property(e => e.TxaDescription).HasColumnName("txaDescription");

                entity.Property(e => e.TxaGameProcess).HasColumnName("txaGameProcess");

                entity.Property(e => e.TxtPlayTime).HasColumnName("txtPlayTime");
            });

            modelBuilder.Entity<GamerChooseAgain>(entity =>
            {
                entity.Property(e => e.AuditStatusGamerChooseAgain).HasColumnName("AuditStatus_GamerChooseAgain");

                entity.Property(e => e.CreatorGamerChooseAgain).HasColumnName("Creator_GamerChooseAgain");

                entity.Property(e => e.DdlGamer).HasColumnName("ddlGamer");

                entity.Property(e => e.InstanceIdGamerChooseAgain).HasColumnName("InstanceId_GamerChooseAgain");

                entity.Property(e => e.InstanceSridGamerChooseAgain).HasColumnName("InstanceSRId_GamerChooseAgain");

                entity.Property(e => e.IpGamerChooseAgain).HasColumnName("IP_GamerChooseAgain");

                entity.Property(e => e.RegistrationDateGamerChooseAgain).HasColumnName("RegistrationDate_GamerChooseAgain");

                entity.Property(e => e.RegistrationStatusGamerChooseAgain).HasColumnName("RegistrationStatus_GamerChooseAgain");

                entity.Property(e => e.RegistrationTimeGamerChooseAgain).HasColumnName("RegistrationTime_GamerChooseAgain");
            });

            modelBuilder.Entity<GamerReport>(entity =>
            {
                entity.Property(e => e.AuditStatusGamerReport).HasColumnName("AuditStatus_GamerReport");

                entity.Property(e => e.CreatorGamerReport).HasColumnName("Creator_GamerReport");

                entity.Property(e => e.DdlCause).HasColumnName("ddlCause");

                entity.Property(e => e.DdlGameSkills).HasColumnName("ddlGameSkills");

                entity.Property(e => e.DdlGameVangel).HasColumnName("ddlGameVAngel");

                entity.Property(e => e.DdlIsSource).HasColumnName("ddlIsSource");

                entity.Property(e => e.InstanceIdGamerReport).HasColumnName("InstanceId_GamerReport");

                entity.Property(e => e.InstanceSridGamerReport).HasColumnName("InstanceSRId_GamerReport");

                entity.Property(e => e.IpGamerReport).HasColumnName("IP_GamerReport");

                entity.Property(e => e.RegistrationDateGamerReport).HasColumnName("RegistrationDate_GamerReport");

                entity.Property(e => e.RegistrationStatusGamerReport).HasColumnName("RegistrationStatus_GamerReport");

                entity.Property(e => e.RegistrationTimeGamerReport).HasColumnName("RegistrationTime_GamerReport");

                entity.Property(e => e.TimeGameDuration).HasColumnName("timeGameDuration");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxaGameGoal).HasColumnName("txaGameGoal");
            });

            modelBuilder.Entity<GamerScoreInput>(entity =>
            {
                entity.Property(e => e.AuditStatusGamerScoreInput).HasColumnName("AuditStatus_GamerScoreInput");

                entity.Property(e => e.CreatorGamerScoreInput).HasColumnName("Creator_GamerScoreInput");

                entity.Property(e => e.DdlActionTime).HasColumnName("ddlActionTime");

                entity.Property(e => e.DdlAnom).HasColumnName("ddlAnom");

                entity.Property(e => e.DdlDokhan).HasColumnName("ddlDokhan");

                entity.Property(e => e.DdlEn).HasColumnName("ddlEn");

                entity.Property(e => e.DdlFear).HasColumnName("ddlFear");

                entity.Property(e => e.DdlFight).HasColumnName("ddlFight");

                entity.Property(e => e.DdlGostardegi).HasColumnName("ddlGostardegi");

                entity.Property(e => e.DdlNoHope).HasColumnName("ddlNoHope");

                entity.Property(e => e.DdlSabk).HasColumnName("ddlSabk");

                entity.Property(e => e.DdlTotalOp).HasColumnName("ddlTotalOp");

                entity.Property(e => e.InstanceIdGamerScoreInput).HasColumnName("InstanceId_GamerScoreInput");

                entity.Property(e => e.InstanceSridGamerScoreInput).HasColumnName("InstanceSRId_GamerScoreInput");

                entity.Property(e => e.IpGamerScoreInput).HasColumnName("IP_GamerScoreInput");

                entity.Property(e => e.RegistrationDateGamerScoreInput).HasColumnName("RegistrationDate_GamerScoreInput");

                entity.Property(e => e.RegistrationStatusGamerScoreInput).HasColumnName("RegistrationStatus_GamerScoreInput");

                entity.Property(e => e.RegistrationTimeGamerScoreInput).HasColumnName("RegistrationTime_GamerScoreInput");
            });

            modelBuilder.Entity<GamerSeenContent>(entity =>
            {
                entity.Property(e => e.AuditStatusGamerSeenContent).HasColumnName("AuditStatus_GamerSeenContent");

                entity.Property(e => e.CreatorGamerSeenContent).HasColumnName("Creator_GamerSeenContent");

                entity.Property(e => e.InstanceIdGamerSeenContent).HasColumnName("InstanceId_GamerSeenContent");

                entity.Property(e => e.InstanceSridGamerSeenContent).HasColumnName("InstanceSRId_GamerSeenContent");

                entity.Property(e => e.IpGamerSeenContent).HasColumnName("IP_GamerSeenContent");

                entity.Property(e => e.RegistrationDateGamerSeenContent).HasColumnName("RegistrationDate_GamerSeenContent");

                entity.Property(e => e.RegistrationStatusGamerSeenContent).HasColumnName("RegistrationStatus_GamerSeenContent");

                entity.Property(e => e.RegistrationTimeGamerSeenContent).HasColumnName("RegistrationTime_GamerSeenContent");
            });

            modelBuilder.Entity<GamersFullGameMovie>(entity =>
            {
                entity.Property(e => e.AuditStatusGamersFullGameMovie).HasColumnName("AuditStatus_GamersFullGameMovie");

                entity.Property(e => e.CreatorGamersFullGameMovie).HasColumnName("Creator_GamersFullGameMovie");

                entity.Property(e => e.InstanceIdGamersFullGameMovie).HasColumnName("InstanceId_GamersFullGameMovie");

                entity.Property(e => e.InstanceSridGamersFullGameMovie).HasColumnName("InstanceSRId_GamersFullGameMovie");

                entity.Property(e => e.IpGamersFullGameMovie).HasColumnName("IP_GamersFullGameMovie");

                entity.Property(e => e.RegistrationDateGamersFullGameMovie).HasColumnName("RegistrationDate_GamersFullGameMovie");

                entity.Property(e => e.RegistrationStatusGamersFullGameMovie).HasColumnName("RegistrationStatus_GamersFullGameMovie");

                entity.Property(e => e.RegistrationTimeGamersFullGameMovie).HasColumnName("RegistrationTime_GamersFullGameMovie");

                entity.Property(e => e.TxaTozih).HasColumnName("txaTozih");

                entity.Property(e => e.UplFilm).HasColumnName("uplFilm");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.GamersFullGameMovie)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_GamersFullMovie2_GamersFullGameMovie");
            });

            modelBuilder.Entity<GamersFullMovie2>(entity =>
            {
                entity.Property(e => e.AuditStatusGamersFullMovie2).HasColumnName("AuditStatus_GamersFullMovie2");

                entity.Property(e => e.CreatorGamersFullMovie2).HasColumnName("Creator_GamersFullMovie2");

                entity.Property(e => e.InstanceIdGamersFullMovie2).HasColumnName("InstanceId_GamersFullMovie2");

                entity.Property(e => e.InstanceSridGamersFullMovie2).HasColumnName("InstanceSRId_GamersFullMovie2");

                entity.Property(e => e.IpGamersFullMovie2).HasColumnName("IP_GamersFullMovie2");

                entity.Property(e => e.RegistrationDateGamersFullMovie2).HasColumnName("RegistrationDate_GamersFullMovie2");

                entity.Property(e => e.RegistrationStatusGamersFullMovie2).HasColumnName("RegistrationStatus_GamersFullMovie2");

                entity.Property(e => e.RegistrationTimeGamersFullMovie2).HasColumnName("RegistrationTime_GamersFullMovie2");
            });

            modelBuilder.Entity<GamerVideo>(entity =>
            {
                entity.Property(e => e.AuditStatusGamerVideo).HasColumnName("AuditStatus_GamerVideo");

                entity.Property(e => e.CreatorGamerVideo).HasColumnName("Creator_GamerVideo");

                entity.Property(e => e.InstanceIdGamerVideo).HasColumnName("InstanceId_GamerVideo");

                entity.Property(e => e.InstanceSridGamerVideo).HasColumnName("InstanceSRId_GamerVideo");

                entity.Property(e => e.IpGamerVideo).HasColumnName("IP_GamerVideo");

                entity.Property(e => e.RegistrationDateGamerVideo).HasColumnName("RegistrationDate_GamerVideo");

                entity.Property(e => e.RegistrationStatusGamerVideo).HasColumnName("RegistrationStatus_GamerVideo");

                entity.Property(e => e.RegistrationTimeGamerVideo).HasColumnName("RegistrationTime_GamerVideo");
            });

            modelBuilder.Entity<GamesGid>(entity =>
            {
                entity.ToTable("Games_GID");

                entity.Property(e => e.Gid)
                    .IsRequired()
                    .HasColumnName("GID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name");

                entity.Property(e => e.ProduceDate)
                    .HasColumnName("produceDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Producer)
                    .IsRequired()
                    .HasColumnName("producer")
                    .HasMaxLength(50);

                entity.Property(e => e.SecondName)
                    .IsRequired()
                    .HasColumnName("secondName");
            });

            modelBuilder.Entity<GamesIid>(entity =>
            {
                entity.ToTable("Games_IID");

                entity.Property(e => e.Gid)
                    .IsRequired()
                    .HasColumnName("GID");

                entity.Property(e => e.Iid)
                    .IsRequired()
                    .HasColumnName("IID");

                entity.Property(e => e.IsEditable)
                    .IsRequired()
                    .HasColumnName("isEditable")
                    .HasMaxLength(50);

                entity.Property(e => e.IsOriginal)
                    .IsRequired()
                    .HasColumnName("isOriginal")
                    .HasMaxLength(50);

                entity.Property(e => e.Platform)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GamesOid>(entity =>
            {
                entity.ToTable("Games_OID");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasColumnName("company");

                entity.Property(e => e.DownloadableSource).HasColumnName("downloadableSource");

                entity.Property(e => e.Genre)
                    .IsRequired()
                    .HasColumnName("genre");

                entity.Property(e => e.Gid)
                    .IsRequired()
                    .HasColumnName("GID");

                entity.Property(e => e.Iid)
                    .IsRequired()
                    .HasColumnName("IID");

                entity.Property(e => e.Oid)
                    .IsRequired()
                    .HasColumnName("OID");

                entity.Property(e => e.Plot)
                    .IsRequired()
                    .HasColumnName("plot")
                    .HasColumnType("ntext");

                entity.Property(e => e.ProductionDate).HasColumnType("datetime");

                entity.Property(e => e.SourceUrl)
                    .IsRequired()
                    .HasColumnName("SourceURL");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("version")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GameSourceConfirmation>(entity =>
            {
                entity.Property(e => e.AuditStatusGameSourceConfirmation).HasColumnName("AuditStatus_GameSourceConfirmation");

                entity.Property(e => e.CreatorGameSourceConfirmation).HasColumnName("Creator_GameSourceConfirmation");

                entity.Property(e => e.InstanceIdGameSourceConfirmation).HasColumnName("InstanceId_GameSourceConfirmation");

                entity.Property(e => e.InstanceSridGameSourceConfirmation).HasColumnName("InstanceSRId_GameSourceConfirmation");

                entity.Property(e => e.IpGameSourceConfirmation).HasColumnName("IP_GameSourceConfirmation");

                entity.Property(e => e.RegistrationDateGameSourceConfirmation).HasColumnName("RegistrationDate_GameSourceConfirmation");

                entity.Property(e => e.RegistrationStatusGameSourceConfirmation).HasColumnName("RegistrationStatus_GameSourceConfirmation");

                entity.Property(e => e.RegistrationTimeGameSourceConfirmation).HasColumnName("RegistrationTime_GameSourceConfirmation");
            });

            modelBuilder.Entity<GameStoryForm>(entity =>
            {
                entity.Property(e => e.AuditStatusGameStoryForm).HasColumnName("AuditStatus_GameStoryForm");

                entity.Property(e => e.CreatorGameStoryForm).HasColumnName("Creator_GameStoryForm");

                entity.Property(e => e.InstanceIdGameStoryForm).HasColumnName("InstanceId_GameStoryForm");

                entity.Property(e => e.InstanceSridGameStoryForm).HasColumnName("InstanceSRId_GameStoryForm");

                entity.Property(e => e.IpGameStoryForm).HasColumnName("IP_GameStoryForm");

                entity.Property(e => e.RegistrationDateGameStoryForm).HasColumnName("RegistrationDate_GameStoryForm");

                entity.Property(e => e.RegistrationStatusGameStoryForm).HasColumnName("RegistrationStatus_GameStoryForm");

                entity.Property(e => e.RegistrationTimeGameStoryForm).HasColumnName("RegistrationTime_GameStoryForm");

                entity.Property(e => e.TxaChekide).HasColumnName("txaChekide");

                entity.Property(e => e.TxaFull).HasColumnName("txaFull");
            });

            modelBuilder.Entity<GameTitleRegisterReq>(entity =>
            {
                entity.ToTable("gameTitleRegisterReq");

                entity.Property(e => e.AuditStatusGameTitleRegisterReq).HasColumnName("AuditStatus_gameTitleRegisterReq");

                entity.Property(e => e.CreatorGameTitleRegisterReq).HasColumnName("Creator_gameTitleRegisterReq");

                entity.Property(e => e.DdlOrgDecide).HasColumnName("ddlOrgDecide");

                entity.Property(e => e.InstanceIdGameTitleRegisterReq).HasColumnName("InstanceId_gameTitleRegisterReq");

                entity.Property(e => e.InstanceSridGameTitleRegisterReq).HasColumnName("InstanceSRId_gameTitleRegisterReq");

                entity.Property(e => e.IpGameTitleRegisterReq).HasColumnName("IP_gameTitleRegisterReq");

                entity.Property(e => e.RegistrationDateGameTitleRegisterReq).HasColumnName("RegistrationDate_gameTitleRegisterReq");

                entity.Property(e => e.RegistrationStatusGameTitleRegisterReq).HasColumnName("RegistrationStatus_gameTitleRegisterReq");

                entity.Property(e => e.RegistrationTimeGameTitleRegisterReq).HasColumnName("RegistrationTime_gameTitleRegisterReq");

                entity.Property(e => e.TxtCompanyName).HasColumnName("txtCompanyName");

                entity.Property(e => e.TxtFirstName).HasColumnName("txtFirstName");

                entity.Property(e => e.TxtSecondName).HasColumnName("txtSecondName");
            });

            modelBuilder.Entity<GameVersions>(entity =>
            {
                entity.ToTable("Game_Versions");

                entity.Property(e => e.DevelopeDate)
                    .HasColumnName("Develope_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Developer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Iid)
                    .IsRequired()
                    .HasColumnName("IID")
                    .HasMaxLength(50);

                entity.Property(e => e.Oid)
                    .IsRequired()
                    .HasColumnName("OID");

                entity.Property(e => e.SourceAddress)
                    .IsRequired()
                    .HasColumnName("Source_Address");

                entity.Property(e => e.SpecialName)
                    .IsRequired()
                    .HasColumnName("Special_name");
            });

            modelBuilder.Entity<GeneralSettings>(entity =>
            {
                entity.Property(e => e.AuthenticateTypes).HasDefaultValueSql("((0))");

                entity.Property(e => e.EmailSetting).HasDefaultValueSql("((0))");

                entity.Property(e => e.InstallDate).HasColumnType("datetime");

                entity.Property(e => e.LdapConnection).HasColumnName("LDAP_Connection");

                entity.Property(e => e.LdapPassword).HasColumnName("LDAP_Password");

                entity.Property(e => e.LdapUserName).HasColumnName("LDAP_UserName");

                entity.Property(e => e.RunDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<GenresList>(entity =>
            {
                entity.Property(e => e.AuditStatusGenresList).HasColumnName("AuditStatus_GenresList");

                entity.Property(e => e.CreatorGenresList).HasColumnName("Creator_GenresList");

                entity.Property(e => e.InstanceIdGenresList).HasColumnName("InstanceId_GenresList");

                entity.Property(e => e.InstanceSridGenresList).HasColumnName("InstanceSRId_GenresList");

                entity.Property(e => e.IpGenresList).HasColumnName("IP_GenresList");

                entity.Property(e => e.RegistrationDateGenresList).HasColumnName("RegistrationDate_GenresList");

                entity.Property(e => e.RegistrationStatusGenresList).HasColumnName("RegistrationStatus_GenresList");

                entity.Property(e => e.RegistrationTimeGenresList).HasColumnName("RegistrationTime_GenresList");

                entity.Property(e => e.TxtGenre).HasColumnName("txtGenre");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesAllocationGreenHologram>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_AllocationGreenHologram");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesAllocationGreenHologram).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_AllocationGreenHologram");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesAllocationGreenHologram).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_AllocationGreenHologram");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesAllocationGreenHologram).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_AllocationGreenHologram");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesAllocationGreenHologram).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_AllocationGreenHologram");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesAllocationGreenHologram).HasColumnName("IP_GetExclusiveHologramExclusiveGames_AllocationGreenHologram");

                entity.Property(e => e.NumFirstIssueAssignedHologram).HasColumnName("numFirstIssueAssignedHologram");

                entity.Property(e => e.NumGreenHologramsAssigned).HasColumnName("numGreenHologramsAssigned");

                entity.Property(e => e.NumLatestIssueAssignedHologram).HasColumnName("numLatestIssueAssignedHologram");

                entity.Property(e => e.PdateDateAllocationHologram).HasColumnName("pdateDateAllocationHologram");

                entity.Property(e => e.PdateDateAllocationHologramGregorian)
                    .HasColumnName("pdateDateAllocationHologram_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesAllocationGreenHologram).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_AllocationGreenHologram");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesAllocationGreenHologram).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_AllocationGreenHologram");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesAllocationGreenHologram).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_AllocationGreenHologram");

                entity.Property(e => e.UplDeliveryReceiptsToBazrassi).HasColumnName("uplDeliveryReceiptsToBazrassi");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesAnnouncingCost>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_AnnouncingCost");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesAnnouncingCost).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_AnnouncingCost");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesAnnouncingCost).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_AnnouncingCost");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesAnnouncingCost).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_AnnouncingCost");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesAnnouncingCost).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_AnnouncingCost");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesAnnouncingCost).HasColumnName("IP_GetExclusiveHologramExclusiveGames_AnnouncingCost");

                entity.Property(e => e.NumFeeRequested).HasColumnName("numFeeRequested");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesAnnouncingCost).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_AnnouncingCost");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesAnnouncingCost).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_AnnouncingCost");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesAnnouncingCost).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_AnnouncingCost");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesApplyItems>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_ApplyItems");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesApplyItems).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_ApplyItems");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesApplyItems).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_ApplyItems");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesApplyItems).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_ApplyItems");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesApplyItems).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_ApplyItems");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesApplyItems).HasColumnName("IP_GetExclusiveHologramExclusiveGames_ApplyItems");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesApplyItems).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_ApplyItems");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesApplyItems).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_ApplyItems");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesApplyItems).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_ApplyItems");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesApplyItemsSubForm>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_ApplyItems_SubForm");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesApplyItemsSubForm).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_ApplyItems_SubForm");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesApplyItemsSubForm).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_ApplyItems_SubForm");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesApplyItemsSubForm).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_ApplyItems_SubForm");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesApplyItemsSubForm).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_ApplyItems_SubForm");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesApplyItemsSubForm).HasColumnName("IP_GetExclusiveHologramExclusiveGames_ApplyItems_SubForm");

                entity.Property(e => e.NumGreenHologramRequested).HasColumnName("numGreenHologramRequested");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesApplyItemsSubForm).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_ApplyItems_SubForm");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesApplyItemsSubForm).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_ApplyItems_SubForm");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesApplyItemsSubForm).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_ApplyItems_SubForm");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_AttachmentDocumentationManagerBazrassi");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_AttachmentDocumentationManagerBazrassi");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_AttachmentDocumentationManagerBazrassi");

                entity.Property(e => e.DdlReasonNotAttaching).HasColumnName("ddlReasonNotAttaching");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_AttachmentDocumentationManagerBazrassi");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_AttachmentDocumentationManagerBazrassi");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi).HasColumnName("IP_GetExclusiveHologramExclusiveGames_AttachmentDocumentationManagerBazrassi");

                entity.Property(e => e.NumNumberGreenHolograms).HasColumnName("numNumberGreenHolograms");

                entity.Property(e => e.NumNumberGreenHologramsAttached).HasColumnName("numNumberGreenHologramsAttached");

                entity.Property(e => e.PdateGreenHologramSticker).HasColumnName("pdateGreenHologramSticker");

                entity.Property(e => e.PdateGreenHologramStickerGregorian)
                    .HasColumnName("pdateGreenHologramSticker_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_AttachmentDocumentationManagerBazrassi");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_AttachmentDocumentationManagerBazrassi");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesAttachmentDocumentationManagerBazrassi).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_AttachmentDocumentationManagerBazrassi");

                entity.Property(e => e.UplUploadPostingAttachingForm).HasColumnName("uplUploadPostingAttachingForm");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesCheckApplyingDeputy>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_CheckApplyingDeputy");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesCheckApplyingDeputy).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_CheckApplyingDeputy");

                entity.Property(e => e.AxtReasonForRefusal).HasColumnName("axtReasonForRefusal");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesCheckApplyingDeputy).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_CheckApplyingDeputy");

                entity.Property(e => e.DdlResultApplicationReview).HasColumnName("ddlResultApplicationReview");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesCheckApplyingDeputy).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_CheckApplyingDeputy");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesCheckApplyingDeputy).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_CheckApplyingDeputy");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesCheckApplyingDeputy).HasColumnName("IP_GetExclusiveHologramExclusiveGames_CheckApplyingDeputy");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesCheckApplyingDeputy).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_CheckApplyingDeputy");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesCheckApplyingDeputy).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_CheckApplyingDeputy");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesCheckApplyingDeputy).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_CheckApplyingDeputy");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesCheckPayingExpertSales>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_CheckPayingExpertSales");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesCheckPayingExpertSales).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_CheckPayingExpertSales");

                entity.Property(e => e.AxtInaccuratePayment).HasColumnName("axtInaccuratePayment");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesCheckPayingExpertSales).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_CheckPayingExpertSales");

                entity.Property(e => e.DdlDocumentationReview).HasColumnName("ddlDocumentationReview");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesCheckPayingExpertSales).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_CheckPayingExpertSales");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesCheckPayingExpertSales).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_CheckPayingExpertSales");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesCheckPayingExpertSales).HasColumnName("IP_GetExclusiveHologramExclusiveGames_CheckPayingExpertSales");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesCheckPayingExpertSales).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_CheckPayingExpertSales");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesCheckPayingExpertSales).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_CheckPayingExpertSales");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesCheckPayingExpertSales).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_CheckPayingExpertSales");

                entity.Property(e => e.UplFinancialDocumentation).HasColumnName("uplFinancialDocumentation");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesFinalFinancingManager>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_FinalFinancingManager");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesFinalFinancingManager).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_FinalFinancingManager");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesFinalFinancingManager).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_FinalFinancingManager");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesFinalFinancingManager).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_FinalFinancingManager");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesFinalFinancingManager).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_FinalFinancingManager");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesFinalFinancingManager).HasColumnName("IP_GetExclusiveHologramExclusiveGames_FinalFinancingManager");

                entity.Property(e => e.NumDeductionFromPublisherAccount).HasColumnName("numDeductionFromPublisherAccount");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesFinalFinancingManager).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_FinalFinancingManager");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesFinalFinancingManager).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_FinalFinancingManager");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesFinalFinancingManager).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_FinalFinancingManager");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesRecordRemainingHologram>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_RecordRemainingHologram");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesRecordRemainingHologram).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_RecordRemainingHologram");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesRecordRemainingHologram).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_RecordRemainingHologram");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesRecordRemainingHologram).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_RecordRemainingHologram");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesRecordRemainingHologram).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_RecordRemainingHologram");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesRecordRemainingHologram).HasColumnName("IP_GetExclusiveHologramExclusiveGames_RecordRemainingHologram");

                entity.Property(e => e.NumFirstRemainingHologram).HasColumnName("numFirstRemainingHologram");

                entity.Property(e => e.NumLastRemainingHologram).HasColumnName("numLastRemainingHologram");

                entity.Property(e => e.NumRemainingGreenHolograms).HasColumnName("numRemainingGreenHolograms");

                entity.Property(e => e.PdateReceiptRemainingHologram).HasColumnName("pdateReceiptRemainingHologram");

                entity.Property(e => e.PdateReceiptRemainingHologramGregorian)
                    .HasColumnName("pdateReceiptRemainingHologram_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesRecordRemainingHologram).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_RecordRemainingHologram");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesRecordRemainingHologram).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_RecordRemainingHologram");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesRecordRemainingHologram).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_RecordRemainingHologram");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesReviewAdminRequest>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_ReviewAdminRequest");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesReviewAdminRequest).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_ReviewAdminRequest");

                entity.Property(e => e.AxtActionOrder).HasColumnName("axtActionOrder");

                entity.Property(e => e.AxtReasonForRefusal).HasColumnName("axtReasonForRefusal");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesReviewAdminRequest).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_ReviewAdminRequest");

                entity.Property(e => e.DdlResultApplicationReview).HasColumnName("ddlResultApplicationReview");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesReviewAdminRequest).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_ReviewAdminRequest");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesReviewAdminRequest).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_ReviewAdminRequest");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesReviewAdminRequest).HasColumnName("IP_GetExclusiveHologramExclusiveGames_ReviewAdminRequest");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesReviewAdminRequest).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_ReviewAdminRequest");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesReviewAdminRequest).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_ReviewAdminRequest");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesReviewAdminRequest).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_ReviewAdminRequest");
            });

            modelBuilder.Entity<GetExclusiveHologramExclusiveGamesUploadDocumentationFee>(entity =>
            {
                entity.ToTable("GetExclusiveHologramExclusiveGames_UploadDocumentationFee");

                entity.Property(e => e.AuditStatusGetExclusiveHologramExclusiveGamesUploadDocumentationFee).HasColumnName("AuditStatus_GetExclusiveHologramExclusiveGames_UploadDocumentationFee");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorGetExclusiveHologramExclusiveGamesUploadDocumentationFee).HasColumnName("Creator_GetExclusiveHologramExclusiveGames_UploadDocumentationFee");

                entity.Property(e => e.InstanceIdGetExclusiveHologramExclusiveGamesUploadDocumentationFee).HasColumnName("InstanceId_GetExclusiveHologramExclusiveGames_UploadDocumentationFee");

                entity.Property(e => e.InstanceSridGetExclusiveHologramExclusiveGamesUploadDocumentationFee).HasColumnName("InstanceSRId_GetExclusiveHologramExclusiveGames_UploadDocumentationFee");

                entity.Property(e => e.IpGetExclusiveHologramExclusiveGamesUploadDocumentationFee).HasColumnName("IP_GetExclusiveHologramExclusiveGames_UploadDocumentationFee");

                entity.Property(e => e.RegistrationDateGetExclusiveHologramExclusiveGamesUploadDocumentationFee).HasColumnName("RegistrationDate_GetExclusiveHologramExclusiveGames_UploadDocumentationFee");

                entity.Property(e => e.RegistrationStatusGetExclusiveHologramExclusiveGamesUploadDocumentationFee).HasColumnName("RegistrationStatus_GetExclusiveHologramExclusiveGames_UploadDocumentationFee");

                entity.Property(e => e.RegistrationTimeGetExclusiveHologramExclusiveGamesUploadDocumentationFee).HasColumnName("RegistrationTime_GetExclusiveHologramExclusiveGames_UploadDocumentationFee");

                entity.Property(e => e.UplPaidPluginImage).HasColumnName("uplPaidPluginImage");
            });

            modelBuilder.Entity<GetSource>(entity =>
            {
                entity.ToTable("get_source");

                entity.Property(e => e.AuditStatusGetSource).HasColumnName("AuditStatus_get_source");

                entity.Property(e => e.CreatorGetSource).HasColumnName("Creator_get_source");

                entity.Property(e => e.DdlSourceEtype).HasColumnName("ddlSourceEType");

                entity.Property(e => e.DdlSourceType).HasColumnName("ddlSourceType");

                entity.Property(e => e.InstanceIdGetSource).HasColumnName("InstanceId_get_source");

                entity.Property(e => e.InstanceSridGetSource).HasColumnName("InstanceSRId_get_source");

                entity.Property(e => e.IpGetSource).HasColumnName("IP_get_source");

                entity.Property(e => e.RegistrationDateGetSource).HasColumnName("RegistrationDate_get_source");

                entity.Property(e => e.RegistrationStatusGetSource).HasColumnName("RegistrationStatus_get_source");

                entity.Property(e => e.RegistrationTimeGetSource).HasColumnName("RegistrationTime_get_source");

                entity.Property(e => e.TxtDate).HasColumnName("txtDate");

                entity.Property(e => e.TxtDateGregorian)
                    .HasColumnName("txtDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.TxtGameName).HasColumnName("txtGameName");

                entity.Property(e => e.TxtPublisher).HasColumnName("txtPublisher");
            });

            modelBuilder.Entity<GreenHologramApplyItems>(entity =>
            {
                entity.ToTable("GreenHologram_ApplyItems");

                entity.Property(e => e.AuditStatusGreenHologramApplyItems).HasColumnName("AuditStatus_GreenHologram_ApplyItems");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorGreenHologramApplyItems).HasColumnName("Creator_GreenHologram_ApplyItems");

                entity.Property(e => e.InstanceIdGreenHologramApplyItems).HasColumnName("InstanceId_GreenHologram_ApplyItems");

                entity.Property(e => e.InstanceSridGreenHologramApplyItems).HasColumnName("InstanceSRId_GreenHologram_ApplyItems");

                entity.Property(e => e.IpGreenHologramApplyItems).HasColumnName("IP_GreenHologram_ApplyItems");

                entity.Property(e => e.RegistrationDateGreenHologramApplyItems).HasColumnName("RegistrationDate_GreenHologram_ApplyItems");

                entity.Property(e => e.RegistrationStatusGreenHologramApplyItems).HasColumnName("RegistrationStatus_GreenHologram_ApplyItems");

                entity.Property(e => e.RegistrationTimeGreenHologramApplyItems).HasColumnName("RegistrationTime_GreenHologram_ApplyItems");

                entity.Property(e => e.TxtRequestTitle).HasColumnName("txtRequestTitle");
            });

            modelBuilder.Entity<GreenHologramApplyItemsSubForm>(entity =>
            {
                entity.ToTable("GreenHologram_ApplyItems_SubForm");

                entity.Property(e => e.AuditStatusGreenHologramApplyItemsSubForm).HasColumnName("AuditStatus_GreenHologram_ApplyItems_SubForm");

                entity.Property(e => e.CreatorGreenHologramApplyItemsSubForm).HasColumnName("Creator_GreenHologram_ApplyItems_SubForm");

                entity.Property(e => e.InstanceIdGreenHologramApplyItemsSubForm).HasColumnName("InstanceId_GreenHologram_ApplyItems_SubForm");

                entity.Property(e => e.InstanceSridGreenHologramApplyItemsSubForm).HasColumnName("InstanceSRId_GreenHologram_ApplyItems_SubForm");

                entity.Property(e => e.IpGreenHologramApplyItemsSubForm).HasColumnName("IP_GreenHologram_ApplyItems_SubForm");

                entity.Property(e => e.NumNumberHolograms).HasColumnName("numNumberHolograms");

                entity.Property(e => e.RegistrationDateGreenHologramApplyItemsSubForm).HasColumnName("RegistrationDate_GreenHologram_ApplyItems_SubForm");

                entity.Property(e => e.RegistrationStatusGreenHologramApplyItemsSubForm).HasColumnName("RegistrationStatus_GreenHologram_ApplyItems_SubForm");

                entity.Property(e => e.RegistrationTimeGreenHologramApplyItemsSubForm).HasColumnName("RegistrationTime_GreenHologram_ApplyItems_SubForm");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.GreenHologramApplyItemsSubForm)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_GreenHologram_ApplyItems_GreenHologram_ApplyItems_SubForm");
            });

            modelBuilder.Entity<GreenHologramAttachmentDocumentation>(entity =>
            {
                entity.ToTable("GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.AuditStatusGreenHologramAttachmentDocumentation).HasColumnName("AuditStatus_GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorGreenHologramAttachmentDocumentation).HasColumnName("Creator_GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.DdlReasonNotAttaching).HasColumnName("ddlReasonNotAttaching");

                entity.Property(e => e.InstanceIdGreenHologramAttachmentDocumentation).HasColumnName("InstanceId_GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.InstanceSridGreenHologramAttachmentDocumentation).HasColumnName("InstanceSRId_GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.IpGreenHologramAttachmentDocumentation).HasColumnName("IP_GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.NumHologramAttached).HasColumnName("numHologramAttached");

                entity.Property(e => e.NumHologramRemaining).HasColumnName("numHologramRemaining");

                entity.Property(e => e.PdateAttachDate).HasColumnName("pdateAttachDate");

                entity.Property(e => e.PdateAttachDateGregorian)
                    .HasColumnName("pdateAttachDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateGreenHologramAttachmentDocumentation).HasColumnName("RegistrationDate_GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.RegistrationStatusGreenHologramAttachmentDocumentation).HasColumnName("RegistrationStatus_GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.RegistrationTimeGreenHologramAttachmentDocumentation).HasColumnName("RegistrationTime_GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.UplUploadForm).HasColumnName("uplUploadForm");
            });

            modelBuilder.Entity<GreenHologramDeclareFee>(entity =>
            {
                entity.ToTable("GreenHologram_DeclareFee");

                entity.Property(e => e.AuditStatusGreenHologramDeclareFee).HasColumnName("AuditStatus_GreenHologram_DeclareFee");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorGreenHologramDeclareFee).HasColumnName("Creator_GreenHologram_DeclareFee");

                entity.Property(e => e.InstanceIdGreenHologramDeclareFee).HasColumnName("InstanceId_GreenHologram_DeclareFee");

                entity.Property(e => e.InstanceSridGreenHologramDeclareFee).HasColumnName("InstanceSRId_GreenHologram_DeclareFee");

                entity.Property(e => e.IpGreenHologramDeclareFee).HasColumnName("IP_GreenHologram_DeclareFee");

                entity.Property(e => e.NumFeeRequested).HasColumnName("numFeeRequested");

                entity.Property(e => e.RegistrationDateGreenHologramDeclareFee).HasColumnName("RegistrationDate_GreenHologram_DeclareFee");

                entity.Property(e => e.RegistrationStatusGreenHologramDeclareFee).HasColumnName("RegistrationStatus_GreenHologram_DeclareFee");

                entity.Property(e => e.RegistrationTimeGreenHologramDeclareFee).HasColumnName("RegistrationTime_GreenHologram_DeclareFee");
            });

            modelBuilder.Entity<GreenHologramFinalFinancingManager>(entity =>
            {
                entity.ToTable("GreenHologram_FinalFinancingManager");

                entity.Property(e => e.AuditStatusGreenHologramFinalFinancingManager).HasColumnName("AuditStatus_GreenHologram_FinalFinancingManager");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorGreenHologramFinalFinancingManager).HasColumnName("Creator_GreenHologram_FinalFinancingManager");

                entity.Property(e => e.InstanceIdGreenHologramFinalFinancingManager).HasColumnName("InstanceId_GreenHologram_FinalFinancingManager");

                entity.Property(e => e.InstanceSridGreenHologramFinalFinancingManager).HasColumnName("InstanceSRId_GreenHologram_FinalFinancingManager");

                entity.Property(e => e.IpGreenHologramFinalFinancingManager).HasColumnName("IP_GreenHologram_FinalFinancingManager");

                entity.Property(e => e.NumHologramApproved).HasColumnName("numHologramApproved");

                entity.Property(e => e.RegistrationDateGreenHologramFinalFinancingManager).HasColumnName("RegistrationDate_GreenHologram_FinalFinancingManager");

                entity.Property(e => e.RegistrationStatusGreenHologramFinalFinancingManager).HasColumnName("RegistrationStatus_GreenHologram_FinalFinancingManager");

                entity.Property(e => e.RegistrationTimeGreenHologramFinalFinancingManager).HasColumnName("RegistrationTime_GreenHologram_FinalFinancingManager");
            });

            modelBuilder.Entity<GreenHologramHologramAssignment>(entity =>
            {
                entity.ToTable("GreenHologram_HologramAssignment");

                entity.Property(e => e.AuditStatusGreenHologramHologramAssignment).HasColumnName("AuditStatus_GreenHologram_HologramAssignment");

                entity.Property(e => e.CreatorGreenHologramHologramAssignment).HasColumnName("Creator_GreenHologram_HologramAssignment");

                entity.Property(e => e.InstanceIdGreenHologramHologramAssignment).HasColumnName("InstanceId_GreenHologram_HologramAssignment");

                entity.Property(e => e.InstanceSridGreenHologramHologramAssignment).HasColumnName("InstanceSRId_GreenHologram_HologramAssignment");

                entity.Property(e => e.IpGreenHologramHologramAssignment).HasColumnName("IP_GreenHologram_HologramAssignment");

                entity.Property(e => e.NumFirstNumber).HasColumnName("numFirstNumber");

                entity.Property(e => e.NumLastNumber).HasColumnName("numLastNumber");

                entity.Property(e => e.NumNumberAssignments).HasColumnName("numNumberAssignments");

                entity.Property(e => e.PdateAllocationDate).HasColumnName("pdateAllocationDate");

                entity.Property(e => e.PdateAllocationDateGregorian)
                    .HasColumnName("pdateAllocationDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateGreenHologramHologramAssignment).HasColumnName("RegistrationDate_GreenHologram_HologramAssignment");

                entity.Property(e => e.RegistrationStatusGreenHologramHologramAssignment).HasColumnName("RegistrationStatus_GreenHologram_HologramAssignment");

                entity.Property(e => e.RegistrationTimeGreenHologramHologramAssignment).HasColumnName("RegistrationTime_GreenHologram_HologramAssignment");

                entity.Property(e => e.UplUploadedReceipt).HasColumnName("uplUploadedReceipt");
            });

            modelBuilder.Entity<GreenHologramRecordRemaining>(entity =>
            {
                entity.ToTable("GreenHologram_RecordRemaining");

                entity.Property(e => e.AuditStatusGreenHologramRecordRemaining).HasColumnName("AuditStatus_GreenHologram_RecordRemaining");

                entity.Property(e => e.CreatorGreenHologramRecordRemaining).HasColumnName("Creator_GreenHologram_RecordRemaining");

                entity.Property(e => e.InstanceIdGreenHologramRecordRemaining).HasColumnName("InstanceId_GreenHologram_RecordRemaining");

                entity.Property(e => e.InstanceSridGreenHologramRecordRemaining).HasColumnName("InstanceSRId_GreenHologram_RecordRemaining");

                entity.Property(e => e.IpGreenHologramRecordRemaining).HasColumnName("IP_GreenHologram_RecordRemaining");

                entity.Property(e => e.NumFirstNumber).HasColumnName("numFirstNumber");

                entity.Property(e => e.NumLastNumber).HasColumnName("numLastNumber");

                entity.Property(e => e.NumRemainingHologram).HasColumnName("numRemainingHologram");

                entity.Property(e => e.PdateDateReceived).HasColumnName("pdateDateReceived");

                entity.Property(e => e.PdateDateReceivedGregorian)
                    .HasColumnName("pdateDateReceived_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateGreenHologramRecordRemaining).HasColumnName("RegistrationDate_GreenHologram_RecordRemaining");

                entity.Property(e => e.RegistrationStatusGreenHologramRecordRemaining).HasColumnName("RegistrationStatus_GreenHologram_RecordRemaining");

                entity.Property(e => e.RegistrationTimeGreenHologramRecordRemaining).HasColumnName("RegistrationTime_GreenHologram_RecordRemaining");
            });

            modelBuilder.Entity<GreenHologramRequestReview>(entity =>
            {
                entity.ToTable("GreenHologram_RequestReview");

                entity.Property(e => e.AuditStatusGreenHologramRequestReview).HasColumnName("AuditStatus_GreenHologram_RequestReview");

                entity.Property(e => e.CreatorGreenHologramRequestReview).HasColumnName("Creator_GreenHologram_RequestReview");

                entity.Property(e => e.DdlResultReview).HasColumnName("ddlResultReview");

                entity.Property(e => e.InstanceIdGreenHologramRequestReview).HasColumnName("InstanceId_GreenHologram_RequestReview");

                entity.Property(e => e.InstanceSridGreenHologramRequestReview).HasColumnName("InstanceSRId_GreenHologram_RequestReview");

                entity.Property(e => e.IpGreenHologramRequestReview).HasColumnName("IP_GreenHologram_RequestReview");

                entity.Property(e => e.RegistrationDateGreenHologramRequestReview).HasColumnName("RegistrationDate_GreenHologram_RequestReview");

                entity.Property(e => e.RegistrationStatusGreenHologramRequestReview).HasColumnName("RegistrationStatus_GreenHologram_RequestReview");

                entity.Property(e => e.RegistrationTimeGreenHologramRequestReview).HasColumnName("RegistrationTime_GreenHologram_RequestReview");
            });

            modelBuilder.Entity<GreenHologramReviewDeputyFinancial>(entity =>
            {
                entity.ToTable("GreenHologram_ReviewDeputyFinancial");

                entity.Property(e => e.AuditStatusGreenHologramReviewDeputyFinancial).HasColumnName("AuditStatus_GreenHologram_ReviewDeputyFinancial");

                entity.Property(e => e.AxtReasonRefusal).HasColumnName("axtReasonRefusal");

                entity.Property(e => e.CreatorGreenHologramReviewDeputyFinancial).HasColumnName("Creator_GreenHologram_ReviewDeputyFinancial");

                entity.Property(e => e.DdlResultReview).HasColumnName("ddlResultReview");

                entity.Property(e => e.InstanceIdGreenHologramReviewDeputyFinancial).HasColumnName("InstanceId_GreenHologram_ReviewDeputyFinancial");

                entity.Property(e => e.InstanceSridGreenHologramReviewDeputyFinancial).HasColumnName("InstanceSRId_GreenHologram_ReviewDeputyFinancial");

                entity.Property(e => e.IpGreenHologramReviewDeputyFinancial).HasColumnName("IP_GreenHologram_ReviewDeputyFinancial");

                entity.Property(e => e.RegistrationDateGreenHologramReviewDeputyFinancial).HasColumnName("RegistrationDate_GreenHologram_ReviewDeputyFinancial");

                entity.Property(e => e.RegistrationStatusGreenHologramReviewDeputyFinancial).HasColumnName("RegistrationStatus_GreenHologram_ReviewDeputyFinancial");

                entity.Property(e => e.RegistrationTimeGreenHologramReviewDeputyFinancial).HasColumnName("RegistrationTime_GreenHologram_ReviewDeputyFinancial");
            });

            modelBuilder.Entity<GreenHologramReviewFinancialRequest>(entity =>
            {
                entity.ToTable("GreenHologram_ReviewFinancialRequest");

                entity.Property(e => e.AuditStatusGreenHologramReviewFinancialRequest).HasColumnName("AuditStatus_GreenHologram_ReviewFinancialRequest");

                entity.Property(e => e.AxtActionOrder).HasColumnName("axtActionOrder");

                entity.Property(e => e.AxtReasonRefusal).HasColumnName("axtReasonRefusal");

                entity.Property(e => e.CreatorGreenHologramReviewFinancialRequest).HasColumnName("Creator_GreenHologram_ReviewFinancialRequest");

                entity.Property(e => e.DdlResultReview).HasColumnName("ddlResultReview");

                entity.Property(e => e.InstanceIdGreenHologramReviewFinancialRequest).HasColumnName("InstanceId_GreenHologram_ReviewFinancialRequest");

                entity.Property(e => e.InstanceSridGreenHologramReviewFinancialRequest).HasColumnName("InstanceSRId_GreenHologram_ReviewFinancialRequest");

                entity.Property(e => e.IpGreenHologramReviewFinancialRequest).HasColumnName("IP_GreenHologram_ReviewFinancialRequest");

                entity.Property(e => e.RegistrationDateGreenHologramReviewFinancialRequest).HasColumnName("RegistrationDate_GreenHologram_ReviewFinancialRequest");

                entity.Property(e => e.RegistrationStatusGreenHologramReviewFinancialRequest).HasColumnName("RegistrationStatus_GreenHologram_ReviewFinancialRequest");

                entity.Property(e => e.RegistrationTimeGreenHologramReviewFinancialRequest).HasColumnName("RegistrationTime_GreenHologram_ReviewFinancialRequest");
            });

            modelBuilder.Entity<GreenHologramSalesExpert>(entity =>
            {
                entity.ToTable("GreenHologram_SalesExpert");

                entity.Property(e => e.AuditStatusGreenHologramSalesExpert).HasColumnName("AuditStatus_GreenHologram_SalesExpert");

                entity.Property(e => e.AxtAnnouncementInaccuracies).HasColumnName("axtAnnouncementInaccuracies");

                entity.Property(e => e.CreatorGreenHologramSalesExpert).HasColumnName("Creator_GreenHologram_SalesExpert");

                entity.Property(e => e.DdlDocumentationReview).HasColumnName("ddlDocumentationReview");

                entity.Property(e => e.InstanceIdGreenHologramSalesExpert).HasColumnName("InstanceId_GreenHologram_SalesExpert");

                entity.Property(e => e.InstanceSridGreenHologramSalesExpert).HasColumnName("InstanceSRId_GreenHologram_SalesExpert");

                entity.Property(e => e.IpGreenHologramSalesExpert).HasColumnName("IP_GreenHologram_SalesExpert");

                entity.Property(e => e.RegistrationDateGreenHologramSalesExpert).HasColumnName("RegistrationDate_GreenHologram_SalesExpert");

                entity.Property(e => e.RegistrationStatusGreenHologramSalesExpert).HasColumnName("RegistrationStatus_GreenHologram_SalesExpert");

                entity.Property(e => e.RegistrationTimeGreenHologramSalesExpert).HasColumnName("RegistrationTime_GreenHologram_SalesExpert");

                entity.Property(e => e.UplUploadDocumentation).HasColumnName("uplUploadDocumentation");
            });

            modelBuilder.Entity<GreenHologramUploadDocumentation>(entity =>
            {
                entity.ToTable("GreenHologram_UploadDocumentation");

                entity.Property(e => e.AuditStatusGreenHologramUploadDocumentation).HasColumnName("AuditStatus_GreenHologram_UploadDocumentation");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorGreenHologramUploadDocumentation).HasColumnName("Creator_GreenHologram_UploadDocumentation");

                entity.Property(e => e.InstanceIdGreenHologramUploadDocumentation).HasColumnName("InstanceId_GreenHologram_UploadDocumentation");

                entity.Property(e => e.InstanceSridGreenHologramUploadDocumentation).HasColumnName("InstanceSRId_GreenHologram_UploadDocumentation");

                entity.Property(e => e.IpGreenHologramUploadDocumentation).HasColumnName("IP_GreenHologram_UploadDocumentation");

                entity.Property(e => e.RegistrationDateGreenHologramUploadDocumentation).HasColumnName("RegistrationDate_GreenHologram_UploadDocumentation");

                entity.Property(e => e.RegistrationStatusGreenHologramUploadDocumentation).HasColumnName("RegistrationStatus_GreenHologram_UploadDocumentation");

                entity.Property(e => e.RegistrationTimeGreenHologramUploadDocumentation).HasColumnName("RegistrationTime_GreenHologram_UploadDocumentation");

                entity.Property(e => e.UplUploadImage).HasColumnName("uplUploadImage");
            });

            modelBuilder.Entity<GtblTest>(entity =>
            {
                entity.ToTable("gtblTest");

                entity.Property(e => e.AuditStatusGtblTest).HasColumnName("AuditStatus_gtblTest");

                entity.Property(e => e.CreatorGtblTest).HasColumnName("Creator_gtblTest");

                entity.Property(e => e.InstanceIdGtblTest).HasColumnName("InstanceId_gtblTest");

                entity.Property(e => e.InstanceSridGtblTest).HasColumnName("InstanceSRId_gtblTest");

                entity.Property(e => e.IpGtblTest).HasColumnName("IP_gtblTest");

                entity.Property(e => e.RegistrationDateGtblTest).HasColumnName("RegistrationDate_gtblTest");

                entity.Property(e => e.RegistrationStatusGtblTest).HasColumnName("RegistrationStatus_gtblTest");

                entity.Property(e => e.RegistrationTimeGtblTest).HasColumnName("RegistrationTime_gtblTest");
            });

            modelBuilder.Entity<Hbltestform1>(entity =>
            {
                entity.ToTable("hbltestform1");

                entity.Property(e => e.AuditStatusHbltestform1).HasColumnName("AuditStatus_hbltestform1");

                entity.Property(e => e.CreatorHbltestform1).HasColumnName("Creator_hbltestform1");

                entity.Property(e => e.DdlDtest).HasColumnName("ddlDtest");

                entity.Property(e => e.InstanceIdHbltestform1).HasColumnName("InstanceId_hbltestform1");

                entity.Property(e => e.InstanceSridHbltestform1).HasColumnName("InstanceSRId_hbltestform1");

                entity.Property(e => e.IpHbltestform1).HasColumnName("IP_hbltestform1");

                entity.Property(e => e.RegistrationDateHbltestform1).HasColumnName("RegistrationDate_hbltestform1");

                entity.Property(e => e.RegistrationStatusHbltestform1).HasColumnName("RegistrationStatus_hbltestform1");

                entity.Property(e => e.RegistrationTimeHbltestform1).HasColumnName("RegistrationTime_hbltestform1");
            });

            modelBuilder.Entity<HoldingDisseminationMeetingDissemination>(entity =>
            {
                entity.ToTable("HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.AuditStatusHoldingDisseminationMeetingDissemination).HasColumnName("AuditStatus_HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.CreatorHoldingDisseminationMeetingDissemination).HasColumnName("Creator_HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.InstanceIdHoldingDisseminationMeetingDissemination).HasColumnName("InstanceId_HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.InstanceSridHoldingDisseminationMeetingDissemination).HasColumnName("InstanceSRId_HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.IpHoldingDisseminationMeetingDissemination).HasColumnName("IP_HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.RegistrationDateHoldingDisseminationMeetingDissemination).HasColumnName("RegistrationDate_HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.RegistrationStatusHoldingDisseminationMeetingDissemination).HasColumnName("RegistrationStatus_HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.RegistrationTimeHoldingDisseminationMeetingDissemination).HasColumnName("RegistrationTime_HoldingDissemination_MeetingDissemination");
            });

            modelBuilder.Entity<HoldingDisseminationRecordResults>(entity =>
            {
                entity.ToTable("HoldingDissemination_RecordResults");

                entity.Property(e => e.AuditStatusHoldingDisseminationRecordResults).HasColumnName("AuditStatus_HoldingDissemination_RecordResults");

                entity.Property(e => e.CreatorHoldingDisseminationRecordResults).HasColumnName("Creator_HoldingDissemination_RecordResults");

                entity.Property(e => e.InstanceIdHoldingDisseminationRecordResults).HasColumnName("InstanceId_HoldingDissemination_RecordResults");

                entity.Property(e => e.InstanceSridHoldingDisseminationRecordResults).HasColumnName("InstanceSRId_HoldingDissemination_RecordResults");

                entity.Property(e => e.IpHoldingDisseminationRecordResults).HasColumnName("IP_HoldingDissemination_RecordResults");

                entity.Property(e => e.PdateMeetingDate).HasColumnName("pdateMeetingDate");

                entity.Property(e => e.PdateMeetingDateGregorian)
                    .HasColumnName("pdateMeetingDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateHoldingDisseminationRecordResults).HasColumnName("RegistrationDate_HoldingDissemination_RecordResults");

                entity.Property(e => e.RegistrationStatusHoldingDisseminationRecordResults).HasColumnName("RegistrationStatus_HoldingDissemination_RecordResults");

                entity.Property(e => e.RegistrationTimeHoldingDisseminationRecordResults).HasColumnName("RegistrationTime_HoldingDissemination_RecordResults");

                entity.Property(e => e.UplUploadMinutes).HasColumnName("uplUploadMinutes");
            });

            modelBuilder.Entity<HoldingDisseminationRecordResultsSubForm>(entity =>
            {
                entity.ToTable("HoldingDissemination_RecordResults_SubForm");

                entity.Property(e => e.AuditStatusHoldingDisseminationRecordResultsSubForm).HasColumnName("AuditStatus_HoldingDissemination_RecordResults_SubForm");

                entity.Property(e => e.CreatorHoldingDisseminationRecordResultsSubForm).HasColumnName("Creator_HoldingDissemination_RecordResults_SubForm");

                entity.Property(e => e.DdlItemName).HasColumnName("ddlItemName");

                entity.Property(e => e.DdlNameAndIdpublisher).HasColumnName("ddlNameAndIDPublisher");

                entity.Property(e => e.InstanceIdHoldingDisseminationRecordResultsSubForm).HasColumnName("InstanceId_HoldingDissemination_RecordResults_SubForm");

                entity.Property(e => e.InstanceSridHoldingDisseminationRecordResultsSubForm).HasColumnName("InstanceSRId_HoldingDissemination_RecordResults_SubForm");

                entity.Property(e => e.IpHoldingDisseminationRecordResultsSubForm).HasColumnName("IP_HoldingDissemination_RecordResults_SubForm");

                entity.Property(e => e.NumNumberHologramsRecorded).HasColumnName("numNumberHologramsRecorded");

                entity.Property(e => e.RegistrationDateHoldingDisseminationRecordResultsSubForm).HasColumnName("RegistrationDate_HoldingDissemination_RecordResults_SubForm");

                entity.Property(e => e.RegistrationStatusHoldingDisseminationRecordResultsSubForm).HasColumnName("RegistrationStatus_HoldingDissemination_RecordResults_SubForm");

                entity.Property(e => e.RegistrationTimeHoldingDisseminationRecordResultsSubForm).HasColumnName("RegistrationTime_HoldingDissemination_RecordResults_SubForm");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.HoldingDisseminationRecordResultsSubForm)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HoldingDissemination_RecordResults_HoldingDissemination_RecordResults_SubForm");
            });

            modelBuilder.Entity<HologramAttachmentCheckingCostAttachment>(entity =>
            {
                entity.ToTable("HologramAttachment_CheckingCostAttachment");

                entity.Property(e => e.AuditStatusHologramAttachmentCheckingCostAttachment).HasColumnName("AuditStatus_HologramAttachment_CheckingCostAttachment");

                entity.Property(e => e.AxtRequirementsCorrection).HasColumnName("axtRequirementsCorrection");

                entity.Property(e => e.CreatorHologramAttachmentCheckingCostAttachment).HasColumnName("Creator_HologramAttachment_CheckingCostAttachment");

                entity.Property(e => e.InstanceIdHologramAttachmentCheckingCostAttachment).HasColumnName("InstanceId_HologramAttachment_CheckingCostAttachment");

                entity.Property(e => e.InstanceSridHologramAttachmentCheckingCostAttachment).HasColumnName("InstanceSRId_HologramAttachment_CheckingCostAttachment");

                entity.Property(e => e.IpHologramAttachmentCheckingCostAttachment).HasColumnName("IP_HologramAttachment_CheckingCostAttachment");

                entity.Property(e => e.RegistrationDateHologramAttachmentCheckingCostAttachment).HasColumnName("RegistrationDate_HologramAttachment_CheckingCostAttachment");

                entity.Property(e => e.RegistrationStatusHologramAttachmentCheckingCostAttachment).HasColumnName("RegistrationStatus_HologramAttachment_CheckingCostAttachment");

                entity.Property(e => e.RegistrationTimeHologramAttachmentCheckingCostAttachment).HasColumnName("RegistrationTime_HologramAttachment_CheckingCostAttachment");
            });

            modelBuilder.Entity<HologramAttachmentCostAttachment>(entity =>
            {
                entity.ToTable("HologramAttachment_CostAttachment");

                entity.Property(e => e.AuditStatusHologramAttachmentCostAttachment).HasColumnName("AuditStatus_HologramAttachment_CostAttachment");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorHologramAttachmentCostAttachment).HasColumnName("Creator_HologramAttachment_CostAttachment");

                entity.Property(e => e.InstanceIdHologramAttachmentCostAttachment).HasColumnName("InstanceId_HologramAttachment_CostAttachment");

                entity.Property(e => e.InstanceSridHologramAttachmentCostAttachment).HasColumnName("InstanceSRId_HologramAttachment_CostAttachment");

                entity.Property(e => e.IpHologramAttachmentCostAttachment).HasColumnName("IP_HologramAttachment_CostAttachment");

                entity.Property(e => e.NumCostAttachment).HasColumnName("numCostAttachment");

                entity.Property(e => e.RegistrationDateHologramAttachmentCostAttachment).HasColumnName("RegistrationDate_HologramAttachment_CostAttachment");

                entity.Property(e => e.RegistrationStatusHologramAttachmentCostAttachment).HasColumnName("RegistrationStatus_HologramAttachment_CostAttachment");

                entity.Property(e => e.RegistrationTimeHologramAttachmentCostAttachment).HasColumnName("RegistrationTime_HologramAttachment_CostAttachment");

                entity.Property(e => e.UplFractionDocumentation).HasColumnName("uplFractionDocumentation");

                entity.Property(e => e.UplFractionalScore).HasColumnName("uplFractionalScore");
            });

            modelBuilder.Entity<HologramAttachmentHologramAttachmentRequest>(entity =>
            {
                entity.ToTable("HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.AuditStatusHologramAttachmentHologramAttachmentRequest).HasColumnName("AuditStatus_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.CreatorHologramAttachmentHologramAttachmentRequest).HasColumnName("Creator_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.InstanceIdHologramAttachmentHologramAttachmentRequest).HasColumnName("InstanceId_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.InstanceSridHologramAttachmentHologramAttachmentRequest).HasColumnName("InstanceSRId_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.IpHologramAttachmentHologramAttachmentRequest).HasColumnName("IP_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.RegistrationDateHologramAttachmentHologramAttachmentRequest).HasColumnName("RegistrationDate_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.RegistrationStatusHologramAttachmentHologramAttachmentRequest).HasColumnName("RegistrationStatus_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.RegistrationTimeHologramAttachmentHologramAttachmentRequest).HasColumnName("RegistrationTime_HologramAttachment_HologramAttachmentRequest");
            });

            modelBuilder.Entity<HologramAttachmentHologramAttachmentRequestSubForm>(entity =>
            {
                entity.ToTable("HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.AuditStatusHologramAttachmentHologramAttachmentRequestSubForm).HasColumnName("AuditStatus_HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.CreatorHologramAttachmentHologramAttachmentRequestSubForm).HasColumnName("Creator_HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.InstanceIdHologramAttachmentHologramAttachmentRequestSubForm).HasColumnName("InstanceId_HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.InstanceSridHologramAttachmentHologramAttachmentRequestSubForm).HasColumnName("InstanceSRId_HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.IpHologramAttachmentHologramAttachmentRequestSubForm).HasColumnName("IP_HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.NumNumberHologramsRequested).HasColumnName("numNumberHologramsRequested");

                entity.Property(e => e.RegistrationDateHologramAttachmentHologramAttachmentRequestSubForm).HasColumnName("RegistrationDate_HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.RegistrationStatusHologramAttachmentHologramAttachmentRequestSubForm).HasColumnName("RegistrationStatus_HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.RegistrationTimeHologramAttachmentHologramAttachmentRequestSubForm).HasColumnName("RegistrationTime_HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.HologramAttachmentHologramAttachmentRequestSubForm)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HologramAttachment_HologramAttachmentRequest_HologramAttachment_HologramAttachmentRequest_SubForm");
            });

            modelBuilder.Entity<HologramAttachmentHologramNumber>(entity =>
            {
                entity.ToTable("HologramAttachment_HologramNumber");

                entity.Property(e => e.AuditStatusHologramAttachmentHologramNumber).HasColumnName("AuditStatus_HologramAttachment_HologramNumber");

                entity.Property(e => e.CreatorHologramAttachmentHologramNumber).HasColumnName("Creator_HologramAttachment_HologramNumber");

                entity.Property(e => e.InstanceIdHologramAttachmentHologramNumber).HasColumnName("InstanceId_HologramAttachment_HologramNumber");

                entity.Property(e => e.InstanceSridHologramAttachmentHologramNumber).HasColumnName("InstanceSRId_HologramAttachment_HologramNumber");

                entity.Property(e => e.IpHologramAttachmentHologramNumber).HasColumnName("IP_HologramAttachment_HologramNumber");

                entity.Property(e => e.RegistrationDateHologramAttachmentHologramNumber).HasColumnName("RegistrationDate_HologramAttachment_HologramNumber");

                entity.Property(e => e.RegistrationStatusHologramAttachmentHologramNumber).HasColumnName("RegistrationStatus_HologramAttachment_HologramNumber");

                entity.Property(e => e.RegistrationTimeHologramAttachmentHologramNumber).HasColumnName("RegistrationTime_HologramAttachment_HologramNumber");
            });

            modelBuilder.Entity<HologramAttachmentHologramNumberSubForm>(entity =>
            {
                entity.ToTable("HologramAttachment_HologramNumber_SubForm");

                entity.Property(e => e.AuditStatusHologramAttachmentHologramNumberSubForm).HasColumnName("AuditStatus_HologramAttachment_HologramNumber_SubForm");

                entity.Property(e => e.CreatorHologramAttachmentHologramNumberSubForm).HasColumnName("Creator_HologramAttachment_HologramNumber_SubForm");

                entity.Property(e => e.InstanceIdHologramAttachmentHologramNumberSubForm).HasColumnName("InstanceId_HologramAttachment_HologramNumber_SubForm");

                entity.Property(e => e.InstanceSridHologramAttachmentHologramNumberSubForm).HasColumnName("InstanceSRId_HologramAttachment_HologramNumber_SubForm");

                entity.Property(e => e.IpHologramAttachmentHologramNumberSubForm).HasColumnName("IP_HologramAttachment_HologramNumber_SubForm");

                entity.Property(e => e.NumNumberFirstHologram).HasColumnName("numNumberFirstHologram");

                entity.Property(e => e.NumNumberLastHologram).HasColumnName("numNumberLastHologram");

                entity.Property(e => e.RegistrationDateHologramAttachmentHologramNumberSubForm).HasColumnName("RegistrationDate_HologramAttachment_HologramNumber_SubForm");

                entity.Property(e => e.RegistrationStatusHologramAttachmentHologramNumberSubForm).HasColumnName("RegistrationStatus_HologramAttachment_HologramNumber_SubForm");

                entity.Property(e => e.RegistrationTimeHologramAttachmentHologramNumberSubForm).HasColumnName("RegistrationTime_HologramAttachment_HologramNumber_SubForm");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.HologramAttachmentHologramNumberSubForm)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HologramAttachment_HologramNumber_HologramAttachment_HologramNumber_SubForm");
            });

            modelBuilder.Entity<HologramAttachmentInstallationList>(entity =>
            {
                entity.ToTable("HologramAttachment_InstallationList");

                entity.Property(e => e.AuditStatusHologramAttachmentInstallationList).HasColumnName("AuditStatus_HologramAttachment_InstallationList");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorHologramAttachmentInstallationList).HasColumnName("Creator_HologramAttachment_InstallationList");

                entity.Property(e => e.InstanceIdHologramAttachmentInstallationList).HasColumnName("InstanceId_HologramAttachment_InstallationList");

                entity.Property(e => e.InstanceSridHologramAttachmentInstallationList).HasColumnName("InstanceSRId_HologramAttachment_InstallationList");

                entity.Property(e => e.IpHologramAttachmentInstallationList).HasColumnName("IP_HologramAttachment_InstallationList");

                entity.Property(e => e.RegistrationDateHologramAttachmentInstallationList).HasColumnName("RegistrationDate_HologramAttachment_InstallationList");

                entity.Property(e => e.RegistrationStatusHologramAttachmentInstallationList).HasColumnName("RegistrationStatus_HologramAttachment_InstallationList");

                entity.Property(e => e.RegistrationTimeHologramAttachmentInstallationList).HasColumnName("RegistrationTime_HologramAttachment_InstallationList");

                entity.Property(e => e.UplUploadDocumentation).HasColumnName("uplUploadDocumentation");
            });

            modelBuilder.Entity<HologramAttachmentInstallationListSubForm>(entity =>
            {
                entity.ToTable("HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.AuditStatusHologramAttachmentInstallationListSubForm).HasColumnName("AuditStatus_HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.CreatorHologramAttachmentInstallationListSubForm).HasColumnName("Creator_HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.InstanceIdHologramAttachmentInstallationListSubForm).HasColumnName("InstanceId_HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.InstanceSridHologramAttachmentInstallationListSubForm).HasColumnName("InstanceSRId_HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.IpHologramAttachmentInstallationListSubForm).HasColumnName("IP_HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.NumNumberHologramsAttached).HasColumnName("numNumberHologramsAttached");

                entity.Property(e => e.RegistrationDateHologramAttachmentInstallationListSubForm).HasColumnName("RegistrationDate_HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.RegistrationStatusHologramAttachmentInstallationListSubForm).HasColumnName("RegistrationStatus_HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.RegistrationTimeHologramAttachmentInstallationListSubForm).HasColumnName("RegistrationTime_HologramAttachment_InstallationList_SubForm");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.HologramAttachmentInstallationListSubForm)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HologramAttachment_InstallationList_HologramAttachment_InstallationList_SubForm");
            });

            modelBuilder.Entity<HologramTransferToOldGamesApplyAndSelectGame>(entity =>
            {
                entity.ToTable("HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.AuditStatusHologramTransferToOldGamesApplyAndSelectGame).HasColumnName("AuditStatus_HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.CreatorHologramTransferToOldGamesApplyAndSelectGame).HasColumnName("Creator_HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.InstanceIdHologramTransferToOldGamesApplyAndSelectGame).HasColumnName("InstanceId_HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.InstanceSridHologramTransferToOldGamesApplyAndSelectGame).HasColumnName("InstanceSRId_HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.IpHologramTransferToOldGamesApplyAndSelectGame).HasColumnName("IP_HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.RegistrationDateHologramTransferToOldGamesApplyAndSelectGame).HasColumnName("RegistrationDate_HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.RegistrationStatusHologramTransferToOldGamesApplyAndSelectGame).HasColumnName("RegistrationStatus_HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.RegistrationTimeHologramTransferToOldGamesApplyAndSelectGame).HasColumnName("RegistrationTime_HologramTransferToOldGames_ApplyAndSelectGame");
            });

            modelBuilder.Entity<HologramTransferToOldGamesApplyAndSelectGameSubForm>(entity =>
            {
                entity.ToTable("HologramTransferToOldGames_ApplyAndSelectGame_SubForm");

                entity.Property(e => e.AuditStatusHologramTransferToOldGamesApplyAndSelectGameSubForm).HasColumnName("AuditStatus_HologramTransferToOldGames_ApplyAndSelectGame_SubForm");

                entity.Property(e => e.CreatorHologramTransferToOldGamesApplyAndSelectGameSubForm).HasColumnName("Creator_HologramTransferToOldGames_ApplyAndSelectGame_SubForm");

                entity.Property(e => e.InstanceIdHologramTransferToOldGamesApplyAndSelectGameSubForm).HasColumnName("InstanceId_HologramTransferToOldGames_ApplyAndSelectGame_SubForm");

                entity.Property(e => e.InstanceSridHologramTransferToOldGamesApplyAndSelectGameSubForm).HasColumnName("InstanceSRId_HologramTransferToOldGames_ApplyAndSelectGame_SubForm");

                entity.Property(e => e.IpHologramTransferToOldGamesApplyAndSelectGameSubForm).HasColumnName("IP_HologramTransferToOldGames_ApplyAndSelectGame_SubForm");

                entity.Property(e => e.NumNumberHologramsRequestedForGame).HasColumnName("numNumberHologramsRequestedForGame");

                entity.Property(e => e.RegistrationDateHologramTransferToOldGamesApplyAndSelectGameSubForm).HasColumnName("RegistrationDate_HologramTransferToOldGames_ApplyAndSelectGame_SubForm");

                entity.Property(e => e.RegistrationStatusHologramTransferToOldGamesApplyAndSelectGameSubForm).HasColumnName("RegistrationStatus_HologramTransferToOldGames_ApplyAndSelectGame_SubForm");

                entity.Property(e => e.RegistrationTimeHologramTransferToOldGamesApplyAndSelectGameSubForm).HasColumnName("RegistrationTime_HologramTransferToOldGames_ApplyAndSelectGame_SubForm");
            });

            modelBuilder.Entity<HologramTransferToOldGamesDocumentReview>(entity =>
            {
                entity.ToTable("HologramTransferToOldGames_DocumentReview");

                entity.Property(e => e.AuditStatusHologramTransferToOldGamesDocumentReview).HasColumnName("AuditStatus_HologramTransferToOldGames_DocumentReview");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.AxtNeedCorrection).HasColumnName("axtNeedCorrection");

                entity.Property(e => e.CreatorHologramTransferToOldGamesDocumentReview).HasColumnName("Creator_HologramTransferToOldGames_DocumentReview");

                entity.Property(e => e.DdlResultTheReview).HasColumnName("ddlResultTheReview");

                entity.Property(e => e.InstanceIdHologramTransferToOldGamesDocumentReview).HasColumnName("InstanceId_HologramTransferToOldGames_DocumentReview");

                entity.Property(e => e.InstanceSridHologramTransferToOldGamesDocumentReview).HasColumnName("InstanceSRId_HologramTransferToOldGames_DocumentReview");

                entity.Property(e => e.IpHologramTransferToOldGamesDocumentReview).HasColumnName("IP_HologramTransferToOldGames_DocumentReview");

                entity.Property(e => e.RegistrationDateHologramTransferToOldGamesDocumentReview).HasColumnName("RegistrationDate_HologramTransferToOldGames_DocumentReview");

                entity.Property(e => e.RegistrationStatusHologramTransferToOldGamesDocumentReview).HasColumnName("RegistrationStatus_HologramTransferToOldGames_DocumentReview");

                entity.Property(e => e.RegistrationTimeHologramTransferToOldGamesDocumentReview).HasColumnName("RegistrationTime_HologramTransferToOldGames_DocumentReview");
            });

            modelBuilder.Entity<IidSubForm>(entity =>
            {
                entity.ToTable("IID_SubForm");

                entity.Property(e => e.AuditStatusIidSubForm).HasColumnName("AuditStatus_IID_SubForm");

                entity.Property(e => e.CreatorIidSubForm).HasColumnName("Creator_IID_SubForm");

                entity.Property(e => e.Ddleditable).HasColumnName("ddleditable");

                entity.Property(e => e.Ddloriginal).HasColumnName("ddloriginal");

                entity.Property(e => e.Ddlplatform).HasColumnName("ddlplatform");

                entity.Property(e => e.Iid).HasColumnName("IID");

                entity.Property(e => e.InstanceIdIidSubForm).HasColumnName("InstanceId_IID_SubForm");

                entity.Property(e => e.InstanceSridIidSubForm).HasColumnName("InstanceSRId_IID_SubForm");

                entity.Property(e => e.IpIidSubForm).HasColumnName("IP_IID_SubForm");

                entity.Property(e => e.RegistrationDateIidSubForm).HasColumnName("RegistrationDate_IID_SubForm");

                entity.Property(e => e.RegistrationStatusIidSubForm).HasColumnName("RegistrationStatus_IID_SubForm");

                entity.Property(e => e.RegistrationTimeIidSubForm).HasColumnName("RegistrationTime_IID_SubForm");

                entity.Property(e => e.Vname).HasColumnName("VName");
            });

            modelBuilder.Entity<ImportScore>(entity =>
            {
                entity.Property(e => e.AuditStatusImportScore).HasColumnName("AuditStatus_ImportScore");

                entity.Property(e => e.CreatorImportScore).HasColumnName("Creator_ImportScore");

                entity.Property(e => e.InstanceIdImportScore).HasColumnName("InstanceId_ImportScore");

                entity.Property(e => e.InstanceSridImportScore).HasColumnName("InstanceSRId_ImportScore");

                entity.Property(e => e.IpImportScore).HasColumnName("IP_ImportScore");

                entity.Property(e => e.RegistrationDateImportScore).HasColumnName("RegistrationDate_ImportScore");

                entity.Property(e => e.RegistrationStatusImportScore).HasColumnName("RegistrationStatus_ImportScore");

                entity.Property(e => e.RegistrationTimeImportScore).HasColumnName("RegistrationTime_ImportScore");

                entity.Property(e => e.TxtScore).HasColumnName("txtScore");
            });

            modelBuilder.Entity<Indices>(entity =>
            {
                entity.HasIndex(e => e.BscId)
                    .HasName("IX_BSC_Id");

                entity.HasIndex(e => e.ScheduleTargetId)
                    .HasName("IX_ScheduleTarget_Id");

                entity.Property(e => e.BscId).HasColumnName("BSC_Id");

                entity.Property(e => e.ScheduleTargetId).HasColumnName("ScheduleTarget_Id");

                entity.HasOne(d => d.Bsc)
                    .WithMany(p => p.Indices)
                    .HasForeignKey(d => d.BscId)
                    .HasConstraintName("FK_dbo.Indices_dbo.BSCs_BSC_Id");

                entity.HasOne(d => d.ScheduleTarget)
                    .WithMany(p => p.Indices)
                    .HasForeignKey(d => d.ScheduleTargetId)
                    .HasConstraintName("FK_dbo.Indices_dbo.ScheduleTargets_ScheduleTarget_Id");
            });

            modelBuilder.Entity<IndieDeveloperRegisterForm>(entity =>
            {
                entity.ToTable("indieDeveloperRegisterForm");

                entity.Property(e => e.AuditStatusIndieDeveloperRegisterForm).HasColumnName("AuditStatus_indieDeveloperRegisterForm");

                entity.Property(e => e.CreatorIndieDeveloperRegisterForm).HasColumnName("Creator_indieDeveloperRegisterForm");

                entity.Property(e => e.FileKarteMelli).HasColumnName("fileKarteMelli");

                entity.Property(e => e.FileMadrak).HasColumnName("fileMadrak");

                entity.Property(e => e.FileResume).HasColumnName("fileResume");

                entity.Property(e => e.FileShenasnameh).HasColumnName("fileShenasnameh");

                entity.Property(e => e.Filepic2).HasColumnName("filepic2");

                entity.Property(e => e.InstanceIdIndieDeveloperRegisterForm).HasColumnName("InstanceId_indieDeveloperRegisterForm");

                entity.Property(e => e.InstanceSridIndieDeveloperRegisterForm).HasColumnName("InstanceSRId_indieDeveloperRegisterForm");

                entity.Property(e => e.IpIndieDeveloperRegisterForm).HasColumnName("IP_indieDeveloperRegisterForm");

                entity.Property(e => e.RegistrationDateIndieDeveloperRegisterForm).HasColumnName("RegistrationDate_indieDeveloperRegisterForm");

                entity.Property(e => e.RegistrationStatusIndieDeveloperRegisterForm).HasColumnName("RegistrationStatus_indieDeveloperRegisterForm");

                entity.Property(e => e.RegistrationTimeIndieDeveloperRegisterForm).HasColumnName("RegistrationTime_indieDeveloperRegisterForm");

                entity.Property(e => e.TxtAddress).HasColumnName("txtAddress");

                entity.Property(e => e.TxtEmail).HasColumnName("txtEmail");

                entity.Property(e => e.TxtName).HasColumnName("txtName");

                entity.Property(e => e.TxtTelephone).HasColumnName("txtTelephone");
            });

            modelBuilder.Entity<IndieProjectTitles>(entity =>
            {
                entity.Property(e => e.AuditStatusIndieProjectTitles).HasColumnName("AuditStatus_IndieProjectTitles");

                entity.Property(e => e.Combohoze).HasColumnName("COMBOhoze");

                entity.Property(e => e.CreatorIndieProjectTitles).HasColumnName("Creator_IndieProjectTitles");

                entity.Property(e => e.Dateend).HasColumnName("dateend");

                entity.Property(e => e.Datestart).HasColumnName("datestart");

                entity.Property(e => e.InstanceIdIndieProjectTitles).HasColumnName("InstanceId_IndieProjectTitles");

                entity.Property(e => e.InstanceSridIndieProjectTitles).HasColumnName("InstanceSRId_IndieProjectTitles");

                entity.Property(e => e.IpIndieProjectTitles).HasColumnName("IP_IndieProjectTitles");

                entity.Property(e => e.RegistrationDateIndieProjectTitles).HasColumnName("RegistrationDate_IndieProjectTitles");

                entity.Property(e => e.RegistrationStatusIndieProjectTitles).HasColumnName("RegistrationStatus_IndieProjectTitles");

                entity.Property(e => e.RegistrationTimeIndieProjectTitles).HasColumnName("RegistrationTime_IndieProjectTitles");

                entity.Property(e => e.TxtProjectTitle).HasColumnName("txtProjectTitle");

                entity.Property(e => e.Txtkarfarma).HasColumnName("txtkarfarma");

                entity.Property(e => e.Txtmasooliat).HasColumnName("txtmasooliat");

                entity.Property(e => e.Txtsharhehoze).HasColumnName("txtsharhehoze");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.IndieProjectTitles)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_indieDeveloperRegisterForm_IndieProjectTitles");
            });

            modelBuilder.Entity<InquiryOfLicencingUnit>(entity =>
            {
                entity.Property(e => e.AuditStatusInquiryOfLicencingUnit).HasColumnName("AuditStatus_InquiryOfLicencingUnit");

                entity.Property(e => e.CreatorInquiryOfLicencingUnit).HasColumnName("Creator_InquiryOfLicencingUnit");

                entity.Property(e => e.DdlResult).HasColumnName("ddlResult");

                entity.Property(e => e.InstanceIdInquiryOfLicencingUnit).HasColumnName("InstanceId_InquiryOfLicencingUnit");

                entity.Property(e => e.InstanceSridInquiryOfLicencingUnit).HasColumnName("InstanceSRId_InquiryOfLicencingUnit");

                entity.Property(e => e.IpInquiryOfLicencingUnit).HasColumnName("IP_InquiryOfLicencingUnit");

                entity.Property(e => e.RegistrationDateInquiryOfLicencingUnit).HasColumnName("RegistrationDate_InquiryOfLicencingUnit");

                entity.Property(e => e.RegistrationStatusInquiryOfLicencingUnit).HasColumnName("RegistrationStatus_InquiryOfLicencingUnit");

                entity.Property(e => e.RegistrationTimeInquiryOfLicencingUnit).HasColumnName("RegistrationTime_InquiryOfLicencingUnit");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxtActivityTitle).HasColumnName("txtActivityTitle");
            });

            modelBuilder.Entity<InquiryOfPublicRelationsUnit>(entity =>
            {
                entity.Property(e => e.AuditStatusInquiryOfPublicRelationsUnit).HasColumnName("AuditStatus_InquiryOfPublicRelationsUnit");

                entity.Property(e => e.CreatorInquiryOfPublicRelationsUnit).HasColumnName("Creator_InquiryOfPublicRelationsUnit");

                entity.Property(e => e.DdlResult).HasColumnName("ddlResult");

                entity.Property(e => e.InstanceIdInquiryOfPublicRelationsUnit).HasColumnName("InstanceId_InquiryOfPublicRelationsUnit");

                entity.Property(e => e.InstanceSridInquiryOfPublicRelationsUnit).HasColumnName("InstanceSRId_InquiryOfPublicRelationsUnit");

                entity.Property(e => e.IpInquiryOfPublicRelationsUnit).HasColumnName("IP_InquiryOfPublicRelationsUnit");

                entity.Property(e => e.RegistrationDateInquiryOfPublicRelationsUnit).HasColumnName("RegistrationDate_InquiryOfPublicRelationsUnit");

                entity.Property(e => e.RegistrationStatusInquiryOfPublicRelationsUnit).HasColumnName("RegistrationStatus_InquiryOfPublicRelationsUnit");

                entity.Property(e => e.RegistrationTimeInquiryOfPublicRelationsUnit).HasColumnName("RegistrationTime_InquiryOfPublicRelationsUnit");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxtActivityTitle).HasColumnName("txtActivityTitle");
            });

            modelBuilder.Entity<InquiryOfSupportUnit>(entity =>
            {
                entity.Property(e => e.AuditStatusInquiryOfSupportUnit).HasColumnName("AuditStatus_InquiryOfSupportUnit");

                entity.Property(e => e.CreatorInquiryOfSupportUnit).HasColumnName("Creator_InquiryOfSupportUnit");

                entity.Property(e => e.DdlResult).HasColumnName("ddlResult");

                entity.Property(e => e.InstanceIdInquiryOfSupportUnit).HasColumnName("InstanceId_InquiryOfSupportUnit");

                entity.Property(e => e.InstanceSridInquiryOfSupportUnit).HasColumnName("InstanceSRId_InquiryOfSupportUnit");

                entity.Property(e => e.IpInquiryOfSupportUnit).HasColumnName("IP_InquiryOfSupportUnit");

                entity.Property(e => e.RegistrationDateInquiryOfSupportUnit).HasColumnName("RegistrationDate_InquiryOfSupportUnit");

                entity.Property(e => e.RegistrationStatusInquiryOfSupportUnit).HasColumnName("RegistrationStatus_InquiryOfSupportUnit");

                entity.Property(e => e.RegistrationTimeInquiryOfSupportUnit).HasColumnName("RegistrationTime_InquiryOfSupportUnit");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxtActivityTitle).HasColumnName("txtActivityTitle");
            });

            modelBuilder.Entity<InsertAndEditDetermineAction>(entity =>
            {
                entity.ToTable("InsertAndEdit_DetermineAction");

                entity.Property(e => e.AuditStatusInsertAndEditDetermineAction).HasColumnName("AuditStatus_InsertAndEdit_DetermineAction");

                entity.Property(e => e.CreatorInsertAndEditDetermineAction).HasColumnName("Creator_InsertAndEdit_DetermineAction");

                entity.Property(e => e.DdlDetermineTypeOfAction).HasColumnName("ddlDetermineTypeOfAction");

                entity.Property(e => e.InstanceIdInsertAndEditDetermineAction).HasColumnName("InstanceId_InsertAndEdit_DetermineAction");

                entity.Property(e => e.InstanceSridInsertAndEditDetermineAction).HasColumnName("InstanceSRId_InsertAndEdit_DetermineAction");

                entity.Property(e => e.IpInsertAndEditDetermineAction).HasColumnName("IP_InsertAndEdit_DetermineAction");

                entity.Property(e => e.RegistrationDateInsertAndEditDetermineAction).HasColumnName("RegistrationDate_InsertAndEdit_DetermineAction");

                entity.Property(e => e.RegistrationStatusInsertAndEditDetermineAction).HasColumnName("RegistrationStatus_InsertAndEdit_DetermineAction");

                entity.Property(e => e.RegistrationTimeInsertAndEditDetermineAction).HasColumnName("RegistrationTime_InsertAndEdit_DetermineAction");
            });

            modelBuilder.Entity<InsertAndEditRegisterAuctionItem>(entity =>
            {
                entity.ToTable("InsertAndEdit_RegisterAuctionItem");

                entity.Property(e => e.AuditStatusInsertAndEditRegisterAuctionItem).HasColumnName("AuditStatus_InsertAndEdit_RegisterAuctionItem");

                entity.Property(e => e.CreatorInsertAndEditRegisterAuctionItem).HasColumnName("Creator_InsertAndEdit_RegisterAuctionItem");

                entity.Property(e => e.DdlMonopoly).HasColumnName("ddlMonopoly");

                entity.Property(e => e.InstanceIdInsertAndEditRegisterAuctionItem).HasColumnName("InstanceId_InsertAndEdit_RegisterAuctionItem");

                entity.Property(e => e.InstanceSridInsertAndEditRegisterAuctionItem).HasColumnName("InstanceSRId_InsertAndEdit_RegisterAuctionItem");

                entity.Property(e => e.IpInsertAndEditRegisterAuctionItem).HasColumnName("IP_InsertAndEdit_RegisterAuctionItem");

                entity.Property(e => e.NumDurationOfRepaymentLicense).HasColumnName("numDurationOfRepaymentLicense");

                entity.Property(e => e.RegistrationDateInsertAndEditRegisterAuctionItem).HasColumnName("RegistrationDate_InsertAndEdit_RegisterAuctionItem");

                entity.Property(e => e.RegistrationStatusInsertAndEditRegisterAuctionItem).HasColumnName("RegistrationStatus_InsertAndEdit_RegisterAuctionItem");

                entity.Property(e => e.RegistrationTimeInsertAndEditRegisterAuctionItem).HasColumnName("RegistrationTime_InsertAndEdit_RegisterAuctionItem");
            });

            modelBuilder.Entity<InsertAndEditRequestEditTheAuctionItem>(entity =>
            {
                entity.ToTable("InsertAndEdit_RequestEditTheAuctionItem");

                entity.Property(e => e.AuditStatusInsertAndEditRequestEditTheAuctionItem).HasColumnName("AuditStatus_InsertAndEdit_RequestEditTheAuctionItem");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorInsertAndEditRequestEditTheAuctionItem).HasColumnName("Creator_InsertAndEdit_RequestEditTheAuctionItem");

                entity.Property(e => e.InstanceIdInsertAndEditRequestEditTheAuctionItem).HasColumnName("InstanceId_InsertAndEdit_RequestEditTheAuctionItem");

                entity.Property(e => e.InstanceSridInsertAndEditRequestEditTheAuctionItem).HasColumnName("InstanceSRId_InsertAndEdit_RequestEditTheAuctionItem");

                entity.Property(e => e.IpInsertAndEditRequestEditTheAuctionItem).HasColumnName("IP_InsertAndEdit_RequestEditTheAuctionItem");

                entity.Property(e => e.RegistrationDateInsertAndEditRequestEditTheAuctionItem).HasColumnName("RegistrationDate_InsertAndEdit_RequestEditTheAuctionItem");

                entity.Property(e => e.RegistrationStatusInsertAndEditRequestEditTheAuctionItem).HasColumnName("RegistrationStatus_InsertAndEdit_RequestEditTheAuctionItem");

                entity.Property(e => e.RegistrationTimeInsertAndEditRequestEditTheAuctionItem).HasColumnName("RegistrationTime_InsertAndEdit_RequestEditTheAuctionItem");
            });

            modelBuilder.Entity<InsertAndEditReviewDeputyNezarat>(entity =>
            {
                entity.ToTable("InsertAndEdit_ReviewDeputyNezarat");

                entity.Property(e => e.AuditStatusInsertAndEditReviewDeputyNezarat).HasColumnName("AuditStatus_InsertAndEdit_ReviewDeputyNezarat");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorInsertAndEditReviewDeputyNezarat).HasColumnName("Creator_InsertAndEdit_ReviewDeputyNezarat");

                entity.Property(e => e.DdlResultOfReview).HasColumnName("ddlResultOfReview");

                entity.Property(e => e.InstanceIdInsertAndEditReviewDeputyNezarat).HasColumnName("InstanceId_InsertAndEdit_ReviewDeputyNezarat");

                entity.Property(e => e.InstanceSridInsertAndEditReviewDeputyNezarat).HasColumnName("InstanceSRId_InsertAndEdit_ReviewDeputyNezarat");

                entity.Property(e => e.IpInsertAndEditReviewDeputyNezarat).HasColumnName("IP_InsertAndEdit_ReviewDeputyNezarat");

                entity.Property(e => e.RegistrationDateInsertAndEditReviewDeputyNezarat).HasColumnName("RegistrationDate_InsertAndEdit_ReviewDeputyNezarat");

                entity.Property(e => e.RegistrationStatusInsertAndEditReviewDeputyNezarat).HasColumnName("RegistrationStatus_InsertAndEdit_ReviewDeputyNezarat");

                entity.Property(e => e.RegistrationTimeInsertAndEditReviewDeputyNezarat).HasColumnName("RegistrationTime_InsertAndEdit_ReviewDeputyNezarat");
            });

            modelBuilder.Entity<InsertAndEditReviewTheRequestEditAuctionItem>(entity =>
            {
                entity.ToTable("InsertAndEdit_ReviewTheRequestEditAuctionItem");

                entity.Property(e => e.AuditStatusInsertAndEditReviewTheRequestEditAuctionItem).HasColumnName("AuditStatus_InsertAndEdit_ReviewTheRequestEditAuctionItem");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorInsertAndEditReviewTheRequestEditAuctionItem).HasColumnName("Creator_InsertAndEdit_ReviewTheRequestEditAuctionItem");

                entity.Property(e => e.DdlResultOfReview).HasColumnName("ddlResultOfReview");

                entity.Property(e => e.InstanceIdInsertAndEditReviewTheRequestEditAuctionItem).HasColumnName("InstanceId_InsertAndEdit_ReviewTheRequestEditAuctionItem");

                entity.Property(e => e.InstanceSridInsertAndEditReviewTheRequestEditAuctionItem).HasColumnName("InstanceSRId_InsertAndEdit_ReviewTheRequestEditAuctionItem");

                entity.Property(e => e.IpInsertAndEditReviewTheRequestEditAuctionItem).HasColumnName("IP_InsertAndEdit_ReviewTheRequestEditAuctionItem");

                entity.Property(e => e.RegistrationDateInsertAndEditReviewTheRequestEditAuctionItem).HasColumnName("RegistrationDate_InsertAndEdit_ReviewTheRequestEditAuctionItem");

                entity.Property(e => e.RegistrationStatusInsertAndEditReviewTheRequestEditAuctionItem).HasColumnName("RegistrationStatus_InsertAndEdit_ReviewTheRequestEditAuctionItem");

                entity.Property(e => e.RegistrationTimeInsertAndEditReviewTheRequestEditAuctionItem).HasColumnName("RegistrationTime_InsertAndEdit_ReviewTheRequestEditAuctionItem");
            });

            modelBuilder.Entity<InsertOmdunamePass>(entity =>
            {
                entity.ToTable("insertOMDUnamePass");

                entity.Property(e => e.AuditStatusInsertOmdunamePass).HasColumnName("AuditStatus_insertOMDUnamePass");

                entity.Property(e => e.CreatorInsertOmdunamePass).HasColumnName("Creator_insertOMDUnamePass");

                entity.Property(e => e.InstanceIdInsertOmdunamePass).HasColumnName("InstanceId_insertOMDUnamePass");

                entity.Property(e => e.InstanceSridInsertOmdunamePass).HasColumnName("InstanceSRId_insertOMDUnamePass");

                entity.Property(e => e.IpInsertOmdunamePass).HasColumnName("IP_insertOMDUnamePass");

                entity.Property(e => e.RegistrationDateInsertOmdunamePass).HasColumnName("RegistrationDate_insertOMDUnamePass");

                entity.Property(e => e.RegistrationStatusInsertOmdunamePass).HasColumnName("RegistrationStatus_insertOMDUnamePass");

                entity.Property(e => e.RegistrationTimeInsertOmdunamePass).HasColumnName("RegistrationTime_insertOMDUnamePass");

                entity.Property(e => e.TxtPass).HasColumnName("txtPASS");

                entity.Property(e => e.TxtUname).HasColumnName("txtUNAME");
            });

            modelBuilder.Entity<InsertOperatorSelect>(entity =>
            {
                entity.ToTable("insertOperatorSelect");

                entity.Property(e => e.AuditStatusInsertOperatorSelect).HasColumnName("AuditStatus_insertOperatorSelect");

                entity.Property(e => e.CreatorInsertOperatorSelect).HasColumnName("Creator_insertOperatorSelect");

                entity.Property(e => e.DdlOperator).HasColumnName("ddlOperator");

                entity.Property(e => e.InstanceIdInsertOperatorSelect).HasColumnName("InstanceId_insertOperatorSelect");

                entity.Property(e => e.InstanceSridInsertOperatorSelect).HasColumnName("InstanceSRId_insertOperatorSelect");

                entity.Property(e => e.IpInsertOperatorSelect).HasColumnName("IP_insertOperatorSelect");

                entity.Property(e => e.RegistrationDateInsertOperatorSelect).HasColumnName("RegistrationDate_insertOperatorSelect");

                entity.Property(e => e.RegistrationStatusInsertOperatorSelect).HasColumnName("RegistrationStatus_insertOperatorSelect");

                entity.Property(e => e.RegistrationTimeInsertOperatorSelect).HasColumnName("RegistrationTime_insertOperatorSelect");
            });

            modelBuilder.Entity<InstitutionExecutives>(entity =>
            {
                entity.Property(e => e.AuditStatusInstitutionExecutives).HasColumnName("AuditStatus_InstitutionExecutives");

                entity.Property(e => e.CreatorInstitutionExecutives).HasColumnName("Creator_InstitutionExecutives");

                entity.Property(e => e.DdlResponsibilityType).HasColumnName("ddlResponsibilityType");

                entity.Property(e => e.InstanceIdInstitutionExecutives).HasColumnName("InstanceId_InstitutionExecutives");

                entity.Property(e => e.InstanceSridInstitutionExecutives).HasColumnName("InstanceSRId_InstitutionExecutives");

                entity.Property(e => e.IpInstitutionExecutives).HasColumnName("IP_InstitutionExecutives");

                entity.Property(e => e.RegistrationDateInstitutionExecutives).HasColumnName("RegistrationDate_InstitutionExecutives");

                entity.Property(e => e.RegistrationStatusInstitutionExecutives).HasColumnName("RegistrationStatus_InstitutionExecutives");

                entity.Property(e => e.RegistrationTimeInstitutionExecutives).HasColumnName("RegistrationTime_InstitutionExecutives");

                entity.Property(e => e.TxtFname).HasColumnName("txtFName");

                entity.Property(e => e.TxtIdNumber).HasColumnName("txtIdNumber");

                entity.Property(e => e.TxtLname).HasColumnName("txtLName");

                entity.Property(e => e.TxtNationalCode).HasColumnName("txtNationalCode");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.InstitutionExecutives)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SinglePurposeInstitutionProfile_InstitutionExecutives");
            });

            modelBuilder.Entity<InstitutionExecutivesProfile>(entity =>
            {
                entity.Property(e => e.AuditStatusInstitutionExecutivesProfile).HasColumnName("AuditStatus_InstitutionExecutivesProfile");

                entity.Property(e => e.CreatorInstitutionExecutivesProfile).HasColumnName("Creator_InstitutionExecutivesProfile");

                entity.Property(e => e.DdlLastDegree).HasColumnName("ddlLastDegree");

                entity.Property(e => e.DdlMarriage).HasColumnName("ddlMarriage");

                entity.Property(e => e.DdlReligion).HasColumnName("ddlReligion");

                entity.Property(e => e.DdlSoldiering).HasColumnName("ddlSoldiering");

                entity.Property(e => e.Ddlsexuality).HasColumnName("ddlsexuality");

                entity.Property(e => e.InstanceIdInstitutionExecutivesProfile).HasColumnName("InstanceId_InstitutionExecutivesProfile");

                entity.Property(e => e.InstanceSridInstitutionExecutivesProfile).HasColumnName("InstanceSRId_InstitutionExecutivesProfile");

                entity.Property(e => e.IpInstitutionExecutivesProfile).HasColumnName("IP_InstitutionExecutivesProfile");

                entity.Property(e => e.RegistrationDateInstitutionExecutivesProfile).HasColumnName("RegistrationDate_InstitutionExecutivesProfile");

                entity.Property(e => e.RegistrationStatusInstitutionExecutivesProfile).HasColumnName("RegistrationStatus_InstitutionExecutivesProfile");

                entity.Property(e => e.RegistrationTimeInstitutionExecutivesProfile).HasColumnName("RegistrationTime_InstitutionExecutivesProfile");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxaCulturalProducts).HasColumnName("txaCulturalProducts");

                entity.Property(e => e.TxaCurrentJobAddress).HasColumnName("txaCurrentJobAddress");

                entity.Property(e => e.TxaHabitationAddress).HasColumnName("txaHabitationAddress");

                entity.Property(e => e.TxaPreJobAddress).HasColumnName("txaPreJobAddress");

                entity.Property(e => e.TxaSocialActivity).HasColumnName("txaSocialActivity");

                entity.Property(e => e.TxtAlias).HasColumnName("txtAlias");

                entity.Property(e => e.TxtCurrentJob).HasColumnName("txtCurrentJob");

                entity.Property(e => e.TxtCurrentJobPhone).HasColumnName("txtCurrentJobPhone");

                entity.Property(e => e.TxtEducationPlace).HasColumnName("txtEducationPlace");

                entity.Property(e => e.TxtFatherName).HasColumnName("txtFatherName");

                entity.Property(e => e.TxtFieldOfStudy).HasColumnName("txtFieldOfStudy");

                entity.Property(e => e.TxtHabitationPhone).HasColumnName("txtHabitationPhone");

                entity.Property(e => e.TxtHabitationZcode).HasColumnName("txtHabitationZCode");

                entity.Property(e => e.TxtIdNumber).HasColumnName("txtIdNumber");

                entity.Property(e => e.TxtLname).HasColumnName("txtLName");

                entity.Property(e => e.TxtMobile).HasColumnName("txtMobile");

                entity.Property(e => e.TxtName).HasColumnName("txtName");

                entity.Property(e => e.TxtNationalCode).HasColumnName("txtNationalCode");

                entity.Property(e => e.TxtNationality).HasColumnName("txtNationality");

                entity.Property(e => e.TxtPlaceOfIssue).HasColumnName("txtPlaceOfIssue");

                entity.Property(e => e.TxtPreJob).HasColumnName("txtPreJob");

                entity.Property(e => e.TxtPreJobPhone).HasColumnName("txtPreJobPhone");

                entity.Property(e => e.TxtSpouseName).HasColumnName("txtSpouseName");

                entity.Property(e => e.Txtsect).HasColumnName("txtsect");
            });

            modelBuilder.Entity<IssueLicenseOriginalGamesCheckDeputyNezarat>(entity =>
            {
                entity.ToTable("IssueLicenseOriginalGames_CheckDeputyNezarat");

                entity.Property(e => e.AuditStatusIssueLicenseOriginalGamesCheckDeputyNezarat).HasColumnName("AuditStatus_IssueLicenseOriginalGames_CheckDeputyNezarat");

                entity.Property(e => e.AxtRefusedRequests).HasColumnName("axtRefusedRequests");

                entity.Property(e => e.CreatorIssueLicenseOriginalGamesCheckDeputyNezarat).HasColumnName("Creator_IssueLicenseOriginalGames_CheckDeputyNezarat");

                entity.Property(e => e.DdlResultReview).HasColumnName("ddlResultReview");

                entity.Property(e => e.InstanceIdIssueLicenseOriginalGamesCheckDeputyNezarat).HasColumnName("InstanceId_IssueLicenseOriginalGames_CheckDeputyNezarat");

                entity.Property(e => e.InstanceSridIssueLicenseOriginalGamesCheckDeputyNezarat).HasColumnName("InstanceSRId_IssueLicenseOriginalGames_CheckDeputyNezarat");

                entity.Property(e => e.IpIssueLicenseOriginalGamesCheckDeputyNezarat).HasColumnName("IP_IssueLicenseOriginalGames_CheckDeputyNezarat");

                entity.Property(e => e.RegistrationDateIssueLicenseOriginalGamesCheckDeputyNezarat).HasColumnName("RegistrationDate_IssueLicenseOriginalGames_CheckDeputyNezarat");

                entity.Property(e => e.RegistrationStatusIssueLicenseOriginalGamesCheckDeputyNezarat).HasColumnName("RegistrationStatus_IssueLicenseOriginalGames_CheckDeputyNezarat");

                entity.Property(e => e.RegistrationTimeIssueLicenseOriginalGamesCheckDeputyNezarat).HasColumnName("RegistrationTime_IssueLicenseOriginalGames_CheckDeputyNezarat");
            });

            modelBuilder.Entity<IssueLicenseOriginalGamesCheckManagerEsra>(entity =>
            {
                entity.ToTable("IssueLicenseOriginalGames_CheckManagerEsra");

                entity.Property(e => e.AuditStatusIssueLicenseOriginalGamesCheckManagerEsra).HasColumnName("AuditStatus_IssueLicenseOriginalGames_CheckManagerEsra");

                entity.Property(e => e.AxtRefusedRequests).HasColumnName("axtRefusedRequests");

                entity.Property(e => e.CreatorIssueLicenseOriginalGamesCheckManagerEsra).HasColumnName("Creator_IssueLicenseOriginalGames_CheckManagerEsra");

                entity.Property(e => e.DdlResultReview).HasColumnName("ddlResultReview");

                entity.Property(e => e.InstanceIdIssueLicenseOriginalGamesCheckManagerEsra).HasColumnName("InstanceId_IssueLicenseOriginalGames_CheckManagerEsra");

                entity.Property(e => e.InstanceSridIssueLicenseOriginalGamesCheckManagerEsra).HasColumnName("InstanceSRId_IssueLicenseOriginalGames_CheckManagerEsra");

                entity.Property(e => e.IpIssueLicenseOriginalGamesCheckManagerEsra).HasColumnName("IP_IssueLicenseOriginalGames_CheckManagerEsra");

                entity.Property(e => e.RegistrationDateIssueLicenseOriginalGamesCheckManagerEsra).HasColumnName("RegistrationDate_IssueLicenseOriginalGames_CheckManagerEsra");

                entity.Property(e => e.RegistrationStatusIssueLicenseOriginalGamesCheckManagerEsra).HasColumnName("RegistrationStatus_IssueLicenseOriginalGames_CheckManagerEsra");

                entity.Property(e => e.RegistrationTimeIssueLicenseOriginalGamesCheckManagerEsra).HasColumnName("RegistrationTime_IssueLicenseOriginalGames_CheckManagerEsra");
            });

            modelBuilder.Entity<IssueLicenseOriginalGamesRequestForIssuanceLicense>(entity =>
            {
                entity.ToTable("IssueLicenseOriginalGames_RequestForIssuanceLicense");

                entity.Property(e => e.AuditStatusIssueLicenseOriginalGamesRequestForIssuanceLicense).HasColumnName("AuditStatus_IssueLicenseOriginalGames_RequestForIssuanceLicense");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorIssueLicenseOriginalGamesRequestForIssuanceLicense).HasColumnName("Creator_IssueLicenseOriginalGames_RequestForIssuanceLicense");

                entity.Property(e => e.InstanceIdIssueLicenseOriginalGamesRequestForIssuanceLicense).HasColumnName("InstanceId_IssueLicenseOriginalGames_RequestForIssuanceLicense");

                entity.Property(e => e.InstanceSridIssueLicenseOriginalGamesRequestForIssuanceLicense).HasColumnName("InstanceSRId_IssueLicenseOriginalGames_RequestForIssuanceLicense");

                entity.Property(e => e.IpIssueLicenseOriginalGamesRequestForIssuanceLicense).HasColumnName("IP_IssueLicenseOriginalGames_RequestForIssuanceLicense");

                entity.Property(e => e.RegistrationDateIssueLicenseOriginalGamesRequestForIssuanceLicense).HasColumnName("RegistrationDate_IssueLicenseOriginalGames_RequestForIssuanceLicense");

                entity.Property(e => e.RegistrationStatusIssueLicenseOriginalGamesRequestForIssuanceLicense).HasColumnName("RegistrationStatus_IssueLicenseOriginalGames_RequestForIssuanceLicense");

                entity.Property(e => e.RegistrationTimeIssueLicenseOriginalGamesRequestForIssuanceLicense).HasColumnName("RegistrationTime_IssueLicenseOriginalGames_RequestForIssuanceLicense");

                entity.Property(e => e.UplImageGameVolet).HasColumnName("uplImageGameVolet");
            });

            modelBuilder.Entity<IssueLicenseOriginalGamesRequestForIssuanceLicenseAgain>(entity =>
            {
                entity.ToTable("IssueLicenseOriginalGames_RequestForIssuanceLicenseAgain");

                entity.Property(e => e.AuditStatusIssueLicenseOriginalGamesRequestForIssuanceLicenseAgain).HasColumnName("AuditStatus_IssueLicenseOriginalGames_RequestForIssuanceLicenseAgain");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorIssueLicenseOriginalGamesRequestForIssuanceLicenseAgain).HasColumnName("Creator_IssueLicenseOriginalGames_RequestForIssuanceLicenseAgain");

                entity.Property(e => e.InstanceIdIssueLicenseOriginalGamesRequestForIssuanceLicenseAgain).HasColumnName("InstanceId_IssueLicenseOriginalGames_RequestForIssuanceLicenseAgain");

                entity.Property(e => e.InstanceSridIssueLicenseOriginalGamesRequestForIssuanceLicenseAgain).HasColumnName("InstanceSRId_IssueLicenseOriginalGames_RequestForIssuanceLicenseAgain");

                entity.Property(e => e.IpIssueLicenseOriginalGamesRequestForIssuanceLicenseAgain).HasColumnName("IP_IssueLicenseOriginalGames_RequestForIssuanceLicenseAgain");

                entity.Property(e => e.RegistrationDateIssueLicenseOriginalGamesRequestForIssuanceLicenseAgain).HasColumnName("RegistrationDate_IssueLicenseOriginalGames_RequestForIssuanceLicenseAgain");

                entity.Property(e => e.RegistrationStatusIssueLicenseOriginalGamesRequestForIssuanceLicenseAgain).HasColumnName("RegistrationStatus_IssueLicenseOriginalGames_RequestForIssuanceLicenseAgain");

                entity.Property(e => e.RegistrationTimeIssueLicenseOriginalGamesRequestForIssuanceLicenseAgain).HasColumnName("RegistrationTime_IssueLicenseOriginalGames_RequestForIssuanceLicenseAgain");

                entity.Property(e => e.UplImageGameVolet).HasColumnName("uplImageGameVolet");
            });

            modelBuilder.Entity<IssueLicenseOriginalGamesUploadLicensePublish>(entity =>
            {
                entity.ToTable("IssueLicenseOriginalGames_UploadLicensePublish");

                entity.Property(e => e.AuditStatusIssueLicenseOriginalGamesUploadLicensePublish).HasColumnName("AuditStatus_IssueLicenseOriginalGames_UploadLicensePublish");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorIssueLicenseOriginalGamesUploadLicensePublish).HasColumnName("Creator_IssueLicenseOriginalGames_UploadLicensePublish");

                entity.Property(e => e.InstanceIdIssueLicenseOriginalGamesUploadLicensePublish).HasColumnName("InstanceId_IssueLicenseOriginalGames_UploadLicensePublish");

                entity.Property(e => e.InstanceSridIssueLicenseOriginalGamesUploadLicensePublish).HasColumnName("InstanceSRId_IssueLicenseOriginalGames_UploadLicensePublish");

                entity.Property(e => e.IpIssueLicenseOriginalGamesUploadLicensePublish).HasColumnName("IP_IssueLicenseOriginalGames_UploadLicensePublish");

                entity.Property(e => e.RegistrationDateIssueLicenseOriginalGamesUploadLicensePublish).HasColumnName("RegistrationDate_IssueLicenseOriginalGames_UploadLicensePublish");

                entity.Property(e => e.RegistrationStatusIssueLicenseOriginalGamesUploadLicensePublish).HasColumnName("RegistrationStatus_IssueLicenseOriginalGames_UploadLicensePublish");

                entity.Property(e => e.RegistrationTimeIssueLicenseOriginalGamesUploadLicensePublish).HasColumnName("RegistrationTime_IssueLicenseOriginalGames_UploadLicensePublish");

                entity.Property(e => e.UplImageDistributorLicense).HasColumnName("uplImageDistributorLicense");
            });

            modelBuilder.Entity<IssueLicensingForPublicOldGamesInformationCompilation>(entity =>
            {
                entity.ToTable("IssueLicensingForPublicOldGames_InformationCompilation");

                entity.Property(e => e.AuditStatusIssueLicensingForPublicOldGamesInformationCompilation).HasColumnName("AuditStatus_IssueLicensingForPublicOldGames_InformationCompilation");

                entity.Property(e => e.CreatorIssueLicensingForPublicOldGamesInformationCompilation).HasColumnName("Creator_IssueLicensingForPublicOldGames_InformationCompilation");

                entity.Property(e => e.DdlFormat).HasColumnName("ddlFormat");

                entity.Property(e => e.InstanceIdIssueLicensingForPublicOldGamesInformationCompilation).HasColumnName("InstanceId_IssueLicensingForPublicOldGames_InformationCompilation");

                entity.Property(e => e.InstanceSridIssueLicensingForPublicOldGamesInformationCompilation).HasColumnName("InstanceSRId_IssueLicensingForPublicOldGames_InformationCompilation");

                entity.Property(e => e.IpIssueLicensingForPublicOldGamesInformationCompilation).HasColumnName("IP_IssueLicensingForPublicOldGames_InformationCompilation");

                entity.Property(e => e.NumCount).HasColumnName("numCount");

                entity.Property(e => e.RegistrationDateIssueLicensingForPublicOldGamesInformationCompilation).HasColumnName("RegistrationDate_IssueLicensingForPublicOldGames_InformationCompilation");

                entity.Property(e => e.RegistrationStatusIssueLicensingForPublicOldGamesInformationCompilation).HasColumnName("RegistrationStatus_IssueLicensingForPublicOldGames_InformationCompilation");

                entity.Property(e => e.RegistrationTimeIssueLicensingForPublicOldGamesInformationCompilation).HasColumnName("RegistrationTime_IssueLicensingForPublicOldGames_InformationCompilation");

                entity.Property(e => e.TxtPrice).HasColumnName("txtPrice");
            });

            modelBuilder.Entity<IssueLicensingForPublicOldGamesLicenseRelease>(entity =>
            {
                entity.ToTable("IssueLicensingForPublicOldGames_LicenseRelease");

                entity.Property(e => e.AuditStatusIssueLicensingForPublicOldGamesLicenseRelease).HasColumnName("AuditStatus_IssueLicensingForPublicOldGames_LicenseRelease");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorIssueLicensingForPublicOldGamesLicenseRelease).HasColumnName("Creator_IssueLicensingForPublicOldGames_LicenseRelease");

                entity.Property(e => e.InstanceIdIssueLicensingForPublicOldGamesLicenseRelease).HasColumnName("InstanceId_IssueLicensingForPublicOldGames_LicenseRelease");

                entity.Property(e => e.InstanceSridIssueLicensingForPublicOldGamesLicenseRelease).HasColumnName("InstanceSRId_IssueLicensingForPublicOldGames_LicenseRelease");

                entity.Property(e => e.IpIssueLicensingForPublicOldGamesLicenseRelease).HasColumnName("IP_IssueLicensingForPublicOldGames_LicenseRelease");

                entity.Property(e => e.RegistrationDateIssueLicensingForPublicOldGamesLicenseRelease).HasColumnName("RegistrationDate_IssueLicensingForPublicOldGames_LicenseRelease");

                entity.Property(e => e.RegistrationStatusIssueLicensingForPublicOldGamesLicenseRelease).HasColumnName("RegistrationStatus_IssueLicensingForPublicOldGames_LicenseRelease");

                entity.Property(e => e.RegistrationTimeIssueLicensingForPublicOldGamesLicenseRelease).HasColumnName("RegistrationTime_IssueLicensingForPublicOldGames_LicenseRelease");

                entity.Property(e => e.UplImageDistributorLicense).HasColumnName("uplImageDistributorLicense");
            });

            modelBuilder.Entity<IssueLicensingForPublicOldGamesRequestIssuanceLicense>(entity =>
            {
                entity.ToTable("IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.AuditStatusIssueLicensingForPublicOldGamesRequestIssuanceLicense).HasColumnName("AuditStatus_IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorIssueLicensingForPublicOldGamesRequestIssuanceLicense).HasColumnName("Creator_IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.InstanceIdIssueLicensingForPublicOldGamesRequestIssuanceLicense).HasColumnName("InstanceId_IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.InstanceSridIssueLicensingForPublicOldGamesRequestIssuanceLicense).HasColumnName("InstanceSRId_IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.IpIssueLicensingForPublicOldGamesRequestIssuanceLicense).HasColumnName("IP_IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.RegistrationDateIssueLicensingForPublicOldGamesRequestIssuanceLicense).HasColumnName("RegistrationDate_IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.RegistrationStatusIssueLicensingForPublicOldGamesRequestIssuanceLicense).HasColumnName("RegistrationStatus_IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.RegistrationTimeIssueLicensingForPublicOldGamesRequestIssuanceLicense).HasColumnName("RegistrationTime_IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.UplImageOfGameVolet).HasColumnName("uplImageOfGameVolet");
            });

            modelBuilder.Entity<IssueLicensingForPublicOldGamesRequestReissueIssueLicense>(entity =>
            {
                entity.ToTable("IssueLicensingForPublicOldGames_RequestReissueIssueLicense");

                entity.Property(e => e.AuditStatusIssueLicensingForPublicOldGamesRequestReissueIssueLicense).HasColumnName("AuditStatus_IssueLicensingForPublicOldGames_RequestReissueIssueLicense");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorIssueLicensingForPublicOldGamesRequestReissueIssueLicense).HasColumnName("Creator_IssueLicensingForPublicOldGames_RequestReissueIssueLicense");

                entity.Property(e => e.InstanceIdIssueLicensingForPublicOldGamesRequestReissueIssueLicense).HasColumnName("InstanceId_IssueLicensingForPublicOldGames_RequestReissueIssueLicense");

                entity.Property(e => e.InstanceSridIssueLicensingForPublicOldGamesRequestReissueIssueLicense).HasColumnName("InstanceSRId_IssueLicensingForPublicOldGames_RequestReissueIssueLicense");

                entity.Property(e => e.IpIssueLicensingForPublicOldGamesRequestReissueIssueLicense).HasColumnName("IP_IssueLicensingForPublicOldGames_RequestReissueIssueLicense");

                entity.Property(e => e.RegistrationDateIssueLicensingForPublicOldGamesRequestReissueIssueLicense).HasColumnName("RegistrationDate_IssueLicensingForPublicOldGames_RequestReissueIssueLicense");

                entity.Property(e => e.RegistrationStatusIssueLicensingForPublicOldGamesRequestReissueIssueLicense).HasColumnName("RegistrationStatus_IssueLicensingForPublicOldGames_RequestReissueIssueLicense");

                entity.Property(e => e.RegistrationTimeIssueLicensingForPublicOldGamesRequestReissueIssueLicense).HasColumnName("RegistrationTime_IssueLicensingForPublicOldGames_RequestReissueIssueLicense");

                entity.Property(e => e.UplImageOfGameVolet).HasColumnName("uplImageOfGameVolet");
            });

            modelBuilder.Entity<IssueLicensingForPublicOldGamesReviewDeputyNezarat>(entity =>
            {
                entity.ToTable("IssueLicensingForPublicOldGames_ReviewDeputyNezarat");

                entity.Property(e => e.AuditStatusIssueLicensingForPublicOldGamesReviewDeputyNezarat).HasColumnName("AuditStatus_IssueLicensingForPublicOldGames_ReviewDeputyNezarat");

                entity.Property(e => e.AxtRefusedRequests).HasColumnName("axtRefusedRequests");

                entity.Property(e => e.CreatorIssueLicensingForPublicOldGamesReviewDeputyNezarat).HasColumnName("Creator_IssueLicensingForPublicOldGames_ReviewDeputyNezarat");

                entity.Property(e => e.DdlResultReview).HasColumnName("ddlResultReview");

                entity.Property(e => e.InstanceIdIssueLicensingForPublicOldGamesReviewDeputyNezarat).HasColumnName("InstanceId_IssueLicensingForPublicOldGames_ReviewDeputyNezarat");

                entity.Property(e => e.InstanceSridIssueLicensingForPublicOldGamesReviewDeputyNezarat).HasColumnName("InstanceSRId_IssueLicensingForPublicOldGames_ReviewDeputyNezarat");

                entity.Property(e => e.IpIssueLicensingForPublicOldGamesReviewDeputyNezarat).HasColumnName("IP_IssueLicensingForPublicOldGames_ReviewDeputyNezarat");

                entity.Property(e => e.RegistrationDateIssueLicensingForPublicOldGamesReviewDeputyNezarat).HasColumnName("RegistrationDate_IssueLicensingForPublicOldGames_ReviewDeputyNezarat");

                entity.Property(e => e.RegistrationStatusIssueLicensingForPublicOldGamesReviewDeputyNezarat).HasColumnName("RegistrationStatus_IssueLicensingForPublicOldGames_ReviewDeputyNezarat");

                entity.Property(e => e.RegistrationTimeIssueLicensingForPublicOldGamesReviewDeputyNezarat).HasColumnName("RegistrationTime_IssueLicensingForPublicOldGames_ReviewDeputyNezarat");
            });

            modelBuilder.Entity<IssueLicensingForPublicOldGamesReviewManagerEsra>(entity =>
            {
                entity.ToTable("IssueLicensingForPublicOldGames_ReviewManagerEsra");

                entity.Property(e => e.AuditStatusIssueLicensingForPublicOldGamesReviewManagerEsra).HasColumnName("AuditStatus_IssueLicensingForPublicOldGames_ReviewManagerEsra");

                entity.Property(e => e.AxtRefusedRequests).HasColumnName("axtRefusedRequests");

                entity.Property(e => e.CreatorIssueLicensingForPublicOldGamesReviewManagerEsra).HasColumnName("Creator_IssueLicensingForPublicOldGames_ReviewManagerEsra");

                entity.Property(e => e.DdlResultReview).HasColumnName("ddlResultReview");

                entity.Property(e => e.InstanceIdIssueLicensingForPublicOldGamesReviewManagerEsra).HasColumnName("InstanceId_IssueLicensingForPublicOldGames_ReviewManagerEsra");

                entity.Property(e => e.InstanceSridIssueLicensingForPublicOldGamesReviewManagerEsra).HasColumnName("InstanceSRId_IssueLicensingForPublicOldGames_ReviewManagerEsra");

                entity.Property(e => e.IpIssueLicensingForPublicOldGamesReviewManagerEsra).HasColumnName("IP_IssueLicensingForPublicOldGames_ReviewManagerEsra");

                entity.Property(e => e.RegistrationDateIssueLicensingForPublicOldGamesReviewManagerEsra).HasColumnName("RegistrationDate_IssueLicensingForPublicOldGames_ReviewManagerEsra");

                entity.Property(e => e.RegistrationStatusIssueLicensingForPublicOldGamesReviewManagerEsra).HasColumnName("RegistrationStatus_IssueLicensingForPublicOldGames_ReviewManagerEsra");

                entity.Property(e => e.RegistrationTimeIssueLicensingForPublicOldGamesReviewManagerEsra).HasColumnName("RegistrationTime_IssueLicensingForPublicOldGames_ReviewManagerEsra");
            });

            modelBuilder.Entity<IssueRequest>(entity =>
            {
                entity.ToTable("issueRequest");

                entity.Property(e => e.AuditStatusIssueRequest).HasColumnName("AuditStatus_issueRequest");

                entity.Property(e => e.CreatorIssueRequest).HasColumnName("Creator_issueRequest");

                entity.Property(e => e.InstanceIdIssueRequest).HasColumnName("InstanceId_issueRequest");

                entity.Property(e => e.InstanceSridIssueRequest).HasColumnName("InstanceSRId_issueRequest");

                entity.Property(e => e.IpIssueRequest).HasColumnName("IP_issueRequest");

                entity.Property(e => e.RegistrationDateIssueRequest).HasColumnName("RegistrationDate_issueRequest");

                entity.Property(e => e.RegistrationStatusIssueRequest).HasColumnName("RegistrationStatus_issueRequest");

                entity.Property(e => e.RegistrationTimeIssueRequest).HasColumnName("RegistrationTime_issueRequest");

                entity.Property(e => e.TxtIssue).HasColumnName("txtIssue");
            });

            modelBuilder.Entity<IssuingPublishCertificate>(entity =>
            {
                entity.Property(e => e.AuditStatusIssuingPublishCertificate).HasColumnName("AuditStatus_IssuingPublishCertificate");

                entity.Property(e => e.CreatorIssuingPublishCertificate).HasColumnName("Creator_IssuingPublishCertificate");

                entity.Property(e => e.InstanceIdIssuingPublishCertificate).HasColumnName("InstanceId_IssuingPublishCertificate");

                entity.Property(e => e.InstanceSridIssuingPublishCertificate).HasColumnName("InstanceSRId_IssuingPublishCertificate");

                entity.Property(e => e.IpIssuingPublishCertificate).HasColumnName("IP_IssuingPublishCertificate");

                entity.Property(e => e.PrePccode).HasColumnName("PrePCCode");

                entity.Property(e => e.RegistrationDateIssuingPublishCertificate).HasColumnName("RegistrationDate_IssuingPublishCertificate");

                entity.Property(e => e.RegistrationStatusIssuingPublishCertificate).HasColumnName("RegistrationStatus_IssuingPublishCertificate");

                entity.Property(e => e.RegistrationTimeIssuingPublishCertificate).HasColumnName("RegistrationTime_IssuingPublishCertificate");
            });

            modelBuilder.Entity<JobBackgrounds>(entity =>
            {
                entity.HasIndex(e => e.PersonId)
                    .HasName("IX_PersonId");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.JobBackgrounds)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_dbo.JobBackgrounds_dbo.People_PersonId");
            });

            modelBuilder.Entity<Laws>(entity =>
            {
                entity.HasIndex(e => e.FormDetailId)
                    .HasName("IX_FormDetailId");

                entity.HasOne(d => d.FormDetail)
                    .WithMany(p => p.Laws)
                    .HasForeignKey(d => d.FormDetailId)
                    .HasConstraintName("FK_dbo.Laws_dbo.FormDetails_FormDetailId");
            });

            modelBuilder.Entity<LegalDocUpload>(entity =>
            {
                entity.Property(e => e.AgentBcpic).HasColumnName("AgentBCPic");

                entity.Property(e => e.AgentNcardPic).HasColumnName("AgentNCardPic");

                entity.Property(e => e.AuditStatusLegalDocUpload).HasColumnName("AuditStatus_LegalDocUpload");

                entity.Property(e => e.CreatorLegalDocUpload).HasColumnName("Creator_LegalDocUpload");

                entity.Property(e => e.InstanceIdLegalDocUpload).HasColumnName("InstanceId_LegalDocUpload");

                entity.Property(e => e.InstanceSridLegalDocUpload).HasColumnName("InstanceSRId_LegalDocUpload");

                entity.Property(e => e.IpLegalDocUpload).HasColumnName("IP_LegalDocUpload");

                entity.Property(e => e.RegistrationDateLegalDocUpload).HasColumnName("RegistrationDate_LegalDocUpload");

                entity.Property(e => e.RegistrationStatusLegalDocUpload).HasColumnName("RegistrationStatus_LegalDocUpload");

                entity.Property(e => e.RegistrationTimeLegalDocUpload).HasColumnName("RegistrationTime_LegalDocUpload");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");
            });

            modelBuilder.Entity<LegalPersonRegistrationApplyAwardAndHonors>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationApplyAwardAndHonors).HasColumnName("AuditStatus_LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.CreatorLegalPersonRegistrationApplyAwardAndHonors).HasColumnName("Creator_LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.DdlAwardsHonors1).HasColumnName("ddlAwardsHonors_1");

                entity.Property(e => e.DdlAwardsHonors4).HasColumnName("ddlAwardsHonors_4");

                entity.Property(e => e.DdlAwardsHonors7).HasColumnName("ddlAwardsHonors_7");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationApplyAwardAndHonors).HasColumnName("InstanceId_LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationApplyAwardAndHonors).HasColumnName("InstanceSRId_LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.IpLegalPersonRegistrationApplyAwardAndHonors).HasColumnName("IP_LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationApplyAwardAndHonors).HasColumnName("RegistrationDate_LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationApplyAwardAndHonors).HasColumnName("RegistrationStatus_LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationApplyAwardAndHonors).HasColumnName("RegistrationTime_LegalPersonRegistration_ApplyAwardAndHonors");
            });

            modelBuilder.Entity<LegalPersonRegistrationApplyAwardAndHonorsSub1>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationApplyAwardAndHonorsSub1).HasColumnName("AuditStatus_LegalPersonRegistration_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.CreatorLegalPersonRegistrationApplyAwardAndHonorsSub1).HasColumnName("Creator_LegalPersonRegistration_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.DdlFestivalInformation).HasColumnName("ddlFestivalInformation");

                entity.Property(e => e.DdlFestivalInformation3).HasColumnName("ddlFestivalInformation_3");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationApplyAwardAndHonorsSub1).HasColumnName("InstanceId_LegalPersonRegistration_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationApplyAwardAndHonorsSub1).HasColumnName("InstanceSRId_LegalPersonRegistration_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.IpLegalPersonRegistrationApplyAwardAndHonorsSub1).HasColumnName("IP_LegalPersonRegistration_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationApplyAwardAndHonorsSub1).HasColumnName("RegistrationDate_LegalPersonRegistration_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationApplyAwardAndHonorsSub1).HasColumnName("RegistrationStatus_LegalPersonRegistration_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationApplyAwardAndHonorsSub1).HasColumnName("RegistrationTime_LegalPersonRegistration_ApplyAwardAndHonors_sub1");

                entity.Property(e => e.TxtFestivalInformation2).HasColumnName("txtFestivalInformation_2");

                entity.Property(e => e.TxtFestivalInformation4).HasColumnName("txtFestivalInformation_4");

                entity.Property(e => e.UplFestivalInformation5).HasColumnName("uplFestivalInformation_5");
            });

            modelBuilder.Entity<LegalPersonRegistrationApplyAwardAndHonorsSub2>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationApplyAwardAndHonorsSub2).HasColumnName("AuditStatus_LegalPersonRegistration_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.CreatorLegalPersonRegistrationApplyAwardAndHonorsSub2).HasColumnName("Creator_LegalPersonRegistration_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationApplyAwardAndHonorsSub2).HasColumnName("InstanceId_LegalPersonRegistration_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationApplyAwardAndHonorsSub2).HasColumnName("InstanceSRId_LegalPersonRegistration_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.IpLegalPersonRegistrationApplyAwardAndHonorsSub2).HasColumnName("IP_LegalPersonRegistration_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationApplyAwardAndHonorsSub2).HasColumnName("RegistrationDate_LegalPersonRegistration_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationApplyAwardAndHonorsSub2).HasColumnName("RegistrationStatus_LegalPersonRegistration_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationApplyAwardAndHonorsSub2).HasColumnName("RegistrationTime_LegalPersonRegistration_ApplyAwardAndHonors_sub2");

                entity.Property(e => e.TxtAcceptedArticles).HasColumnName("txtAcceptedArticles");

                entity.Property(e => e.TxtAcceptedArticles2).HasColumnName("txtAcceptedArticles2");

                entity.Property(e => e.UplAcceptedArticles3).HasColumnName("uplAcceptedArticles3");
            });

            modelBuilder.Entity<LegalPersonRegistrationApplyAwardAndHonorsSub3>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_ApplyAwardAndHonors_sub3");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationApplyAwardAndHonorsSub3).HasColumnName("AuditStatus_LegalPersonRegistration_ApplyAwardAndHonors_sub3");

                entity.Property(e => e.CreatorLegalPersonRegistrationApplyAwardAndHonorsSub3).HasColumnName("Creator_LegalPersonRegistration_ApplyAwardAndHonors_sub3");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationApplyAwardAndHonorsSub3).HasColumnName("InstanceId_LegalPersonRegistration_ApplyAwardAndHonors_sub3");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationApplyAwardAndHonorsSub3).HasColumnName("InstanceSRId_LegalPersonRegistration_ApplyAwardAndHonors_sub3");

                entity.Property(e => e.IpLegalPersonRegistrationApplyAwardAndHonorsSub3).HasColumnName("IP_LegalPersonRegistration_ApplyAwardAndHonors_sub3");

                entity.Property(e => e.PdateExhibitVisit3).HasColumnName("pdateExhibitVisit_3");

                entity.Property(e => e.PdateExhibitVisit3Gregorian)
                    .HasColumnName("pdateExhibitVisit_3_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationApplyAwardAndHonorsSub3).HasColumnName("RegistrationDate_LegalPersonRegistration_ApplyAwardAndHonors_sub3");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationApplyAwardAndHonorsSub3).HasColumnName("RegistrationStatus_LegalPersonRegistration_ApplyAwardAndHonors_sub3");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationApplyAwardAndHonorsSub3).HasColumnName("RegistrationTime_LegalPersonRegistration_ApplyAwardAndHonors_sub3");

                entity.Property(e => e.TxtExhibitVisit1).HasColumnName("txtExhibitVisit_1");

                entity.Property(e => e.TxtExhibitVisit2).HasColumnName("txtExhibitVisit_2");

                entity.Property(e => e.TxtExhibitVisit4).HasColumnName("txtExhibitVisit_4");

                entity.Property(e => e.TxtExhibitVisit5).HasColumnName("txtExhibitVisit5");

                entity.Property(e => e.UplExhibitVisit5).HasColumnName("uplExhibitVisit_5");
            });

            modelBuilder.Entity<LegalPersonRegistrationCompleteGameInfo>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_CompleteGameInfo");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationCompleteGameInfo).HasColumnName("AuditStatus_LegalPersonRegistration_CompleteGameInfo");

                entity.Property(e => e.CreatorLegalPersonRegistrationCompleteGameInfo).HasColumnName("Creator_LegalPersonRegistration_CompleteGameInfo");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationCompleteGameInfo).HasColumnName("InstanceId_LegalPersonRegistration_CompleteGameInfo");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationCompleteGameInfo).HasColumnName("InstanceSRId_LegalPersonRegistration_CompleteGameInfo");

                entity.Property(e => e.IpLegalPersonRegistrationCompleteGameInfo).HasColumnName("IP_LegalPersonRegistration_CompleteGameInfo");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationCompleteGameInfo).HasColumnName("RegistrationDate_LegalPersonRegistration_CompleteGameInfo");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationCompleteGameInfo).HasColumnName("RegistrationStatus_LegalPersonRegistration_CompleteGameInfo");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationCompleteGameInfo).HasColumnName("RegistrationTime_LegalPersonRegistration_CompleteGameInfo");
            });

            modelBuilder.Entity<LegalPersonRegistrationCompleteGameInfoSubForm>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_CompleteGameInfo_SubForm");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationCompleteGameInfoSubForm).HasColumnName("AuditStatus_LegalPersonRegistration_CompleteGameInfo_SubForm");

                entity.Property(e => e.CreatorLegalPersonRegistrationCompleteGameInfoSubForm).HasColumnName("Creator_LegalPersonRegistration_CompleteGameInfo_SubForm");

                entity.Property(e => e.DdlGameCompatibilityTests).HasColumnName("ddlGameCompatibilityTests");

                entity.Property(e => e.DdlGameInfoEntry1).HasColumnName("ddlGameInfoEntry1");

                entity.Property(e => e.DdlGameInfoEntry2).HasColumnName("ddlGameInfoEntry2");

                entity.Property(e => e.DdlGameInfoEntry4).HasColumnName("ddlGameInfoEntry4");

                entity.Property(e => e.DdlGamePerformance).HasColumnName("ddlGamePerformance");

                entity.Property(e => e.DdlPlatform).HasColumnName("ddlPlatform");

                entity.Property(e => e.DdlRunningOnlineSupport).HasColumnName("ddlRunningOnlineSupport");

                entity.Property(e => e.DdlTypeGame).HasColumnName("ddlTypeGame");

                entity.Property(e => e.DdlTypeOfGame).HasColumnName("ddlTypeOfGame");

                entity.Property(e => e.GameInfoEntry2).HasColumnName("GameInfoEntry_2");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationCompleteGameInfoSubForm).HasColumnName("InstanceId_LegalPersonRegistration_CompleteGameInfo_SubForm");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationCompleteGameInfoSubForm).HasColumnName("InstanceSRId_LegalPersonRegistration_CompleteGameInfo_SubForm");

                entity.Property(e => e.IpLegalPersonRegistrationCompleteGameInfoSubForm).HasColumnName("IP_LegalPersonRegistration_CompleteGameInfo_SubForm");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationCompleteGameInfoSubForm).HasColumnName("RegistrationDate_LegalPersonRegistration_CompleteGameInfo_SubForm");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationCompleteGameInfoSubForm).HasColumnName("RegistrationStatus_LegalPersonRegistration_CompleteGameInfo_SubForm");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationCompleteGameInfoSubForm).HasColumnName("RegistrationTime_LegalPersonRegistration_CompleteGameInfo_SubForm");

                entity.Property(e => e.TxtGameInfoEntry22).HasColumnName("txtGameInfoEntry_22");

                entity.Property(e => e.TxtGameInfoEntry24).HasColumnName("txtGameInfoEntry_24");

                entity.Property(e => e.TxtGameInfoEntry3).HasColumnName("txtGameInfoEntry3");

                entity.Property(e => e.TxtGameInfoEntry6).HasColumnName("txtGameInfoEntry6");

                entity.Property(e => e.TxtGameInfoEntry7).HasColumnName("txtGameInfoEntry7");

                entity.Property(e => e.TxtGameInfoEntry8).HasColumnName("txtGameInfoEntry8");

                entity.Property(e => e.TxtGameLaunch).HasColumnName("txtGameLaunch");

                entity.Property(e => e.TxtGameLaunchGregorian)
                    .HasColumnName("txtGameLaunch_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.TxtGameTitle).HasColumnName("txtGameTitle");

                entity.Property(e => e.TxtInsertItAsTitle).HasColumnName("txtInsertItAsTitle");

                entity.Property(e => e.UplCopyOfResults).HasColumnName("uplCopyOfResults");

                entity.Property(e => e.UplCopyResults).HasColumnName("uplCopyResults");

                entity.Property(e => e.UplGameInfoEntry15).HasColumnName("uplGameInfoEntry15");

                entity.Property(e => e.UplGameInfoEntry3).HasColumnName("uplGameInfoEntry_3");

                entity.Property(e => e.UplGameInfoEntry9).HasColumnName("uplGameInfoEntry9");
            });

            modelBuilder.Entity<LegalPersonRegistrationCompletePreRegistrationForm>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_CompletePreRegistrationForm");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationCompletePreRegistrationForm).HasColumnName("AuditStatus_LegalPersonRegistration_CompletePreRegistrationForm");

                entity.Property(e => e.CreatorLegalPersonRegistrationCompletePreRegistrationForm).HasColumnName("Creator_LegalPersonRegistration_CompletePreRegistrationForm");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationCompletePreRegistrationForm).HasColumnName("InstanceId_LegalPersonRegistration_CompletePreRegistrationForm");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationCompletePreRegistrationForm).HasColumnName("InstanceSRId_LegalPersonRegistration_CompletePreRegistrationForm");

                entity.Property(e => e.IpLegalPersonRegistrationCompletePreRegistrationForm).HasColumnName("IP_LegalPersonRegistration_CompletePreRegistrationForm");

                entity.Property(e => e.MailEmail).HasColumnName("mailEmail");

                entity.Property(e => e.NumNationalCode).HasColumnName("numNationalCode");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationCompletePreRegistrationForm).HasColumnName("RegistrationDate_LegalPersonRegistration_CompletePreRegistrationForm");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationCompletePreRegistrationForm).HasColumnName("RegistrationStatus_LegalPersonRegistration_CompletePreRegistrationForm");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationCompletePreRegistrationForm).HasColumnName("RegistrationTime_LegalPersonRegistration_CompletePreRegistrationForm");

                entity.Property(e => e.TxtLastName).HasColumnName("txtLastName");

                entity.Property(e => e.TxtName).HasColumnName("txtName");

                entity.Property(e => e.TxtPassword).HasColumnName("txtPassword");

                entity.Property(e => e.TxtPassword2).HasColumnName("txtPassword2");
            });

            modelBuilder.Entity<LegalPersonRegistrationCompletingIdentityInformation>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_CompletingIdentityInformation");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationCompletingIdentityInformation).HasColumnName("AuditStatus_LegalPersonRegistration_CompletingIdentityInformation");

                entity.Property(e => e.CreatorLegalPersonRegistrationCompletingIdentityInformation).HasColumnName("Creator_LegalPersonRegistration_CompletingIdentityInformation");

                entity.Property(e => e.DdlIdentity25).HasColumnName("ddlIdentity_25");

                entity.Property(e => e.DdlLdentifyKnowledgeBase).HasColumnName("ddlLdentifyKnowledgeBase");

                entity.Property(e => e.DdlLegalStatus).HasColumnName("ddlLegalStatus");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationCompletingIdentityInformation).HasColumnName("InstanceId_LegalPersonRegistration_CompletingIdentityInformation");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationCompletingIdentityInformation).HasColumnName("InstanceSRId_LegalPersonRegistration_CompletingIdentityInformation");

                entity.Property(e => e.IpLegalPersonRegistrationCompletingIdentityInformation).HasColumnName("IP_LegalPersonRegistration_CompletingIdentityInformation");

                entity.Property(e => e.MailEAddress).HasColumnName("mailE_Address");

                entity.Property(e => e.MailEAddressInterface).HasColumnName("mailE_AddressInterface");

                entity.Property(e => e.NumCallingNumber).HasColumnName("numCallingNumber");

                entity.Property(e => e.NumContactNumber).HasColumnName("numContactNumber");

                entity.Property(e => e.NumCorporateInsuranceList).HasColumnName("numCorporateInsuranceList");

                entity.Property(e => e.NumDomesticIncome).HasColumnName("numDomesticIncome");

                entity.Property(e => e.NumNationalNumber).HasColumnName("numNationalNumber");

                entity.Property(e => e.NumPartTimePersonnel).HasColumnName("numPartTimePersonnel");

                entity.Property(e => e.NumnumberRegistration).HasColumnName("NUMNumberRegistration");

                entity.Property(e => e.PdateEstablished).HasColumnName("pdateEstablished");

                entity.Property(e => e.PdateEstablishedGregorian)
                    .HasColumnName("pdateEstablished_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationCompletingIdentityInformation).HasColumnName("RegistrationDate_LegalPersonRegistration_CompletingIdentityInformation");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationCompletingIdentityInformation).HasColumnName("RegistrationStatus_LegalPersonRegistration_CompletingIdentityInformation");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationCompletingIdentityInformation).HasColumnName("RegistrationTime_LegalPersonRegistration_CompletingIdentityInformation");

                entity.Property(e => e.TatNameCeo).HasColumnName("tatNameCEO");

                entity.Property(e => e.TxtCompanyName).HasColumnName("txtCompanyName");

                entity.Property(e => e.TxtContactNumberCeo).HasColumnName("txtContactNumberCEO");

                entity.Property(e => e.TxtEconomicCode).HasColumnName("txtEconomicCode");

                entity.Property(e => e.TxtIdentity26).HasColumnName("txtIdentity_26");

                entity.Property(e => e.TxtIdentity29).HasColumnName("txtIdentity_29");

                entity.Property(e => e.TxtInterfaceName).HasColumnName("txtInterfaceName");

                entity.Property(e => e.TxtPlaceOfRegistration).HasColumnName("txtPlaceOfRegistration");

                entity.Property(e => e.TxtSiteAddress).HasColumnName("txtSiteAddress");

                entity.Property(e => e.Txtlocation).HasColumnName("txtlocation");

                entity.Property(e => e.UplAmountForeignIncome).HasColumnName("uplAmountForeignIncome");

                entity.Property(e => e.UplCompanyLogo).HasColumnName("uplCompanyLogo");

                entity.Property(e => e.UplIdentity27).HasColumnName("uplIdentity_27");

                entity.Property(e => e.UplIdentity28).HasColumnName("uplIdentity_28");

                entity.Property(e => e.UplIdentity30).HasColumnName("uplIdentity_30");

                entity.Property(e => e.UplIdentity31).HasColumnName("uplIdentity_31");

                entity.Property(e => e.UplIdentity32).HasColumnName("uplIdentity_32");

                entity.Property(e => e.UplLastInsuranceList).HasColumnName("uplLastInsuranceList");

                entity.Property(e => e.UplOfficialLetterImage).HasColumnName("uplOfficialLetterImage");
            });

            modelBuilder.Entity<LegalPersonRegistrationRecordAllDocuments>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_RecordAllDocuments");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationRecordAllDocuments).HasColumnName("AuditStatus_LegalPersonRegistration_RecordAllDocuments");

                entity.Property(e => e.CkeDescription).HasColumnName("ckeDescription");

                entity.Property(e => e.CreatorLegalPersonRegistrationRecordAllDocuments).HasColumnName("Creator_LegalPersonRegistration_RecordAllDocuments");

                entity.Property(e => e.DdlStatusReceivedForm).HasColumnName("ddlStatusReceivedForm");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationRecordAllDocuments).HasColumnName("InstanceId_LegalPersonRegistration_RecordAllDocuments");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationRecordAllDocuments).HasColumnName("InstanceSRId_LegalPersonRegistration_RecordAllDocuments");

                entity.Property(e => e.IpLegalPersonRegistrationRecordAllDocuments).HasColumnName("IP_LegalPersonRegistration_RecordAllDocuments");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationRecordAllDocuments).HasColumnName("RegistrationDate_LegalPersonRegistration_RecordAllDocuments");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationRecordAllDocuments).HasColumnName("RegistrationStatus_LegalPersonRegistration_RecordAllDocuments");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationRecordAllDocuments).HasColumnName("RegistrationTime_LegalPersonRegistration_RecordAllDocuments");
            });

            modelBuilder.Entity<LegalPersonRegistrationRequestAdditionalInformation>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_RequestAdditionalInformation");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationRequestAdditionalInformation).HasColumnName("AuditStatus_LegalPersonRegistration_RequestAdditionalInformation");

                entity.Property(e => e.ChkAdditionalDocuments10).HasColumnName("chkAdditionalDocuments_10");

                entity.Property(e => e.CreatorLegalPersonRegistrationRequestAdditionalInformation).HasColumnName("Creator_LegalPersonRegistration_RequestAdditionalInformation");

                entity.Property(e => e.DdlAdditionalDocuments1).HasColumnName("ddlAdditionalDocuments_1");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationRequestAdditionalInformation).HasColumnName("InstanceId_LegalPersonRegistration_RequestAdditionalInformation");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationRequestAdditionalInformation).HasColumnName("InstanceSRId_LegalPersonRegistration_RequestAdditionalInformation");

                entity.Property(e => e.IpLegalPersonRegistrationRequestAdditionalInformation).HasColumnName("IP_LegalPersonRegistration_RequestAdditionalInformation");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationRequestAdditionalInformation).HasColumnName("RegistrationDate_LegalPersonRegistration_RequestAdditionalInformation");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationRequestAdditionalInformation).HasColumnName("RegistrationStatus_LegalPersonRegistration_RequestAdditionalInformation");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationRequestAdditionalInformation).HasColumnName("RegistrationTime_LegalPersonRegistration_RequestAdditionalInformation");
            });

            modelBuilder.Entity<LegalPersonRegistrationRequestAdditionalInformationSub1>(entity =>
            {
                entity.ToTable("LegalPersonRegistration_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.AuditStatusLegalPersonRegistrationRequestAdditionalInformationSub1).HasColumnName("AuditStatus_LegalPersonRegistration_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.CreatorLegalPersonRegistrationRequestAdditionalInformationSub1).HasColumnName("Creator_LegalPersonRegistration_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.DdlApprenticeship6).HasColumnName("ddlApprenticeship_6");

                entity.Property(e => e.InstanceIdLegalPersonRegistrationRequestAdditionalInformationSub1).HasColumnName("InstanceId_LegalPersonRegistration_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.InstanceSridLegalPersonRegistrationRequestAdditionalInformationSub1).HasColumnName("InstanceSRId_LegalPersonRegistration_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.IpLegalPersonRegistrationRequestAdditionalInformationSub1).HasColumnName("IP_LegalPersonRegistration_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.PdateApprenticeship2).HasColumnName("pdateApprenticeship_2");

                entity.Property(e => e.PdateApprenticeship2Gregorian)
                    .HasColumnName("pdateApprenticeship_2_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.PdateApprenticeship3).HasColumnName("pdateApprenticeship_3");

                entity.Property(e => e.PdateApprenticeship3Gregorian)
                    .HasColumnName("pdateApprenticeship_3_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateLegalPersonRegistrationRequestAdditionalInformationSub1).HasColumnName("RegistrationDate_LegalPersonRegistration_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.RegistrationStatusLegalPersonRegistrationRequestAdditionalInformationSub1).HasColumnName("RegistrationStatus_LegalPersonRegistration_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.RegistrationTimeLegalPersonRegistrationRequestAdditionalInformationSub1).HasColumnName("RegistrationTime_LegalPersonRegistration_RequestAdditionalInformation_Sub1");

                entity.Property(e => e.TxtApprenticeship1).HasColumnName("txtApprenticeship_1");

                entity.Property(e => e.TxtApprenticeship4).HasColumnName("txtApprenticeship_4");

                entity.Property(e => e.TxtApprenticeship5).HasColumnName("txtApprenticeship_5");
            });

            modelBuilder.Entity<LicenseIranianMobileGamesEsra>(entity =>
            {
                entity.ToTable("LicenseIranianMobileGames_ESRA");

                entity.Property(e => e.AuditStatusLicenseIranianMobileGamesEsra).HasColumnName("AuditStatus_LicenseIranianMobileGames_ESRA");

                entity.Property(e => e.CreatorLicenseIranianMobileGamesEsra).HasColumnName("Creator_LicenseIranianMobileGames_ESRA");

                entity.Property(e => e.InstanceIdLicenseIranianMobileGamesEsra).HasColumnName("InstanceId_LicenseIranianMobileGames_ESRA");

                entity.Property(e => e.InstanceSridLicenseIranianMobileGamesEsra).HasColumnName("InstanceSRId_LicenseIranianMobileGames_ESRA");

                entity.Property(e => e.IpLicenseIranianMobileGamesEsra).HasColumnName("IP_LicenseIranianMobileGames_ESRA");

                entity.Property(e => e.MailE5).HasColumnName("mailE_5");

                entity.Property(e => e.RegistrationDateLicenseIranianMobileGamesEsra).HasColumnName("RegistrationDate_LicenseIranianMobileGames_ESRA");

                entity.Property(e => e.RegistrationStatusLicenseIranianMobileGamesEsra).HasColumnName("RegistrationStatus_LicenseIranianMobileGames_ESRA");

                entity.Property(e => e.RegistrationTimeLicenseIranianMobileGamesEsra).HasColumnName("RegistrationTime_LicenseIranianMobileGames_ESRA");

                entity.Property(e => e.TxtE2).HasColumnName("txtE_2");

                entity.Property(e => e.TxtE3).HasColumnName("txtE_3");

                entity.Property(e => e.TxtE4).HasColumnName("txtE_4");
            });

            modelBuilder.Entity<LicenseIranianMobileGamesEsracheck>(entity =>
            {
                entity.ToTable("LicenseIranianMobileGames_ESRACheck");

                entity.Property(e => e.AuditStatusLicenseIranianMobileGamesEsracheck).HasColumnName("AuditStatus_LicenseIranianMobileGames_ESRACheck");

                entity.Property(e => e.CkEc5).HasColumnName("ckEC_5");

                entity.Property(e => e.CreatorLicenseIranianMobileGamesEsracheck).HasColumnName("Creator_LicenseIranianMobileGames_ESRACheck");

                entity.Property(e => e.DdlEc4).HasColumnName("ddlEC_4");

                entity.Property(e => e.InstanceIdLicenseIranianMobileGamesEsracheck).HasColumnName("InstanceId_LicenseIranianMobileGames_ESRACheck");

                entity.Property(e => e.InstanceSridLicenseIranianMobileGamesEsracheck).HasColumnName("InstanceSRId_LicenseIranianMobileGames_ESRACheck");

                entity.Property(e => e.IpLicenseIranianMobileGamesEsracheck).HasColumnName("IP_LicenseIranianMobileGames_ESRACheck");

                entity.Property(e => e.RegistrationDateLicenseIranianMobileGamesEsracheck).HasColumnName("RegistrationDate_LicenseIranianMobileGames_ESRACheck");

                entity.Property(e => e.RegistrationStatusLicenseIranianMobileGamesEsracheck).HasColumnName("RegistrationStatus_LicenseIranianMobileGames_ESRACheck");

                entity.Property(e => e.RegistrationTimeLicenseIranianMobileGamesEsracheck).HasColumnName("RegistrationTime_LicenseIranianMobileGames_ESRACheck");

                entity.Property(e => e.UplEc6).HasColumnName("uplEC_6");
            });

            modelBuilder.Entity<LicenseIranianMobileGamesGame>(entity =>
            {
                entity.ToTable("LicenseIranianMobileGames_Game");

                entity.Property(e => e.AuditStatusLicenseIranianMobileGamesGame).HasColumnName("AuditStatus_LicenseIranianMobileGames_Game");

                entity.Property(e => e.CreatorLicenseIranianMobileGamesGame).HasColumnName("Creator_LicenseIranianMobileGames_Game");

                entity.Property(e => e.DdlG3).HasColumnName("ddlG_3");

                entity.Property(e => e.DdlG5).HasColumnName("ddlG_5");

                entity.Property(e => e.DdlG8).HasColumnName("ddlG_8");

                entity.Property(e => e.InstanceIdLicenseIranianMobileGamesGame).HasColumnName("InstanceId_LicenseIranianMobileGames_Game");

                entity.Property(e => e.InstanceSridLicenseIranianMobileGamesGame).HasColumnName("InstanceSRId_LicenseIranianMobileGames_Game");

                entity.Property(e => e.IpLicenseIranianMobileGamesGame).HasColumnName("IP_LicenseIranianMobileGames_Game");

                entity.Property(e => e.MailG10).HasColumnName("mailG_10");

                entity.Property(e => e.NumG11).HasColumnName("numG_11");

                entity.Property(e => e.RegistrationDateLicenseIranianMobileGamesGame).HasColumnName("RegistrationDate_LicenseIranianMobileGames_Game");

                entity.Property(e => e.RegistrationStatusLicenseIranianMobileGamesGame).HasColumnName("RegistrationStatus_LicenseIranianMobileGames_Game");

                entity.Property(e => e.RegistrationTimeLicenseIranianMobileGamesGame).HasColumnName("RegistrationTime_LicenseIranianMobileGames_Game");

                entity.Property(e => e.TxtG1).HasColumnName("txtG_1");

                entity.Property(e => e.TxtG12).HasColumnName("txtG_12");

                entity.Property(e => e.TxtG13).HasColumnName("txtG_13");

                entity.Property(e => e.TxtG2).HasColumnName("txtG_2");

                entity.Property(e => e.TxtG4).HasColumnName("txtG_4");

                entity.Property(e => e.TxtG6).HasColumnName("txtG_6");

                entity.Property(e => e.TxtG7).HasColumnName("txtG_7");

                entity.Property(e => e.UplG9).HasColumnName("uplG_9");
            });

            modelBuilder.Entity<LicenseIranianMobileGamesPreRegister>(entity =>
            {
                entity.ToTable("LicenseIranianMobileGames_PreRegister");

                entity.Property(e => e.AuditStatusLicenseIranianMobileGamesPreRegister).HasColumnName("AuditStatus_LicenseIranianMobileGames_PreRegister");

                entity.Property(e => e.CreatorLicenseIranianMobileGamesPreRegister).HasColumnName("Creator_LicenseIranianMobileGames_PreRegister");

                entity.Property(e => e.InstanceIdLicenseIranianMobileGamesPreRegister).HasColumnName("InstanceId_LicenseIranianMobileGames_PreRegister");

                entity.Property(e => e.InstanceSridLicenseIranianMobileGamesPreRegister).HasColumnName("InstanceSRId_LicenseIranianMobileGames_PreRegister");

                entity.Property(e => e.IpLicenseIranianMobileGamesPreRegister).HasColumnName("IP_LicenseIranianMobileGames_PreRegister");

                entity.Property(e => e.MailPp6).HasColumnName("mailPP_6");

                entity.Property(e => e.RegistrationDateLicenseIranianMobileGamesPreRegister).HasColumnName("RegistrationDate_LicenseIranianMobileGames_PreRegister");

                entity.Property(e => e.RegistrationStatusLicenseIranianMobileGamesPreRegister).HasColumnName("RegistrationStatus_LicenseIranianMobileGames_PreRegister");

                entity.Property(e => e.RegistrationTimeLicenseIranianMobileGamesPreRegister).HasColumnName("RegistrationTime_LicenseIranianMobileGames_PreRegister");

                entity.Property(e => e.TxtPp1).HasColumnName("txtPP_1");

                entity.Property(e => e.TxtPp2).HasColumnName("txtPP_2");

                entity.Property(e => e.TxtPp3).HasColumnName("txtPP_3");

                entity.Property(e => e.TxtPp4).HasColumnName("txtPP_4");

                entity.Property(e => e.TxtPp5).HasColumnName("txtPP_5");
            });

            modelBuilder.Entity<LicenseIranianMobileGamesQuestionnaireForm>(entity =>
            {
                entity.ToTable("LicenseIranianMobileGames_QuestionnaireForm");

                entity.Property(e => e.AuditStatusLicenseIranianMobileGamesQuestionnaireForm).HasColumnName("AuditStatus_LicenseIranianMobileGames_QuestionnaireForm");

                entity.Property(e => e.ChkQuestionnair53).HasColumnName("chkQuestionnair53");

                entity.Property(e => e.ChkQuestionnaire2).HasColumnName("chkQuestionnaire2");

                entity.Property(e => e.CreatorLicenseIranianMobileGamesQuestionnaireForm).HasColumnName("Creator_LicenseIranianMobileGames_QuestionnaireForm");

                entity.Property(e => e.InstanceIdLicenseIranianMobileGamesQuestionnaireForm).HasColumnName("InstanceId_LicenseIranianMobileGames_QuestionnaireForm");

                entity.Property(e => e.InstanceSridLicenseIranianMobileGamesQuestionnaireForm).HasColumnName("InstanceSRId_LicenseIranianMobileGames_QuestionnaireForm");

                entity.Property(e => e.IpLicenseIranianMobileGamesQuestionnaireForm).HasColumnName("IP_LicenseIranianMobileGames_QuestionnaireForm");

                entity.Property(e => e.RdcQuestionnair16).HasColumnName("rdcQuestionnair16");

                entity.Property(e => e.RdcQuestionnair17).HasColumnName("rdcQuestionnair17");

                entity.Property(e => e.RdcQuestionnair18).HasColumnName("rdcQuestionnair18");

                entity.Property(e => e.RdcQuestionnair19).HasColumnName("rdcQuestionnair19");

                entity.Property(e => e.RdcQuestionnair20).HasColumnName("rdcQuestionnair20");

                entity.Property(e => e.RdcQuestionnair21).HasColumnName("rdcQuestionnair21");

                entity.Property(e => e.RdcQuestionnair22).HasColumnName("rdcQuestionnair22");

                entity.Property(e => e.RdcQuestionnair23).HasColumnName("rdcQuestionnair23");

                entity.Property(e => e.RdcQuestionnair24).HasColumnName("rdcQuestionnair24");

                entity.Property(e => e.RdcQuestionnair25).HasColumnName("rdcQuestionnair25");

                entity.Property(e => e.RdcQuestionnair26).HasColumnName("rdcQuestionnair26");

                entity.Property(e => e.RdcQuestionnair27).HasColumnName("rdcQuestionnair27");

                entity.Property(e => e.RdcQuestionnair28).HasColumnName("rdcQuestionnair28");

                entity.Property(e => e.RdcQuestionnair29).HasColumnName("rdcQuestionnair29");

                entity.Property(e => e.RdcQuestionnair30).HasColumnName("rdcQuestionnair30");

                entity.Property(e => e.RdcQuestionnair31).HasColumnName("rdcQuestionnair31");

                entity.Property(e => e.RdcQuestionnair32).HasColumnName("rdcQuestionnair32");

                entity.Property(e => e.RdcQuestionnair33).HasColumnName("rdcQuestionnair33");

                entity.Property(e => e.RdcQuestionnair34).HasColumnName("rdcQuestionnair34");

                entity.Property(e => e.RdcQuestionnair35).HasColumnName("rdcQuestionnair35");

                entity.Property(e => e.RdcQuestionnair36).HasColumnName("rdcQuestionnair36");

                entity.Property(e => e.RdcQuestionnair37).HasColumnName("rdcQuestionnair37");

                entity.Property(e => e.RdcQuestionnair38).HasColumnName("rdcQuestionnair38");

                entity.Property(e => e.RdcQuestionnair39).HasColumnName("rdcQuestionnair39");

                entity.Property(e => e.RdcQuestionnair40).HasColumnName("rdcQuestionnair40");

                entity.Property(e => e.RdcQuestionnair41).HasColumnName("rdcQuestionnair41");

                entity.Property(e => e.RdcQuestionnair42).HasColumnName("rdcQuestionnair42");

                entity.Property(e => e.RdcQuestionnair43).HasColumnName("rdcQuestionnair43");

                entity.Property(e => e.RdcQuestionnair44).HasColumnName("rdcQuestionnair44");

                entity.Property(e => e.RdcQuestionnair45).HasColumnName("rdcQuestionnair45");

                entity.Property(e => e.RdcQuestionnair46).HasColumnName("rdcQuestionnair46");

                entity.Property(e => e.RdcQuestionnair47).HasColumnName("rdcQuestionnair47");

                entity.Property(e => e.RdcQuestionnair48).HasColumnName("rdcQuestionnair48");

                entity.Property(e => e.RdcQuestionnair49).HasColumnName("rdcQuestionnair49");

                entity.Property(e => e.RdcQuestionnair50).HasColumnName("rdcQuestionnair50");

                entity.Property(e => e.RdcQuestionnair51).HasColumnName("rdcQuestionnair51");

                entity.Property(e => e.RdcQuestionnair52).HasColumnName("rdcQuestionnair52");

                entity.Property(e => e.RdcQuestionnaire10).HasColumnName("rdcQuestionnaire10");

                entity.Property(e => e.RdcQuestionnaire11).HasColumnName("rdcQuestionnaire11");

                entity.Property(e => e.RdcQuestionnaire12).HasColumnName("rdcQuestionnaire12");

                entity.Property(e => e.RdcQuestionnaire13).HasColumnName("rdcQuestionnaire13");

                entity.Property(e => e.RdcQuestionnaire14).HasColumnName("rdcQuestionnaire14");

                entity.Property(e => e.RdcQuestionnaire15).HasColumnName("rdcQuestionnaire15");

                entity.Property(e => e.RdcQuestionnaire3).HasColumnName("rdcQuestionnaire3");

                entity.Property(e => e.RdcQuestionnaire4).HasColumnName("rdcQuestionnaire4");

                entity.Property(e => e.RdcQuestionnaire5).HasColumnName("rdcQuestionnaire5");

                entity.Property(e => e.RdcQuestionnaire6).HasColumnName("rdcQuestionnaire6");

                entity.Property(e => e.RdcQuestionnaire7).HasColumnName("rdcQuestionnaire7");

                entity.Property(e => e.RdcQuestionnaire8).HasColumnName("rdcQuestionnaire8");

                entity.Property(e => e.RdcQuestionnaire9).HasColumnName("rdcQuestionnaire9");

                entity.Property(e => e.RegistrationDateLicenseIranianMobileGamesQuestionnaireForm).HasColumnName("RegistrationDate_LicenseIranianMobileGames_QuestionnaireForm");

                entity.Property(e => e.RegistrationStatusLicenseIranianMobileGamesQuestionnaireForm).HasColumnName("RegistrationStatus_LicenseIranianMobileGames_QuestionnaireForm");

                entity.Property(e => e.RegistrationTimeLicenseIranianMobileGamesQuestionnaireForm).HasColumnName("RegistrationTime_LicenseIranianMobileGames_QuestionnaireForm");
            });

            modelBuilder.Entity<LicensingPublicationAssignIdentifier>(entity =>
            {
                entity.ToTable("LicensingPublication_AssignIdentifier");

                entity.Property(e => e.AuditStatusLicensingPublicationAssignIdentifier).HasColumnName("AuditStatus_LicensingPublication_AssignIdentifier");

                entity.Property(e => e.CreatorLicensingPublicationAssignIdentifier).HasColumnName("Creator_LicensingPublication_AssignIdentifier");

                entity.Property(e => e.DdlCompany).HasColumnName("ddlCompany");

                entity.Property(e => e.InstanceIdLicensingPublicationAssignIdentifier).HasColumnName("InstanceId_LicensingPublication_AssignIdentifier");

                entity.Property(e => e.InstanceSridLicensingPublicationAssignIdentifier).HasColumnName("InstanceSRId_LicensingPublication_AssignIdentifier");

                entity.Property(e => e.IpLicensingPublicationAssignIdentifier).HasColumnName("IP_LicensingPublication_AssignIdentifier");

                entity.Property(e => e.RegistrationDateLicensingPublicationAssignIdentifier).HasColumnName("RegistrationDate_LicensingPublication_AssignIdentifier");

                entity.Property(e => e.RegistrationStatusLicensingPublicationAssignIdentifier).HasColumnName("RegistrationStatus_LicensingPublication_AssignIdentifier");

                entity.Property(e => e.RegistrationTimeLicensingPublicationAssignIdentifier).HasColumnName("RegistrationTime_LicensingPublication_AssignIdentifier");

                entity.Property(e => e.TxtApplicantId).HasColumnName("txtApplicantID");

                entity.Property(e => e.TxtApplicantPass).HasColumnName("txtApplicantPass");
            });

            modelBuilder.Entity<LicensingPublicationContentReviewDocuments>(entity =>
            {
                entity.ToTable("LicensingPublication_ContentReviewDocuments");

                entity.Property(e => e.AuditStatusLicensingPublicationContentReviewDocuments).HasColumnName("AuditStatus_LicensingPublication_ContentReviewDocuments");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorLicensingPublicationContentReviewDocuments).HasColumnName("Creator_LicensingPublication_ContentReviewDocuments");

                entity.Property(e => e.DdlStatusReceivedForm).HasColumnName("ddlStatusReceivedForm");

                entity.Property(e => e.InstanceIdLicensingPublicationContentReviewDocuments).HasColumnName("InstanceId_LicensingPublication_ContentReviewDocuments");

                entity.Property(e => e.InstanceSridLicensingPublicationContentReviewDocuments).HasColumnName("InstanceSRId_LicensingPublication_ContentReviewDocuments");

                entity.Property(e => e.IpLicensingPublicationContentReviewDocuments).HasColumnName("IP_LicensingPublication_ContentReviewDocuments");

                entity.Property(e => e.RegistrationDateLicensingPublicationContentReviewDocuments).HasColumnName("RegistrationDate_LicensingPublication_ContentReviewDocuments");

                entity.Property(e => e.RegistrationStatusLicensingPublicationContentReviewDocuments).HasColumnName("RegistrationStatus_LicensingPublication_ContentReviewDocuments");

                entity.Property(e => e.RegistrationTimeLicensingPublicationContentReviewDocuments).HasColumnName("RegistrationTime_LicensingPublication_ContentReviewDocuments");
            });

            modelBuilder.Entity<LicensingPublicationContractFileChecking>(entity =>
            {
                entity.ToTable("LicensingPublication_ContractFileChecking");

                entity.Property(e => e.AuditStatusLicensingPublicationContractFileChecking).HasColumnName("AuditStatus_LicensingPublication_ContractFileChecking");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorLicensingPublicationContractFileChecking).HasColumnName("Creator_LicensingPublication_ContractFileChecking");

                entity.Property(e => e.InstanceIdLicensingPublicationContractFileChecking).HasColumnName("InstanceId_LicensingPublication_ContractFileChecking");

                entity.Property(e => e.InstanceSridLicensingPublicationContractFileChecking).HasColumnName("InstanceSRId_LicensingPublication_ContractFileChecking");

                entity.Property(e => e.IpLicensingPublicationContractFileChecking).HasColumnName("IP_LicensingPublication_ContractFileChecking");

                entity.Property(e => e.RegistrationDateLicensingPublicationContractFileChecking).HasColumnName("RegistrationDate_LicensingPublication_ContractFileChecking");

                entity.Property(e => e.RegistrationStatusLicensingPublicationContractFileChecking).HasColumnName("RegistrationStatus_LicensingPublication_ContractFileChecking");

                entity.Property(e => e.RegistrationTimeLicensingPublicationContractFileChecking).HasColumnName("RegistrationTime_LicensingPublication_ContractFileChecking");
            });

            modelBuilder.Entity<LicensingPublicationContractWithForeignPublisher>(entity =>
            {
                entity.ToTable("LicensingPublication_ContractWithForeignPublisher");

                entity.Property(e => e.AuditStatusLicensingPublicationContractWithForeignPublisher).HasColumnName("AuditStatus_LicensingPublication_ContractWithForeignPublisher");

                entity.Property(e => e.CreatorLicensingPublicationContractWithForeignPublisher).HasColumnName("Creator_LicensingPublication_ContractWithForeignPublisher");

                entity.Property(e => e.InstanceIdLicensingPublicationContractWithForeignPublisher).HasColumnName("InstanceId_LicensingPublication_ContractWithForeignPublisher");

                entity.Property(e => e.InstanceSridLicensingPublicationContractWithForeignPublisher).HasColumnName("InstanceSRId_LicensingPublication_ContractWithForeignPublisher");

                entity.Property(e => e.IpLicensingPublicationContractWithForeignPublisher).HasColumnName("IP_LicensingPublication_ContractWithForeignPublisher");

                entity.Property(e => e.RegistrationDateLicensingPublicationContractWithForeignPublisher).HasColumnName("RegistrationDate_LicensingPublication_ContractWithForeignPublisher");

                entity.Property(e => e.RegistrationStatusLicensingPublicationContractWithForeignPublisher).HasColumnName("RegistrationStatus_LicensingPublication_ContractWithForeignPublisher");

                entity.Property(e => e.RegistrationTimeLicensingPublicationContractWithForeignPublisher).HasColumnName("RegistrationTime_LicensingPublication_ContractWithForeignPublisher");

                entity.Property(e => e.UplContractWithForeignPublisher).HasColumnName("uplContractWithForeignPublisher");
            });

            modelBuilder.Entity<LicensingPublicationRequestingPublishingLicense>(entity =>
            {
                entity.ToTable("LicensingPublication_RequestingPublishingLicense");

                entity.Property(e => e.AuditStatusLicensingPublicationRequestingPublishingLicense).HasColumnName("AuditStatus_LicensingPublication_RequestingPublishingLicense");

                entity.Property(e => e.ChkConfirmationOfObligations).HasColumnName("chkConfirmationOfObligations");

                entity.Property(e => e.CreatorLicensingPublicationRequestingPublishingLicense).HasColumnName("Creator_LicensingPublication_RequestingPublishingLicense");

                entity.Property(e => e.DdlCompanyType).HasColumnName("ddlCompanyType");

                entity.Property(e => e.InstanceIdLicensingPublicationRequestingPublishingLicense).HasColumnName("InstanceId_LicensingPublication_RequestingPublishingLicense");

                entity.Property(e => e.InstanceSridLicensingPublicationRequestingPublishingLicense).HasColumnName("InstanceSRId_LicensingPublication_RequestingPublishingLicense");

                entity.Property(e => e.IpLicensingPublicationRequestingPublishingLicense).HasColumnName("IP_LicensingPublication_RequestingPublishingLicense");

                entity.Property(e => e.MailEmailTracker).HasColumnName("mailEmailTracker");

                entity.Property(e => e.NumCompanyPhoneNumber).HasColumnName("numCompanyPhoneNumber");

                entity.Property(e => e.RegistrationDateLicensingPublicationRequestingPublishingLicense).HasColumnName("RegistrationDate_LicensingPublication_RequestingPublishingLicense");

                entity.Property(e => e.RegistrationStatusLicensingPublicationRequestingPublishingLicense).HasColumnName("RegistrationStatus_LicensingPublication_RequestingPublishingLicense");

                entity.Property(e => e.RegistrationTimeLicensingPublicationRequestingPublishingLicense).HasColumnName("RegistrationTime_LicensingPublication_RequestingPublishingLicense");

                entity.Property(e => e.TxtCompanyAddress).HasColumnName("txtCompanyAddress");

                entity.Property(e => e.TxtCompanyName).HasColumnName("txtCompanyName");

                entity.Property(e => e.UplContractWithForeignPublisher).HasColumnName("uplContractWithForeignPublisher");

                entity.Property(e => e.UplCustodianFailureCertificate).HasColumnName("uplCustodianFailureCertificate");

                entity.Property(e => e.UplEndOfSoldierCertificate).HasColumnName("uplEndOfSoldierCertificate");

                entity.Property(e => e.UplIdCard).HasColumnName("uplIdCard");

                entity.Property(e => e.UplNewManagerPhoto).HasColumnName("uplNewManagerPhoto");

                entity.Property(e => e.UplStatutesAndAdvertisements).HasColumnName("uplStatutesAndAdvertisements");
            });

            modelBuilder.Entity<LicensingPublicationRequestingPublishingLicense2>(entity =>
            {
                entity.ToTable("LicensingPublication_RequestingPublishingLicense2");

                entity.Property(e => e.AuditStatusLicensingPublicationRequestingPublishingLicense2).HasColumnName("AuditStatus_LicensingPublication_RequestingPublishingLicense2");

                entity.Property(e => e.AxtCompanyAddress).HasColumnName("axtCompanyAddress");

                entity.Property(e => e.ChkConfirmationOfObligations).HasColumnName("chkConfirmationOfObligations");

                entity.Property(e => e.CreatorLicensingPublicationRequestingPublishingLicense2).HasColumnName("Creator_LicensingPublication_RequestingPublishingLicense2");

                entity.Property(e => e.DdlCompanyType).HasColumnName("ddlCompanyType");

                entity.Property(e => e.DdlRequiredLicenseType).HasColumnName("ddlRequiredLicenseType");

                entity.Property(e => e.InstanceIdLicensingPublicationRequestingPublishingLicense2).HasColumnName("InstanceId_LicensingPublication_RequestingPublishingLicense2");

                entity.Property(e => e.InstanceSridLicensingPublicationRequestingPublishingLicense2).HasColumnName("InstanceSRId_LicensingPublication_RequestingPublishingLicense2");

                entity.Property(e => e.IpLicensingPublicationRequestingPublishingLicense2).HasColumnName("IP_LicensingPublication_RequestingPublishingLicense2");

                entity.Property(e => e.MailEmailTracker).HasColumnName("mailEmailTracker");

                entity.Property(e => e.NumCompanyPhoneNumber).HasColumnName("numCompanyPhoneNumber");

                entity.Property(e => e.RegistrationDateLicensingPublicationRequestingPublishingLicense2).HasColumnName("RegistrationDate_LicensingPublication_RequestingPublishingLicense2");

                entity.Property(e => e.RegistrationStatusLicensingPublicationRequestingPublishingLicense2).HasColumnName("RegistrationStatus_LicensingPublication_RequestingPublishingLicense2");

                entity.Property(e => e.RegistrationTimeLicensingPublicationRequestingPublishingLicense2).HasColumnName("RegistrationTime_LicensingPublication_RequestingPublishingLicense2");

                entity.Property(e => e.TxtCompanyName).HasColumnName("txtCompanyName");

                entity.Property(e => e.UplContractWithForeignPublisher).HasColumnName("uplContractWithForeignPublisher");

                entity.Property(e => e.UplCustodianFailureCertificate).HasColumnName("uplCustodianFailureCertificate");

                entity.Property(e => e.UplEndOfSoldierCertificate).HasColumnName("uplEndOfSoldierCertificate");

                entity.Property(e => e.UplNewManagerPhoto).HasColumnName("uplNewManagerPhoto");

                entity.Property(e => e.UplStatutesAndAdvertisements).HasColumnName("uplStatutesAndAdvertisements");
            });

            modelBuilder.Entity<LowLevelAnalyze2>(entity =>
            {
                entity.ToTable("lowLevelAnalyze2");

                entity.Property(e => e.AuditStatusLowLevelAnalyze2).HasColumnName("AuditStatus_lowLevelAnalyze2");

                entity.Property(e => e.CreatorLowLevelAnalyze2).HasColumnName("Creator_lowLevelAnalyze2");

                entity.Property(e => e.DdlContentRoot).HasColumnName("ddlContentRoot");

                entity.Property(e => e.DdlEfect).HasColumnName("ddlEfect");

                entity.Property(e => e.DdlL1).HasColumnName("ddlL1");

                entity.Property(e => e.DdlL2).HasColumnName("ddlL2");

                entity.Property(e => e.DdlL3).HasColumnName("ddlL3");

                entity.Property(e => e.InstanceIdLowLevelAnalyze2).HasColumnName("InstanceId_lowLevelAnalyze2");

                entity.Property(e => e.InstanceSridLowLevelAnalyze2).HasColumnName("InstanceSRId_lowLevelAnalyze2");

                entity.Property(e => e.IpLowLevelAnalyze2).HasColumnName("IP_lowLevelAnalyze2");

                entity.Property(e => e.RegistrationDateLowLevelAnalyze2).HasColumnName("RegistrationDate_lowLevelAnalyze2");

                entity.Property(e => e.RegistrationStatusLowLevelAnalyze2).HasColumnName("RegistrationStatus_lowLevelAnalyze2");

                entity.Property(e => e.RegistrationTimeLowLevelAnalyze2).HasColumnName("RegistrationTime_lowLevelAnalyze2");

                entity.Property(e => e.TxaTozih).HasColumnName("txaTozih");

                entity.Property(e => e.TxtCt).HasColumnName("txtCT");

                entity.Property(e => e.TxtCtime).HasColumnName("txtCTime");

                entity.Property(e => e.UplFilm).HasColumnName("uplFilm");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.LowLevelAnalyze2)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AnalyzeReportForm_lowLevelAnalyze2");
            });

            modelBuilder.Entity<LowLevelAnalyzeThree>(entity =>
            {
                entity.ToTable("lowLevelAnalyzeThree");

                entity.Property(e => e.AuditStatusLowLevelAnalyzeThree).HasColumnName("AuditStatus_lowLevelAnalyzeThree");

                entity.Property(e => e.CreatorLowLevelAnalyzeThree).HasColumnName("Creator_lowLevelAnalyzeThree");

                entity.Property(e => e.InstanceIdLowLevelAnalyzeThree).HasColumnName("InstanceId_lowLevelAnalyzeThree");

                entity.Property(e => e.InstanceSridLowLevelAnalyzeThree).HasColumnName("InstanceSRId_lowLevelAnalyzeThree");

                entity.Property(e => e.IpLowLevelAnalyzeThree).HasColumnName("IP_lowLevelAnalyzeThree");

                entity.Property(e => e.RegistrationDateLowLevelAnalyzeThree).HasColumnName("RegistrationDate_lowLevelAnalyzeThree");

                entity.Property(e => e.RegistrationStatusLowLevelAnalyzeThree).HasColumnName("RegistrationStatus_lowLevelAnalyzeThree");

                entity.Property(e => e.RegistrationTimeLowLevelAnalyzeThree).HasColumnName("RegistrationTime_lowLevelAnalyzeThree");
            });

            modelBuilder.Entity<MigrationHistory>(entity =>
            {
                entity.HasKey(e => new { e.MigrationId, e.ContextKey });

                entity.ToTable("__MigrationHistory");

                entity.Property(e => e.MigrationId).HasMaxLength(150);

                entity.Property(e => e.ContextKey).HasMaxLength(300);

                entity.Property(e => e.Model).IsRequired();

                entity.Property(e => e.ProductVersion)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<MinistryInquiry>(entity =>
            {
                entity.Property(e => e.AuditStatusMinistryInquiry).HasColumnName("AuditStatus_MinistryInquiry");

                entity.Property(e => e.CreatorMinistryInquiry).HasColumnName("Creator_MinistryInquiry");

                entity.Property(e => e.InquirySletter).HasColumnName("InquirySLetter");

                entity.Property(e => e.InstanceIdMinistryInquiry).HasColumnName("InstanceId_MinistryInquiry");

                entity.Property(e => e.InstanceSridMinistryInquiry).HasColumnName("InstanceSRId_MinistryInquiry");

                entity.Property(e => e.IpMinistryInquiry).HasColumnName("IP_MinistryInquiry");

                entity.Property(e => e.RegistrationDateMinistryInquiry).HasColumnName("RegistrationDate_MinistryInquiry");

                entity.Property(e => e.RegistrationStatusMinistryInquiry).HasColumnName("RegistrationStatus_MinistryInquiry");

                entity.Property(e => e.RegistrationTimeMinistryInquiry).HasColumnName("RegistrationTime_MinistryInquiry");
            });

            modelBuilder.Entity<Mlogs>(entity =>
            {
                entity.ToTable("MLogs");

                entity.HasIndex(e => e.CreatedTime)
                    .HasName("IX_MLogs");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.Property(e => e.SavedTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MobileGameComment>(entity =>
            {
                entity.Property(e => e.AuditStatusMobileGameComment).HasColumnName("AuditStatus_MobileGameComment");

                entity.Property(e => e.CreatorMobileGameComment).HasColumnName("Creator_MobileGameComment");

                entity.Property(e => e.InstanceIdMobileGameComment).HasColumnName("InstanceId_MobileGameComment");

                entity.Property(e => e.InstanceSridMobileGameComment).HasColumnName("InstanceSRId_MobileGameComment");

                entity.Property(e => e.IpMobileGameComment).HasColumnName("IP_MobileGameComment");

                entity.Property(e => e.RegistrationDateMobileGameComment).HasColumnName("RegistrationDate_MobileGameComment");

                entity.Property(e => e.RegistrationStatusMobileGameComment).HasColumnName("RegistrationStatus_MobileGameComment");

                entity.Property(e => e.RegistrationTimeMobileGameComment).HasColumnName("RegistrationTime_MobileGameComment");

                entity.Property(e => e.TxtComment).HasColumnName("txtComment");
            });

            modelBuilder.Entity<MobileGameGenresList>(entity =>
            {
                entity.Property(e => e.AuditStatusMobileGameGenresList).HasColumnName("AuditStatus_MobileGameGenresList");

                entity.Property(e => e.CreatorMobileGameGenresList).HasColumnName("Creator_MobileGameGenresList");

                entity.Property(e => e.InstanceIdMobileGameGenresList).HasColumnName("InstanceId_MobileGameGenresList");

                entity.Property(e => e.InstanceSridMobileGameGenresList).HasColumnName("InstanceSRId_MobileGameGenresList");

                entity.Property(e => e.IpMobileGameGenresList).HasColumnName("IP_MobileGameGenresList");

                entity.Property(e => e.RegistrationDateMobileGameGenresList).HasColumnName("RegistrationDate_MobileGameGenresList");

                entity.Property(e => e.RegistrationStatusMobileGameGenresList).HasColumnName("RegistrationStatus_MobileGameGenresList");

                entity.Property(e => e.RegistrationTimeMobileGameGenresList).HasColumnName("RegistrationTime_MobileGameGenresList");

                entity.Property(e => e.TxtGenre).HasColumnName("txtGenre");
            });

            modelBuilder.Entity<MobileGameMarketLink>(entity =>
            {
                entity.Property(e => e.AuditStatusMobileGameMarketLink).HasColumnName("AuditStatus_MobileGameMarketLink");

                entity.Property(e => e.CreatorMobileGameMarketLink).HasColumnName("Creator_MobileGameMarketLink");

                entity.Property(e => e.DdlMarket).HasColumnName("ddlMarket");

                entity.Property(e => e.InstanceIdMobileGameMarketLink).HasColumnName("InstanceId_MobileGameMarketLink");

                entity.Property(e => e.InstanceSridMobileGameMarketLink).HasColumnName("InstanceSRId_MobileGameMarketLink");

                entity.Property(e => e.IpMobileGameMarketLink).HasColumnName("IP_MobileGameMarketLink");

                entity.Property(e => e.RegistrationDateMobileGameMarketLink).HasColumnName("RegistrationDate_MobileGameMarketLink");

                entity.Property(e => e.RegistrationStatusMobileGameMarketLink).HasColumnName("RegistrationStatus_MobileGameMarketLink");

                entity.Property(e => e.RegistrationTimeMobileGameMarketLink).HasColumnName("RegistrationTime_MobileGameMarketLink");

                entity.Property(e => e.TxtLink).HasColumnName("txtLink");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.MobileGameMarketLink)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_MobileGameRating_MobileGameMarketLink");
            });

            modelBuilder.Entity<MobileGameRating>(entity =>
            {
                entity.Property(e => e.AuditStatusMobileGameRating).HasColumnName("AuditStatus_MobileGameRating");

                entity.Property(e => e.ChkGameGenre).HasColumnName("chkGameGenre");

                entity.Property(e => e.CreatorMobileGameRating).HasColumnName("Creator_MobileGameRating");

                entity.Property(e => e.DdlGameRating).HasColumnName("ddlGameRating");

                entity.Property(e => e.DdlGameType).HasColumnName("ddlGameType");

                entity.Property(e => e.DdlResult).HasColumnName("ddlResult");

                entity.Property(e => e.InstanceIdMobileGameRating).HasColumnName("InstanceId_MobileGameRating");

                entity.Property(e => e.InstanceSridMobileGameRating).HasColumnName("InstanceSRId_MobileGameRating");

                entity.Property(e => e.IpMobileGameRating).HasColumnName("IP_MobileGameRating");

                entity.Property(e => e.RegistrationDateMobileGameRating).HasColumnName("RegistrationDate_MobileGameRating");

                entity.Property(e => e.RegistrationStatusMobileGameRating).HasColumnName("RegistrationStatus_MobileGameRating");

                entity.Property(e => e.RegistrationTimeMobileGameRating).HasColumnName("RegistrationTime_MobileGameRating");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxtCheckingDate).HasColumnName("txtCheckingDate");

                entity.Property(e => e.TxtContent).HasColumnName("txtContent");

                entity.Property(e => e.TxtGameFname).HasColumnName("txtGameFName");

                entity.Property(e => e.TxtGameLink).HasColumnName("txtGameLink");

                entity.Property(e => e.TxtGameLname).HasColumnName("txtGameLName");
            });

            modelBuilder.Entity<MobileGameRatingResult>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.GameCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GameFname).IsRequired();

                entity.Property(e => e.GamePic).IsRequired();

                entity.Property(e => e.GameRating)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Result)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.MobileGameRatingResult)
                    .HasForeignKey<MobileGameRatingResult>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_MobileGameRatingResult_Id");
            });

            modelBuilder.Entity<MobileGamerConfirmation>(entity =>
            {
                entity.Property(e => e.AuditStatusMobileGamerConfirmation).HasColumnName("AuditStatus_MobileGamerConfirmation");

                entity.Property(e => e.CreatorMobileGamerConfirmation).HasColumnName("Creator_MobileGamerConfirmation");

                entity.Property(e => e.InstanceIdMobileGamerConfirmation).HasColumnName("InstanceId_MobileGamerConfirmation");

                entity.Property(e => e.InstanceSridMobileGamerConfirmation).HasColumnName("InstanceSRId_MobileGamerConfirmation");

                entity.Property(e => e.IpMobileGamerConfirmation).HasColumnName("IP_MobileGamerConfirmation");

                entity.Property(e => e.RegistrationDateMobileGamerConfirmation).HasColumnName("RegistrationDate_MobileGamerConfirmation");

                entity.Property(e => e.RegistrationStatusMobileGamerConfirmation).HasColumnName("RegistrationStatus_MobileGamerConfirmation");

                entity.Property(e => e.RegistrationTimeMobileGamerConfirmation).HasColumnName("RegistrationTime_MobileGamerConfirmation");
            });

            modelBuilder.Entity<MobileGamesAgeRatingReq>(entity =>
            {
                entity.Property(e => e.AuditStatusMobileGamesAgeRatingReq).HasColumnName("AuditStatus_MobileGamesAgeRatingReq");

                entity.Property(e => e.CreatorMobileGamesAgeRatingReq).HasColumnName("Creator_MobileGamesAgeRatingReq");

                entity.Property(e => e.InstanceIdMobileGamesAgeRatingReq).HasColumnName("InstanceId_MobileGamesAgeRatingReq");

                entity.Property(e => e.InstanceSridMobileGamesAgeRatingReq).HasColumnName("InstanceSRId_MobileGamesAgeRatingReq");

                entity.Property(e => e.IpMobileGamesAgeRatingReq).HasColumnName("IP_MobileGamesAgeRatingReq");

                entity.Property(e => e.RegistrationDateMobileGamesAgeRatingReq).HasColumnName("RegistrationDate_MobileGamesAgeRatingReq");

                entity.Property(e => e.RegistrationStatusMobileGamesAgeRatingReq).HasColumnName("RegistrationStatus_MobileGamesAgeRatingReq");

                entity.Property(e => e.RegistrationTimeMobileGamesAgeRatingReq).HasColumnName("RegistrationTime_MobileGamesAgeRatingReq");

                entity.Property(e => e.TxtPrePccode).HasColumnName("txtPrePCCode");
            });

            modelBuilder.Entity<MobileGamesRatingRequest>(entity =>
            {
                entity.Property(e => e.AuditStatusMobileGamesRatingRequest).HasColumnName("AuditStatus_MobileGamesRatingRequest");

                entity.Property(e => e.CreatorMobileGamesRatingRequest).HasColumnName("Creator_MobileGamesRatingRequest");

                entity.Property(e => e.DdlPlatform).HasColumnName("ddlPlatform");

                entity.Property(e => e.DdlSendigType).HasColumnName("ddlSendigType");

                entity.Property(e => e.InstanceIdMobileGamesRatingRequest).HasColumnName("InstanceId_MobileGamesRatingRequest");

                entity.Property(e => e.InstanceSridMobileGamesRatingRequest).HasColumnName("InstanceSRId_MobileGamesRatingRequest");

                entity.Property(e => e.IpMobileGamesRatingRequest).HasColumnName("IP_MobileGamesRatingRequest");

                entity.Property(e => e.RdbPayment).HasColumnName("rdbPayment");

                entity.Property(e => e.RegistrationDateMobileGamesRatingRequest).HasColumnName("RegistrationDate_MobileGamesRatingRequest");

                entity.Property(e => e.RegistrationStatusMobileGamesRatingRequest).HasColumnName("RegistrationStatus_MobileGamesRatingRequest");

                entity.Property(e => e.RegistrationTimeMobileGamesRatingRequest).HasColumnName("RegistrationTime_MobileGamesRatingRequest");

                entity.Property(e => e.TxaGameHelp).HasColumnName("txaGameHelp");

                entity.Property(e => e.TxtDownloadLink).HasColumnName("txtDownloadLink");

                entity.Property(e => e.TxtGameLname).HasColumnName("TxtGameLName");

                entity.Property(e => e.TxtGameName).HasColumnName("txtGameName");

                entity.Property(e => e.TxtGameValue).HasColumnName("txtGameValue");

                entity.Property(e => e.TxtGameVersion).HasColumnName("txtGameVersion");

                entity.Property(e => e.TxtProducter).HasColumnName("txtProducter");
            });

            modelBuilder.Entity<MobileGamesRatingRequestSazmani>(entity =>
            {
                entity.Property(e => e.AuditStatusMobileGamesRatingRequestSazmani).HasColumnName("AuditStatus_MobileGamesRatingRequestSazmani");

                entity.Property(e => e.CreatorMobileGamesRatingRequestSazmani).HasColumnName("Creator_MobileGamesRatingRequestSazmani");

                entity.Property(e => e.InstanceIdMobileGamesRatingRequestSazmani).HasColumnName("InstanceId_MobileGamesRatingRequestSazmani");

                entity.Property(e => e.InstanceSridMobileGamesRatingRequestSazmani).HasColumnName("InstanceSRId_MobileGamesRatingRequestSazmani");

                entity.Property(e => e.IpMobileGamesRatingRequestSazmani).HasColumnName("IP_MobileGamesRatingRequestSazmani");

                entity.Property(e => e.RegistrationDateMobileGamesRatingRequestSazmani).HasColumnName("RegistrationDate_MobileGamesRatingRequestSazmani");

                entity.Property(e => e.RegistrationStatusMobileGamesRatingRequestSazmani).HasColumnName("RegistrationStatus_MobileGamesRatingRequestSazmani");

                entity.Property(e => e.RegistrationTimeMobileGamesRatingRequestSazmani).HasColumnName("RegistrationTime_MobileGamesRatingRequestSazmani");
            });

            modelBuilder.Entity<MobileGamingLicenseClassificationQuestionnaire>(entity =>
            {
                entity.ToTable("MobileGamingLicense_ClassificationQuestionnaire");

                entity.Property(e => e.AuditStatusMobileGamingLicenseClassificationQuestionnaire).HasColumnName("AuditStatus_MobileGamingLicense_ClassificationQuestionnaire");

                entity.Property(e => e.ChkNo2).HasColumnName("chkNo2");

                entity.Property(e => e.CreatorMobileGamingLicenseClassificationQuestionnaire).HasColumnName("Creator_MobileGamingLicense_ClassificationQuestionnaire");

                entity.Property(e => e.InstanceIdMobileGamingLicenseClassificationQuestionnaire).HasColumnName("InstanceId_MobileGamingLicense_ClassificationQuestionnaire");

                entity.Property(e => e.InstanceSridMobileGamingLicenseClassificationQuestionnaire).HasColumnName("InstanceSRId_MobileGamingLicense_ClassificationQuestionnaire");

                entity.Property(e => e.IpMobileGamingLicenseClassificationQuestionnaire).HasColumnName("IP_MobileGamingLicense_ClassificationQuestionnaire");

                entity.Property(e => e.RdcNo10).HasColumnName("rdcNo10");

                entity.Property(e => e.RdcNo11).HasColumnName("rdcNo11");

                entity.Property(e => e.RdcNo12).HasColumnName("rdcNo12");

                entity.Property(e => e.RdcNo13).HasColumnName("rdcNo13");

                entity.Property(e => e.RdcNo14).HasColumnName("rdcNo14");

                entity.Property(e => e.RdcNo15).HasColumnName("rdcNo15");

                entity.Property(e => e.RdcNo16).HasColumnName("rdcNo16");

                entity.Property(e => e.RdcNo17).HasColumnName("rdcNo17");

                entity.Property(e => e.RdcNo18).HasColumnName("rdcNo18");

                entity.Property(e => e.RdcNo19).HasColumnName("rdcNo19");

                entity.Property(e => e.RdcNo20).HasColumnName("rdcNo20");

                entity.Property(e => e.RdcNo21).HasColumnName("rdcNo21");

                entity.Property(e => e.RdcNo22).HasColumnName("rdcNo22");

                entity.Property(e => e.RdcNo23).HasColumnName("rdcNo23");

                entity.Property(e => e.RdcNo24).HasColumnName("rdcNo24");

                entity.Property(e => e.RdcNo25).HasColumnName("rdcNo25");

                entity.Property(e => e.RdcNo26).HasColumnName("rdcNo26");

                entity.Property(e => e.RdcNo27).HasColumnName("rdcNo27");

                entity.Property(e => e.RdcNo29).HasColumnName("rdcNo29");

                entity.Property(e => e.RdcNo3).HasColumnName("rdcNo3");

                entity.Property(e => e.RdcNo30).HasColumnName("rdcNo30");

                entity.Property(e => e.RdcNo31).HasColumnName("rdcNo31");

                entity.Property(e => e.RdcNo311).HasColumnName("rdcNo311");

                entity.Property(e => e.RdcNo32).HasColumnName("rdcNo32");

                entity.Property(e => e.RdcNo33).HasColumnName("rdcNo33");

                entity.Property(e => e.RdcNo34).HasColumnName("rdcNo34");

                entity.Property(e => e.RdcNo35).HasColumnName("rdcNo35");

                entity.Property(e => e.RdcNo36).HasColumnName("rdcNo36");

                entity.Property(e => e.RdcNo37).HasColumnName("rdcNo37");

                entity.Property(e => e.RdcNo38).HasColumnName("rdcNo38");

                entity.Property(e => e.RdcNo39).HasColumnName("rdcNo39");

                entity.Property(e => e.RdcNo4).HasColumnName("rdcNo4");

                entity.Property(e => e.RdcNo40).HasColumnName("rdcNo40");

                entity.Property(e => e.RdcNo41).HasColumnName("rdcNo41");

                entity.Property(e => e.RdcNo42).HasColumnName("rdcNo42");

                entity.Property(e => e.RdcNo43).HasColumnName("rdcNo43");

                entity.Property(e => e.RdcNo44).HasColumnName("rdcNo44");

                entity.Property(e => e.RdcNo45).HasColumnName("rdcNo45");

                entity.Property(e => e.RdcNo46).HasColumnName("rdcNo46");

                entity.Property(e => e.RdcNo47).HasColumnName("rdcNo47");

                entity.Property(e => e.RdcNo48).HasColumnName("rdcNo48");

                entity.Property(e => e.RdcNo49).HasColumnName("rdcNo49");

                entity.Property(e => e.RdcNo5).HasColumnName("rdcNo5");

                entity.Property(e => e.RdcNo50).HasColumnName("rdcNo50");

                entity.Property(e => e.RdcNo51).HasColumnName("rdcNo51");

                entity.Property(e => e.RdcNo52).HasColumnName("rdcNo52");

                entity.Property(e => e.RdcNo6).HasColumnName("rdcNo6");

                entity.Property(e => e.RdcNo7).HasColumnName("rdcNo7");

                entity.Property(e => e.RdcNo8).HasColumnName("rdcNo8");

                entity.Property(e => e.RdcNo9).HasColumnName("rdcNo9");

                entity.Property(e => e.RegistrationDateMobileGamingLicenseClassificationQuestionnaire).HasColumnName("RegistrationDate_MobileGamingLicense_ClassificationQuestionnaire");

                entity.Property(e => e.RegistrationStatusMobileGamingLicenseClassificationQuestionnaire).HasColumnName("RegistrationStatus_MobileGamingLicense_ClassificationQuestionnaire");

                entity.Property(e => e.RegistrationTimeMobileGamingLicenseClassificationQuestionnaire).HasColumnName("RegistrationTime_MobileGamingLicense_ClassificationQuestionnaire");

                entity.Property(e => e.TxtNo1).HasColumnName("txtNo1");
            });

            modelBuilder.Entity<MobileGamingLicenseForeignChangeAgeRating>(entity =>
            {
                entity.ToTable("MobileGamingLicenseForeign_ChangeAgeRating");

                entity.Property(e => e.AuditStatusMobileGamingLicenseForeignChangeAgeRating).HasColumnName("AuditStatus_MobileGamingLicenseForeign_ChangeAgeRating");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorMobileGamingLicenseForeignChangeAgeRating).HasColumnName("Creator_MobileGamingLicenseForeign_ChangeAgeRating");

                entity.Property(e => e.DdlAgeRatingRequest).HasColumnName("ddlAgeRatingRequest");

                entity.Property(e => e.InstanceIdMobileGamingLicenseForeignChangeAgeRating).HasColumnName("InstanceId_MobileGamingLicenseForeign_ChangeAgeRating");

                entity.Property(e => e.InstanceSridMobileGamingLicenseForeignChangeAgeRating).HasColumnName("InstanceSRId_MobileGamingLicenseForeign_ChangeAgeRating");

                entity.Property(e => e.IpMobileGamingLicenseForeignChangeAgeRating).HasColumnName("IP_MobileGamingLicenseForeign_ChangeAgeRating");

                entity.Property(e => e.RegistrationDateMobileGamingLicenseForeignChangeAgeRating).HasColumnName("RegistrationDate_MobileGamingLicenseForeign_ChangeAgeRating");

                entity.Property(e => e.RegistrationStatusMobileGamingLicenseForeignChangeAgeRating).HasColumnName("RegistrationStatus_MobileGamingLicenseForeign_ChangeAgeRating");

                entity.Property(e => e.RegistrationTimeMobileGamingLicenseForeignChangeAgeRating).HasColumnName("RegistrationTime_MobileGamingLicenseForeign_ChangeAgeRating");
            });

            modelBuilder.Entity<MobileGamingLicenseForeignCheckGameRatings>(entity =>
            {
                entity.ToTable("MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.AuditStatusMobileGamingLicenseForeignCheckGameRatings).HasColumnName("AuditStatus_MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.CreatorMobileGamingLicenseForeignCheckGameRatings).HasColumnName("Creator_MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.DdlOrganizationExists).HasColumnName("ddlOrganizationExists");

                entity.Property(e => e.InstanceIdMobileGamingLicenseForeignCheckGameRatings).HasColumnName("InstanceId_MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.InstanceSridMobileGamingLicenseForeignCheckGameRatings).HasColumnName("InstanceSRId_MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.IpMobileGamingLicenseForeignCheckGameRatings).HasColumnName("IP_MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.RdcAssignmentClassification).HasColumnName("rdcAssignmentClassification");

                entity.Property(e => e.RegistrationDateMobileGamingLicenseForeignCheckGameRatings).HasColumnName("RegistrationDate_MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.RegistrationStatusMobileGamingLicenseForeignCheckGameRatings).HasColumnName("RegistrationStatus_MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.RegistrationTimeMobileGamingLicenseForeignCheckGameRatings).HasColumnName("RegistrationTime_MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.TxtOrganizationName).HasColumnName("txtOrganizationName");
            });

            modelBuilder.Entity<MobileGamingLicenseForeignCheckingDocuments>(entity =>
            {
                entity.ToTable("MobileGamingLicenseForeign_CheckingDocuments");

                entity.Property(e => e.AuditStatusMobileGamingLicenseForeignCheckingDocuments).HasColumnName("AuditStatus_MobileGamingLicenseForeign_CheckingDocuments");

                entity.Property(e => e.CreatorMobileGamingLicenseForeignCheckingDocuments).HasColumnName("Creator_MobileGamingLicenseForeign_CheckingDocuments");

                entity.Property(e => e.DdlNewTitle).HasColumnName("ddlNewTitle");

                entity.Property(e => e.InstanceIdMobileGamingLicenseForeignCheckingDocuments).HasColumnName("InstanceId_MobileGamingLicenseForeign_CheckingDocuments");

                entity.Property(e => e.InstanceSridMobileGamingLicenseForeignCheckingDocuments).HasColumnName("InstanceSRId_MobileGamingLicenseForeign_CheckingDocuments");

                entity.Property(e => e.IpMobileGamingLicenseForeignCheckingDocuments).HasColumnName("IP_MobileGamingLicenseForeign_CheckingDocuments");

                entity.Property(e => e.RegistrationDateMobileGamingLicenseForeignCheckingDocuments).HasColumnName("RegistrationDate_MobileGamingLicenseForeign_CheckingDocuments");

                entity.Property(e => e.RegistrationStatusMobileGamingLicenseForeignCheckingDocuments).HasColumnName("RegistrationStatus_MobileGamingLicenseForeign_CheckingDocuments");

                entity.Property(e => e.RegistrationTimeMobileGamingLicenseForeignCheckingDocuments).HasColumnName("RegistrationTime_MobileGamingLicenseForeign_CheckingDocuments");
            });

            modelBuilder.Entity<MobileGamingLicenseForeignCheckRecievedDocuments>(entity =>
            {
                entity.ToTable("MobileGamingLicenseForeign_CheckRecievedDocuments");

                entity.Property(e => e.AuditStatusMobileGamingLicenseForeignCheckRecievedDocuments).HasColumnName("AuditStatus_MobileGamingLicenseForeign_CheckRecievedDocuments");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorMobileGamingLicenseForeignCheckRecievedDocuments).HasColumnName("Creator_MobileGamingLicenseForeign_CheckRecievedDocuments");

                entity.Property(e => e.DdlDocumentCheck).HasColumnName("ddlDocumentCheck");

                entity.Property(e => e.InstanceIdMobileGamingLicenseForeignCheckRecievedDocuments).HasColumnName("InstanceId_MobileGamingLicenseForeign_CheckRecievedDocuments");

                entity.Property(e => e.InstanceSridMobileGamingLicenseForeignCheckRecievedDocuments).HasColumnName("InstanceSRId_MobileGamingLicenseForeign_CheckRecievedDocuments");

                entity.Property(e => e.IpMobileGamingLicenseForeignCheckRecievedDocuments).HasColumnName("IP_MobileGamingLicenseForeign_CheckRecievedDocuments");

                entity.Property(e => e.RegistrationDateMobileGamingLicenseForeignCheckRecievedDocuments).HasColumnName("RegistrationDate_MobileGamingLicenseForeign_CheckRecievedDocuments");

                entity.Property(e => e.RegistrationStatusMobileGamingLicenseForeignCheckRecievedDocuments).HasColumnName("RegistrationStatus_MobileGamingLicenseForeign_CheckRecievedDocuments");

                entity.Property(e => e.RegistrationTimeMobileGamingLicenseForeignCheckRecievedDocuments).HasColumnName("RegistrationTime_MobileGamingLicenseForeign_CheckRecievedDocuments");
            });

            modelBuilder.Entity<MobileGamingLicenseForeignLoadingPackageScheme>(entity =>
            {
                entity.ToTable("MobileGamingLicenseForeign_LoadingPackageScheme");

                entity.Property(e => e.AuditStatusMobileGamingLicenseForeignLoadingPackageScheme).HasColumnName("AuditStatus_MobileGamingLicenseForeign_LoadingPackageScheme");

                entity.Property(e => e.CreatorMobileGamingLicenseForeignLoadingPackageScheme).HasColumnName("Creator_MobileGamingLicenseForeign_LoadingPackageScheme");

                entity.Property(e => e.InstanceIdMobileGamingLicenseForeignLoadingPackageScheme).HasColumnName("InstanceId_MobileGamingLicenseForeign_LoadingPackageScheme");

                entity.Property(e => e.InstanceSridMobileGamingLicenseForeignLoadingPackageScheme).HasColumnName("InstanceSRId_MobileGamingLicenseForeign_LoadingPackageScheme");

                entity.Property(e => e.IpMobileGamingLicenseForeignLoadingPackageScheme).HasColumnName("IP_MobileGamingLicenseForeign_LoadingPackageScheme");

                entity.Property(e => e.RegistrationDateMobileGamingLicenseForeignLoadingPackageScheme).HasColumnName("RegistrationDate_MobileGamingLicenseForeign_LoadingPackageScheme");

                entity.Property(e => e.RegistrationStatusMobileGamingLicenseForeignLoadingPackageScheme).HasColumnName("RegistrationStatus_MobileGamingLicenseForeign_LoadingPackageScheme");

                entity.Property(e => e.RegistrationTimeMobileGamingLicenseForeignLoadingPackageScheme).HasColumnName("RegistrationTime_MobileGamingLicenseForeign_LoadingPackageScheme");

                entity.Property(e => e.UplLoadingPackageScheme).HasColumnName("uplLoadingPackageScheme");
            });

            modelBuilder.Entity<MobileGamingLicenseForeignRequestingPublishing>(entity =>
            {
                entity.ToTable("MobileGamingLicenseForeign_RequestingPublishing");

                entity.Property(e => e.AuditStatusMobileGamingLicenseForeignRequestingPublishing).HasColumnName("AuditStatus_MobileGamingLicenseForeign_RequestingPublishing");

                entity.Property(e => e.CreatorMobileGamingLicenseForeignRequestingPublishing).HasColumnName("Creator_MobileGamingLicenseForeign_RequestingPublishing");

                entity.Property(e => e.DdlDemandPlatform).HasColumnName("ddlDemandPlatform");

                entity.Property(e => e.InstanceIdMobileGamingLicenseForeignRequestingPublishing).HasColumnName("InstanceId_MobileGamingLicenseForeign_RequestingPublishing");

                entity.Property(e => e.InstanceSridMobileGamingLicenseForeignRequestingPublishing).HasColumnName("InstanceSRId_MobileGamingLicenseForeign_RequestingPublishing");

                entity.Property(e => e.IpMobileGamingLicenseForeignRequestingPublishing).HasColumnName("IP_MobileGamingLicenseForeign_RequestingPublishing");

                entity.Property(e => e.RegistrationDateMobileGamingLicenseForeignRequestingPublishing).HasColumnName("RegistrationDate_MobileGamingLicenseForeign_RequestingPublishing");

                entity.Property(e => e.RegistrationStatusMobileGamingLicenseForeignRequestingPublishing).HasColumnName("RegistrationStatus_MobileGamingLicenseForeign_RequestingPublishing");

                entity.Property(e => e.RegistrationTimeMobileGamingLicenseForeignRequestingPublishing).HasColumnName("RegistrationTime_MobileGamingLicenseForeign_RequestingPublishing");

                entity.Property(e => e.TxtDownloadLink).HasColumnName("txtDownloadLink");

                entity.Property(e => e.TxtFilePassword).HasColumnName("txtFilePassword");

                entity.Property(e => e.TxtNameGame).HasColumnName("txtNameGame");

                entity.Property(e => e.TxtSecondNameGame).HasColumnName("txtSecondNameGame");

                entity.Property(e => e.TxtVersionBelongsAndroid).HasColumnName("txtVersionBelongsAndroid");

                entity.Property(e => e.UplContractWthPublisher).HasColumnName("uplContractWthPublisher");

                entity.Property(e => e.UplGameIcon).HasColumnName("uplGameIcon");

                entity.Property(e => e.UplIntroductionLetter).HasColumnName("uplIntroductionLetter");

                entity.Property(e => e.UplLegalRepresentation).HasColumnName("uplLegalRepresentation");

                entity.Property(e => e.UplUpload).HasColumnName("uplUpload");
            });

            modelBuilder.Entity<MobileGamingLicenseForeignScheduleReview>(entity =>
            {
                entity.ToTable("MobileGamingLicenseForeign_ScheduleReview");

                entity.Property(e => e.AuditStatusMobileGamingLicenseForeignScheduleReview).HasColumnName("AuditStatus_MobileGamingLicenseForeign_ScheduleReview");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorMobileGamingLicenseForeignScheduleReview).HasColumnName("Creator_MobileGamingLicenseForeign_ScheduleReview");

                entity.Property(e => e.DdlPackagingDesign).HasColumnName("ddlPackagingDesign");

                entity.Property(e => e.InstanceIdMobileGamingLicenseForeignScheduleReview).HasColumnName("InstanceId_MobileGamingLicenseForeign_ScheduleReview");

                entity.Property(e => e.InstanceSridMobileGamingLicenseForeignScheduleReview).HasColumnName("InstanceSRId_MobileGamingLicenseForeign_ScheduleReview");

                entity.Property(e => e.IpMobileGamingLicenseForeignScheduleReview).HasColumnName("IP_MobileGamingLicenseForeign_ScheduleReview");

                entity.Property(e => e.RegistrationDateMobileGamingLicenseForeignScheduleReview).HasColumnName("RegistrationDate_MobileGamingLicenseForeign_ScheduleReview");

                entity.Property(e => e.RegistrationStatusMobileGamingLicenseForeignScheduleReview).HasColumnName("RegistrationStatus_MobileGamingLicenseForeign_ScheduleReview");

                entity.Property(e => e.RegistrationTimeMobileGamingLicenseForeignScheduleReview).HasColumnName("RegistrationTime_MobileGamingLicenseForeign_ScheduleReview");
            });

            modelBuilder.Entity<MobileGamingLicenseSendRequest>(entity =>
            {
                entity.ToTable("MobileGamingLicense_SendRequest");

                entity.Property(e => e.AuditStatusMobileGamingLicenseSendRequest).HasColumnName("AuditStatus_MobileGamingLicense_SendRequest");

                entity.Property(e => e.CreatorMobileGamingLicenseSendRequest).HasColumnName("Creator_MobileGamingLicense_SendRequest");

                entity.Property(e => e.DdlMarket).HasColumnName("ddlMarket");

                entity.Property(e => e.InstanceIdMobileGamingLicenseSendRequest).HasColumnName("InstanceId_MobileGamingLicense_SendRequest");

                entity.Property(e => e.InstanceSridMobileGamingLicenseSendRequest).HasColumnName("InstanceSRId_MobileGamingLicense_SendRequest");

                entity.Property(e => e.IpMobileGamingLicenseSendRequest).HasColumnName("IP_MobileGamingLicense_SendRequest");

                entity.Property(e => e.RdcMarketRating).HasColumnName("rdcMarketRating");

                entity.Property(e => e.RdcPlatform).HasColumnName("rdcPlatform");

                entity.Property(e => e.RegistrationDateMobileGamingLicenseSendRequest).HasColumnName("RegistrationDate_MobileGamingLicense_SendRequest");

                entity.Property(e => e.RegistrationStatusMobileGamingLicenseSendRequest).HasColumnName("RegistrationStatus_MobileGamingLicense_SendRequest");

                entity.Property(e => e.RegistrationTimeMobileGamingLicenseSendRequest).HasColumnName("RegistrationTime_MobileGamingLicense_SendRequest");

                entity.Property(e => e.TxtGname).HasColumnName("txtGname");

                entity.Property(e => e.TxtGname2).HasColumnName("txtGname2");

                entity.Property(e => e.TxtLink).HasColumnName("txtLink");

                entity.Property(e => e.TxtRade).HasColumnName("txtRade");
            });

            modelBuilder.Entity<MobilePublishCertificateRequest>(entity =>
            {
                entity.Property(e => e.AuditStatusMobilePublishCertificateRequest).HasColumnName("AuditStatus_MobilePublishCertificateRequest");

                entity.Property(e => e.CreatorMobilePublishCertificateRequest).HasColumnName("Creator_MobilePublishCertificateRequest");

                entity.Property(e => e.DdlDiap).HasColumnName("ddlDIAP");

                entity.Property(e => e.DdlPlatform).HasColumnName("ddlPlatform");

                entity.Property(e => e.DdlPof).HasColumnName("ddlPOF");

                entity.Property(e => e.DdlRiap).HasColumnName("ddlRIAP");

                entity.Property(e => e.InstanceIdMobilePublishCertificateRequest).HasColumnName("InstanceId_MobilePublishCertificateRequest");

                entity.Property(e => e.InstanceSridMobilePublishCertificateRequest).HasColumnName("InstanceSRId_MobilePublishCertificateRequest");

                entity.Property(e => e.IpMobilePublishCertificateRequest).HasColumnName("IP_MobilePublishCertificateRequest");

                entity.Property(e => e.RegistrationDateMobilePublishCertificateRequest).HasColumnName("RegistrationDate_MobilePublishCertificateRequest");

                entity.Property(e => e.RegistrationStatusMobilePublishCertificateRequest).HasColumnName("RegistrationStatus_MobilePublishCertificateRequest");

                entity.Property(e => e.RegistrationTimeMobilePublishCertificateRequest).HasColumnName("RegistrationTime_MobilePublishCertificateRequest");

                entity.Property(e => e.TxtFname).HasColumnName("txtFname");

                entity.Property(e => e.TxtLink).HasColumnName("txtLink");

                entity.Property(e => e.TxtSname).HasColumnName("txtSName");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");

                entity.Property(e => e.UplFile).HasColumnName("uplFile");
            });

            modelBuilder.Entity<Modules>(entity =>
            {
                entity.HasKey(e => e.ModuleId);

                entity.HasIndex(e => e.Name)
                    .HasName("IX_Name")
                    .IsUnique();

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<NarratorReport>(entity =>
            {
                entity.Property(e => e.AuditStatusNarratorReport).HasColumnName("AuditStatus_NarratorReport");

                entity.Property(e => e.CreatorNarratorReport).HasColumnName("Creator_NarratorReport");

                entity.Property(e => e.DdlIsnarrating).HasColumnName("ddlISNarrating");

                entity.Property(e => e.InstanceIdNarratorReport).HasColumnName("InstanceId_NarratorReport");

                entity.Property(e => e.InstanceSridNarratorReport).HasColumnName("InstanceSRId_NarratorReport");

                entity.Property(e => e.IpNarratorReport).HasColumnName("IP_NarratorReport");

                entity.Property(e => e.RegistrationDateNarratorReport).HasColumnName("RegistrationDate_NarratorReport");

                entity.Property(e => e.RegistrationStatusNarratorReport).HasColumnName("RegistrationStatus_NarratorReport");

                entity.Property(e => e.RegistrationTimeNarratorReport).HasColumnName("RegistrationTime_NarratorReport");

                entity.Property(e => e.TxaGameStory).HasColumnName("txaGameStory");

                entity.Property(e => e.TxaGameStoryAbs).HasColumnName("txaGameStoryAbs");
            });

            modelBuilder.Entity<Nezaratmoavennazaramo>(entity =>
            {
                entity.ToTable("NEZARATMOAVENNAZARAMO");

                entity.Property(e => e.AuditStatusNezaratmoavennazaramo).HasColumnName("AuditStatus_NEZARATMOAVENNAZARAMO");

                entity.Property(e => e.CreatorNezaratmoavennazaramo).HasColumnName("Creator_NEZARATMOAVENNAZARAMO");

                entity.Property(e => e.InstanceIdNezaratmoavennazaramo).HasColumnName("InstanceId_NEZARATMOAVENNAZARAMO");

                entity.Property(e => e.InstanceSridNezaratmoavennazaramo).HasColumnName("InstanceSRId_NEZARATMOAVENNAZARAMO");

                entity.Property(e => e.IpNezaratmoavennazaramo).HasColumnName("IP_NEZARATMOAVENNAZARAMO");

                entity.Property(e => e.RegistrationDateNezaratmoavennazaramo).HasColumnName("RegistrationDate_NEZARATMOAVENNAZARAMO");

                entity.Property(e => e.RegistrationStatusNezaratmoavennazaramo).HasColumnName("RegistrationStatus_NEZARATMOAVENNAZARAMO");

                entity.Property(e => e.RegistrationTimeNezaratmoavennazaramo).HasColumnName("RegistrationTime_NEZARATMOAVENNAZARAMO");

                entity.Property(e => e.TxaNazarm).HasColumnName("txaNAZARM");
            });

            modelBuilder.Entity<NezaratOw>(entity =>
            {
                entity.ToTable("NezaratOW");

                entity.Property(e => e.AuditStatusNezaratOw).HasColumnName("AuditStatus_NezaratOW");

                entity.Property(e => e.CreatorNezaratOw).HasColumnName("Creator_NezaratOW");

                entity.Property(e => e.InstanceIdNezaratOw).HasColumnName("InstanceId_NezaratOW");

                entity.Property(e => e.InstanceSridNezaratOw).HasColumnName("InstanceSRId_NezaratOW");

                entity.Property(e => e.IpNezaratOw).HasColumnName("IP_NezaratOW");

                entity.Property(e => e.RegistrationDateNezaratOw).HasColumnName("RegistrationDate_NezaratOW");

                entity.Property(e => e.RegistrationStatusNezaratOw).HasColumnName("RegistrationStatus_NezaratOW");

                entity.Property(e => e.RegistrationTimeNezaratOw).HasColumnName("RegistrationTime_NezaratOW");

                entity.Property(e => e.TxaNazarO).HasColumnName("txaNazarO");
            });

            modelBuilder.Entity<NmobileGameAgeRatingReq>(entity =>
            {
                entity.ToTable("NMobileGameAgeRatingReq");

                entity.Property(e => e.AuditStatusNmobileGameAgeRatingReq).HasColumnName("AuditStatus_NMobileGameAgeRatingReq");

                entity.Property(e => e.ChkIsEdited).HasColumnName("chkIsEdited");

                entity.Property(e => e.CreatorNmobileGameAgeRatingReq).HasColumnName("Creator_NMobileGameAgeRatingReq");

                entity.Property(e => e.InstanceIdNmobileGameAgeRatingReq).HasColumnName("InstanceId_NMobileGameAgeRatingReq");

                entity.Property(e => e.InstanceSridNmobileGameAgeRatingReq).HasColumnName("InstanceSRId_NMobileGameAgeRatingReq");

                entity.Property(e => e.IpNmobileGameAgeRatingReq).HasColumnName("IP_NMobileGameAgeRatingReq");

                entity.Property(e => e.RegistrationDateNmobileGameAgeRatingReq).HasColumnName("RegistrationDate_NMobileGameAgeRatingReq");

                entity.Property(e => e.RegistrationStatusNmobileGameAgeRatingReq).HasColumnName("RegistrationStatus_NMobileGameAgeRatingReq");

                entity.Property(e => e.RegistrationTimeNmobileGameAgeRatingReq).HasColumnName("RegistrationTime_NMobileGameAgeRatingReq");

                entity.Property(e => e.TxtProcecName).HasColumnName("txtProcecName");

                entity.Property(e => e.TxtSelectedVid).HasColumnName("txtSelectedVid");
            });

            modelBuilder.Entity<NmobileGameAgeRatingReqSazmani>(entity =>
            {
                entity.ToTable("NMobileGameAgeRatingReqSazmani");

                entity.Property(e => e.AuditStatusNmobileGameAgeRatingReqSazmani).HasColumnName("AuditStatus_NMobileGameAgeRatingReqSazmani");

                entity.Property(e => e.CreatorNmobileGameAgeRatingReqSazmani).HasColumnName("Creator_NMobileGameAgeRatingReqSazmani");

                entity.Property(e => e.InstanceIdNmobileGameAgeRatingReqSazmani).HasColumnName("InstanceId_NMobileGameAgeRatingReqSazmani");

                entity.Property(e => e.InstanceSridNmobileGameAgeRatingReqSazmani).HasColumnName("InstanceSRId_NMobileGameAgeRatingReqSazmani");

                entity.Property(e => e.IpNmobileGameAgeRatingReqSazmani).HasColumnName("IP_NMobileGameAgeRatingReqSazmani");

                entity.Property(e => e.RegistrationDateNmobileGameAgeRatingReqSazmani).HasColumnName("RegistrationDate_NMobileGameAgeRatingReqSazmani");

                entity.Property(e => e.RegistrationStatusNmobileGameAgeRatingReqSazmani).HasColumnName("RegistrationStatus_NMobileGameAgeRatingReqSazmani");

                entity.Property(e => e.RegistrationTimeNmobileGameAgeRatingReqSazmani).HasColumnName("RegistrationTime_NMobileGameAgeRatingReqSazmani");
            });

            modelBuilder.Entity<NodeDetails>(entity =>
            {
                entity.HasIndex(e => e.WorkFlowDetailId)
                    .HasName("IX_WorkFlowDetailId");

                entity.HasOne(d => d.WorkFlowDetail)
                    .WithMany(p => p.NodeDetails)
                    .HasForeignKey(d => d.WorkFlowDetailId)
                    .HasConstraintName("FK_dbo.NodeDetails_dbo.WorkFlowDetails_WorkFlowDetailId");
            });

            modelBuilder.Entity<Notifications>(entity =>
            {
                entity.Property(e => e.SentDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Objectives>(entity =>
            {
                entity.HasIndex(e => e.TargetId)
                    .HasName("IX_Target_Id");

                entity.Property(e => e.TargetId).HasColumnName("Target_Id");

                entity.HasOne(d => d.Target)
                    .WithMany(p => p.Objectives)
                    .HasForeignKey(d => d.TargetId)
                    .HasConstraintName("FK_dbo.Objectives_dbo.Targets_Target_Id");
            });

            modelBuilder.Entity<OldGamePropellerReleaseSelectPermissionsRelease>(entity =>
            {
                entity.ToTable("OldGamePropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.AuditStatusOldGamePropellerReleaseSelectPermissionsRelease).HasColumnName("AuditStatus_OldGamePropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.CreatorOldGamePropellerReleaseSelectPermissionsRelease).HasColumnName("Creator_OldGamePropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.InstanceIdOldGamePropellerReleaseSelectPermissionsRelease).HasColumnName("InstanceId_OldGamePropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.InstanceSridOldGamePropellerReleaseSelectPermissionsRelease).HasColumnName("InstanceSRId_OldGamePropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.IpOldGamePropellerReleaseSelectPermissionsRelease).HasColumnName("IP_OldGamePropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.RegistrationDateOldGamePropellerReleaseSelectPermissionsRelease).HasColumnName("RegistrationDate_OldGamePropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.RegistrationStatusOldGamePropellerReleaseSelectPermissionsRelease).HasColumnName("RegistrationStatus_OldGamePropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.RegistrationTimeOldGamePropellerReleaseSelectPermissionsRelease).HasColumnName("RegistrationTime_OldGamePropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");
            });

            modelBuilder.Entity<OldGamePropellerReleaseUploadPropellerRelease>(entity =>
            {
                entity.ToTable("OldGamePropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.AuditStatusOldGamePropellerReleaseUploadPropellerRelease).HasColumnName("AuditStatus_OldGamePropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorOldGamePropellerReleaseUploadPropellerRelease).HasColumnName("Creator_OldGamePropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.InstanceIdOldGamePropellerReleaseUploadPropellerRelease).HasColumnName("InstanceId_OldGamePropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.InstanceSridOldGamePropellerReleaseUploadPropellerRelease).HasColumnName("InstanceSRId_OldGamePropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.IpOldGamePropellerReleaseUploadPropellerRelease).HasColumnName("IP_OldGamePropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.RegistrationDateOldGamePropellerReleaseUploadPropellerRelease).HasColumnName("RegistrationDate_OldGamePropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.RegistrationStatusOldGamePropellerReleaseUploadPropellerRelease).HasColumnName("RegistrationStatus_OldGamePropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.RegistrationTimeOldGamePropellerReleaseUploadPropellerRelease).HasColumnName("RegistrationTime_OldGamePropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.UplUploadLicenseRelease).HasColumnName("uplUploadLicenseRelease");
            });

            modelBuilder.Entity<OldGameReleaseLicenseSelectGame>(entity =>
            {
                entity.ToTable("OldGameReleaseLicense_SelectGame");

                entity.Property(e => e.AuditStatusOldGameReleaseLicenseSelectGame).HasColumnName("AuditStatus_OldGameReleaseLicense_SelectGame");

                entity.Property(e => e.CreatorOldGameReleaseLicenseSelectGame).HasColumnName("Creator_OldGameReleaseLicense_SelectGame");

                entity.Property(e => e.InstanceIdOldGameReleaseLicenseSelectGame).HasColumnName("InstanceId_OldGameReleaseLicense_SelectGame");

                entity.Property(e => e.InstanceSridOldGameReleaseLicenseSelectGame).HasColumnName("InstanceSRId_OldGameReleaseLicense_SelectGame");

                entity.Property(e => e.IpOldGameReleaseLicenseSelectGame).HasColumnName("IP_OldGameReleaseLicense_SelectGame");

                entity.Property(e => e.NumNumberHolograms).HasColumnName("numNumberHolograms");

                entity.Property(e => e.RegistrationDateOldGameReleaseLicenseSelectGame).HasColumnName("RegistrationDate_OldGameReleaseLicense_SelectGame");

                entity.Property(e => e.RegistrationStatusOldGameReleaseLicenseSelectGame).HasColumnName("RegistrationStatus_OldGameReleaseLicense_SelectGame");

                entity.Property(e => e.RegistrationTimeOldGameReleaseLicenseSelectGame).HasColumnName("RegistrationTime_OldGameReleaseLicense_SelectGame");
            });

            modelBuilder.Entity<OldHologramGameApplyHologramSubForm>(entity =>
            {
                entity.ToTable("OldHologramGame_ApplyHologram_SubForm");

                entity.Property(e => e.AuditStatusOldHologramGameApplyHologramSubForm).HasColumnName("AuditStatus_OldHologramGame_ApplyHologram_SubForm");

                entity.Property(e => e.CreatorOldHologramGameApplyHologramSubForm).HasColumnName("Creator_OldHologramGame_ApplyHologram_SubForm");

                entity.Property(e => e.InstanceIdOldHologramGameApplyHologramSubForm).HasColumnName("InstanceId_OldHologramGame_ApplyHologram_SubForm");

                entity.Property(e => e.InstanceSridOldHologramGameApplyHologramSubForm).HasColumnName("InstanceSRId_OldHologramGame_ApplyHologram_SubForm");

                entity.Property(e => e.IpOldHologramGameApplyHologramSubForm).HasColumnName("IP_OldHologramGame_ApplyHologram_SubForm");

                entity.Property(e => e.RegistrationDateOldHologramGameApplyHologramSubForm).HasColumnName("RegistrationDate_OldHologramGame_ApplyHologram_SubForm");

                entity.Property(e => e.RegistrationStatusOldHologramGameApplyHologramSubForm).HasColumnName("RegistrationStatus_OldHologramGame_ApplyHologram_SubForm");

                entity.Property(e => e.RegistrationTimeOldHologramGameApplyHologramSubForm).HasColumnName("RegistrationTime_OldHologramGame_ApplyHologram_SubForm");

                entity.Property(e => e.TxtNumberHologramsRequested).HasColumnName("txtNumberHologramsRequested");
            });

            modelBuilder.Entity<OldHologramGameCheckCostAttachment>(entity =>
            {
                entity.ToTable("OldHologramGame_CheckCostAttachment");

                entity.Property(e => e.AuditStatusOldHologramGameCheckCostAttachment).HasColumnName("AuditStatus_OldHologramGame_CheckCostAttachment");

                entity.Property(e => e.AxtNeedToBeCorrected).HasColumnName("axtNeedToBeCorrected");

                entity.Property(e => e.CreatorOldHologramGameCheckCostAttachment).HasColumnName("Creator_OldHologramGame_CheckCostAttachment");

                entity.Property(e => e.InstanceIdOldHologramGameCheckCostAttachment).HasColumnName("InstanceId_OldHologramGame_CheckCostAttachment");

                entity.Property(e => e.InstanceSridOldHologramGameCheckCostAttachment).HasColumnName("InstanceSRId_OldHologramGame_CheckCostAttachment");

                entity.Property(e => e.IpOldHologramGameCheckCostAttachment).HasColumnName("IP_OldHologramGame_CheckCostAttachment");

                entity.Property(e => e.RegistrationDateOldHologramGameCheckCostAttachment).HasColumnName("RegistrationDate_OldHologramGame_CheckCostAttachment");

                entity.Property(e => e.RegistrationStatusOldHologramGameCheckCostAttachment).HasColumnName("RegistrationStatus_OldHologramGame_CheckCostAttachment");

                entity.Property(e => e.RegistrationTimeOldHologramGameCheckCostAttachment).HasColumnName("RegistrationTime_OldHologramGame_CheckCostAttachment");
            });

            modelBuilder.Entity<OldHologramGameCostAttachment>(entity =>
            {
                entity.ToTable("OldHologramGame_CostAttachment");

                entity.Property(e => e.AuditStatusOldHologramGameCostAttachment).HasColumnName("AuditStatus_OldHologramGame_CostAttachment");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorOldHologramGameCostAttachment).HasColumnName("Creator_OldHologramGame_CostAttachment");

                entity.Property(e => e.InstanceIdOldHologramGameCostAttachment).HasColumnName("InstanceId_OldHologramGame_CostAttachment");

                entity.Property(e => e.InstanceSridOldHologramGameCostAttachment).HasColumnName("InstanceSRId_OldHologramGame_CostAttachment");

                entity.Property(e => e.IpOldHologramGameCostAttachment).HasColumnName("IP_OldHologramGame_CostAttachment");

                entity.Property(e => e.NumCostAttachment).HasColumnName("numCostAttachment");

                entity.Property(e => e.RegistrationDateOldHologramGameCostAttachment).HasColumnName("RegistrationDate_OldHologramGame_CostAttachment");

                entity.Property(e => e.RegistrationStatusOldHologramGameCostAttachment).HasColumnName("RegistrationStatus_OldHologramGame_CostAttachment");

                entity.Property(e => e.RegistrationTimeOldHologramGameCostAttachment).HasColumnName("RegistrationTime_OldHologramGame_CostAttachment");

                entity.Property(e => e.UplHologramFraction).HasColumnName("uplHologramFraction");

                entity.Property(e => e.UplScoreFraction).HasColumnName("uplScoreFraction");
            });

            modelBuilder.Entity<OldHologramGameFinalInstallationListSubForm>(entity =>
            {
                entity.ToTable("OldHologramGame_FinalInstallationList_SubForm");

                entity.Property(e => e.AuditStatusOldHologramGameFinalInstallationListSubForm).HasColumnName("AuditStatus_OldHologramGame_FinalInstallationList_SubForm");

                entity.Property(e => e.CreatorOldHologramGameFinalInstallationListSubForm).HasColumnName("Creator_OldHologramGame_FinalInstallationList_SubForm");

                entity.Property(e => e.DdlReasonForNotAttaching).HasColumnName("ddlReasonForNotAttaching");

                entity.Property(e => e.InstanceIdOldHologramGameFinalInstallationListSubForm).HasColumnName("InstanceId_OldHologramGame_FinalInstallationList_SubForm");

                entity.Property(e => e.InstanceSridOldHologramGameFinalInstallationListSubForm).HasColumnName("InstanceSRId_OldHologramGame_FinalInstallationList_SubForm");

                entity.Property(e => e.IpOldHologramGameFinalInstallationListSubForm).HasColumnName("IP_OldHologramGame_FinalInstallationList_SubForm");

                entity.Property(e => e.NumHologramAttached).HasColumnName("numHologramAttached");

                entity.Property(e => e.NumRemainingHologram).HasColumnName("numRemainingHologram");

                entity.Property(e => e.RegistrationDateOldHologramGameFinalInstallationListSubForm).HasColumnName("RegistrationDate_OldHologramGame_FinalInstallationList_SubForm");

                entity.Property(e => e.RegistrationStatusOldHologramGameFinalInstallationListSubForm).HasColumnName("RegistrationStatus_OldHologramGame_FinalInstallationList_SubForm");

                entity.Property(e => e.RegistrationTimeOldHologramGameFinalInstallationListSubForm).HasColumnName("RegistrationTime_OldHologramGame_FinalInstallationList_SubForm");
            });

            modelBuilder.Entity<OldHologramGameHologramNumber>(entity =>
            {
                entity.ToTable("OldHologramGame_HologramNumber");

                entity.Property(e => e.AuditStatusOldHologramGameHologramNumber).HasColumnName("AuditStatus_OldHologramGame_HologramNumber");

                entity.Property(e => e.CreatorOldHologramGameHologramNumber).HasColumnName("Creator_OldHologramGame_HologramNumber");

                entity.Property(e => e.InstanceIdOldHologramGameHologramNumber).HasColumnName("InstanceId_OldHologramGame_HologramNumber");

                entity.Property(e => e.InstanceSridOldHologramGameHologramNumber).HasColumnName("InstanceSRId_OldHologramGame_HologramNumber");

                entity.Property(e => e.IpOldHologramGameHologramNumber).HasColumnName("IP_OldHologramGame_HologramNumber");

                entity.Property(e => e.RegistrationDateOldHologramGameHologramNumber).HasColumnName("RegistrationDate_OldHologramGame_HologramNumber");

                entity.Property(e => e.RegistrationStatusOldHologramGameHologramNumber).HasColumnName("RegistrationStatus_OldHologramGame_HologramNumber");

                entity.Property(e => e.RegistrationTimeOldHologramGameHologramNumber).HasColumnName("RegistrationTime_OldHologramGame_HologramNumber");
            });

            modelBuilder.Entity<OldHologramGameHologramNumberSubForm>(entity =>
            {
                entity.ToTable("OldHologramGame_HologramNumber_SubForm");

                entity.Property(e => e.AuditStatusOldHologramGameHologramNumberSubForm).HasColumnName("AuditStatus_OldHologramGame_HologramNumber_SubForm");

                entity.Property(e => e.CreatorOldHologramGameHologramNumberSubForm).HasColumnName("Creator_OldHologramGame_HologramNumber_SubForm");

                entity.Property(e => e.InstanceIdOldHologramGameHologramNumberSubForm).HasColumnName("InstanceId_OldHologramGame_HologramNumber_SubForm");

                entity.Property(e => e.InstanceSridOldHologramGameHologramNumberSubForm).HasColumnName("InstanceSRId_OldHologramGame_HologramNumber_SubForm");

                entity.Property(e => e.IpOldHologramGameHologramNumberSubForm).HasColumnName("IP_OldHologramGame_HologramNumber_SubForm");

                entity.Property(e => e.NumFirstHologramAssigned).HasColumnName("numFirstHologramAssigned");

                entity.Property(e => e.NumLastHologramAssigned).HasColumnName("numLastHologramAssigned");

                entity.Property(e => e.RegistrationDateOldHologramGameHologramNumberSubForm).HasColumnName("RegistrationDate_OldHologramGame_HologramNumber_SubForm");

                entity.Property(e => e.RegistrationStatusOldHologramGameHologramNumberSubForm).HasColumnName("RegistrationStatus_OldHologramGame_HologramNumber_SubForm");

                entity.Property(e => e.RegistrationTimeOldHologramGameHologramNumberSubForm).HasColumnName("RegistrationTime_OldHologramGame_HologramNumber_SubForm");
            });

            modelBuilder.Entity<OnlineMarketsUserRequest>(entity =>
            {
                entity.Property(e => e.AuditStatusOnlineMarketsUserRequest).HasColumnName("AuditStatus_OnlineMarketsUserRequest");

                entity.Property(e => e.ChkTahod).HasColumnName("chkTahod");

                entity.Property(e => e.CreatorOnlineMarketsUserRequest).HasColumnName("Creator_OnlineMarketsUserRequest");

                entity.Property(e => e.EmailPaygirAsl).HasColumnName("emailPaygirAsl");

                entity.Property(e => e.InstanceIdOnlineMarketsUserRequest).HasColumnName("InstanceId_OnlineMarketsUserRequest");

                entity.Property(e => e.InstanceSridOnlineMarketsUserRequest).HasColumnName("InstanceSRId_OnlineMarketsUserRequest");

                entity.Property(e => e.IpOnlineMarketsUserRequest).HasColumnName("IP_OnlineMarketsUserRequest");

                entity.Property(e => e.RegistrationDateOnlineMarketsUserRequest).HasColumnName("RegistrationDate_OnlineMarketsUserRequest");

                entity.Property(e => e.RegistrationStatusOnlineMarketsUserRequest).HasColumnName("RegistrationStatus_OnlineMarketsUserRequest");

                entity.Property(e => e.RegistrationTimeOnlineMarketsUserRequest).HasColumnName("RegistrationTime_OnlineMarketsUserRequest");

                entity.Property(e => e.TxaAddress).HasColumnName("txaAddress");

                entity.Property(e => e.TxtCode).HasColumnName("txtCode");

                entity.Property(e => e.TxtCompanyName).HasColumnName("txtCompanyName");

                entity.Property(e => e.TxtMobilePeygir).HasColumnName("txtMobilePeygir");

                entity.Property(e => e.TxtPeygir).HasColumnName("txtPeygir");

                entity.Property(e => e.TxtPostalCode).HasColumnName("txtPostalCode");

                entity.Property(e => e.TxtReqTitle).HasColumnName("txtReqTitle");

                entity.Property(e => e.UplMostanadat).HasColumnName("uplMostanadat");
            });

            modelBuilder.Entity<OnlineMobileDistributionCertRequest>(entity =>
            {
                entity.Property(e => e.AuditStatusOnlineMobileDistributionCertRequest).HasColumnName("AuditStatus_OnlineMobileDistributionCertRequest");

                entity.Property(e => e.CreatorOnlineMobileDistributionCertRequest).HasColumnName("Creator_OnlineMobileDistributionCertRequest");

                entity.Property(e => e.DdlDegree).HasColumnName("ddlDegree");

                entity.Property(e => e.DdlGender).HasColumnName("ddlGender");

                entity.Property(e => e.DdlHoviyat).HasColumnName("ddlHoviyat");

                entity.Property(e => e.DdlLegal).HasColumnName("ddlLegal");

                entity.Property(e => e.Ddlperson).HasColumnName("ddlperson");

                entity.Property(e => e.InstanceIdOnlineMobileDistributionCertRequest).HasColumnName("InstanceId_OnlineMobileDistributionCertRequest");

                entity.Property(e => e.InstanceSridOnlineMobileDistributionCertRequest).HasColumnName("InstanceSRId_OnlineMobileDistributionCertRequest");

                entity.Property(e => e.IpOnlineMobileDistributionCertRequest).HasColumnName("IP_OnlineMobileDistributionCertRequest");

                entity.Property(e => e.NumCellularPhonePerson).HasColumnName("numCellularPhonePerson");

                entity.Property(e => e.NumLandlinePhonePerson).HasColumnName("numLandlinePhonePerson");

                entity.Property(e => e.NumPostalCode).HasColumnName("numPostalCode");

                entity.Property(e => e.NumPostalCodePerson).HasColumnName("numPostalCodePerson");

                entity.Property(e => e.RegistrationDateOnlineMobileDistributionCertRequest).HasColumnName("RegistrationDate_OnlineMobileDistributionCertRequest");

                entity.Property(e => e.RegistrationStatusOnlineMobileDistributionCertRequest).HasColumnName("RegistrationStatus_OnlineMobileDistributionCertRequest");

                entity.Property(e => e.RegistrationTimeOnlineMobileDistributionCertRequest).HasColumnName("RegistrationTime_OnlineMobileDistributionCertRequest");

                entity.Property(e => e.TxaAddress).HasColumnName("txaAddress");

                entity.Property(e => e.TxaCg).HasColumnName("txaCG");

                entity.Property(e => e.TxdRegisterDate).HasColumnName("txdRegisterDate");

                entity.Property(e => e.TxdRegisterDateGregorian)
                    .HasColumnName("txdRegisterDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.TxeCeoEmail).HasColumnName("txeCeoEmail");

                entity.Property(e => e.TxePeygirEmail).HasColumnName("txePeygirEmail");

                entity.Property(e => e.TxtAddressPerson).HasColumnName("txtAddressPerson");

                entity.Property(e => e.TxtCeoLname).HasColumnName("txtCeoLName");

                entity.Property(e => e.TxtCeoMobile).HasColumnName("txtCeoMobile");

                entity.Property(e => e.TxtCeoName).HasColumnName("txtCeoName");

                entity.Property(e => e.TxtCompany).HasColumnName("txtCompany");

                entity.Property(e => e.TxtEmailPerson).HasColumnName("txtEmailPerson");

                entity.Property(e => e.TxtFather).HasColumnName("txtFather");

                entity.Property(e => e.TxtFax).HasColumnName("txtFax");

                entity.Property(e => e.TxtFname).HasColumnName("txtFName");

                entity.Property(e => e.TxtNid).HasColumnName("txtNID");

                entity.Property(e => e.TxtPeygir).HasColumnName("txtPeygir");

                entity.Property(e => e.TxtPeygirMobile).HasColumnName("txtPeygirMobile");

                entity.Property(e => e.TxtRegisterNumber).HasColumnName("txtRegisterNumber");

                entity.Property(e => e.TxtReshteh).HasColumnName("txtReshteh");

                entity.Property(e => e.TxtSname).HasColumnName("txtSName");

                entity.Property(e => e.TxtTeldo).HasColumnName("txtTeldo");

                entity.Property(e => e.TxtTelyek).HasColumnName("txtTelyek");

                entity.Property(e => e.TxtWebsite).HasColumnName("txtWebsite");

                entity.Property(e => e.UplAgentSupplyIdcard).HasColumnName("uplAgentSupplyIDCard");

                entity.Property(e => e.UplAgentSupplyIdcardNationalCard).HasColumnName("uplAgentSupplyIDCardNationalCard");

                entity.Property(e => e.UplApplicantIdcard).HasColumnName("uplApplicantIDCard");

                entity.Property(e => e.UplEndOfServiceAgents).HasColumnName("uplEndOfServiceAgents");

                entity.Property(e => e.UplEndorsementOfCeo).HasColumnName("uplEndorsementOfCEO");

                entity.Property(e => e.UplIdcardCeo).HasColumnName("uplIDcardCEO");

                entity.Property(e => e.UplLackOfBackground).HasColumnName("uplLackOfBackground");

                entity.Property(e => e.UplLackOfBackgroundCeo).HasColumnName("uplLackOfBackgroundCEO");

                entity.Property(e => e.UplLackOfBackgroundOfApplicant).HasColumnName("uplLackOfBackgroundOfApplicant");

                entity.Property(e => e.UplLetterCreditOfficialGazette).HasColumnName("uplLetterCreditOfficialGazette");

                entity.Property(e => e.UplMostanad).HasColumnName("uplMostanad");

                entity.Property(e => e.UplPhotoAgentSupply).HasColumnName("uplPhotoAgentSupply");

                entity.Property(e => e.UplPhotoManagers).HasColumnName("uplPhotoManagers");

                entity.Property(e => e.UplTheEndApplicantService).HasColumnName("uplTheEndApplicantService");
            });

            modelBuilder.Entity<Operations>(entity =>
            {
                entity.HasIndex(e => e.LawId)
                    .HasName("IX_LawId");

                entity.HasOne(d => d.Law)
                    .WithMany(p => p.Operations)
                    .HasForeignKey(d => d.LawId)
                    .HasConstraintName("FK_dbo.Operations_dbo.Laws_LawId");
            });

            modelBuilder.Entity<OrganizationDocuments>(entity =>
            {
                entity.HasIndex(e => e.VisionId)
                    .HasName("IX_Vision_Id");

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.VisionId).HasColumnName("Vision_Id");

                entity.HasOne(d => d.Vision)
                    .WithMany(p => p.OrganizationDocuments)
                    .HasForeignKey(d => d.VisionId)
                    .HasConstraintName("FK_dbo.OrganizationDocuments_dbo.Visions_Vision_Id");
            });

            modelBuilder.Entity<Organizations>(entity =>
            {
                entity.ToTable("Organizations", "ipdbuser");
            });

            modelBuilder.Entity<Organizations1>(entity =>
            {
                entity.ToTable("Organizations");
            });

            modelBuilder.Entity<OtherRatings>(entity =>
            {
                entity.Property(e => e.AuditStatusOtherRatings).HasColumnName("AuditStatus_OtherRatings");

                entity.Property(e => e.CreatorOtherRatings).HasColumnName("Creator_OtherRatings");

                entity.Property(e => e.Ddl2Raing).HasColumnName("ddl2Raing");

                entity.Property(e => e.DdlSystemRating).HasColumnName("ddlSystemRating");

                entity.Property(e => e.InstanceIdOtherRatings).HasColumnName("InstanceId_OtherRatings");

                entity.Property(e => e.InstanceSridOtherRatings).HasColumnName("InstanceSRId_OtherRatings");

                entity.Property(e => e.IpOtherRatings).HasColumnName("IP_OtherRatings");

                entity.Property(e => e.RegistrationDateOtherRatings).HasColumnName("RegistrationDate_OtherRatings");

                entity.Property(e => e.RegistrationStatusOtherRatings).HasColumnName("RegistrationStatus_OtherRatings");

                entity.Property(e => e.RegistrationTimeOtherRatings).HasColumnName("RegistrationTime_OtherRatings");

                entity.Property(e => e.TxaGameContex).HasColumnName("txaGameContex");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.OtherRatings)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_GameInformation_OtherRatings");
            });

            modelBuilder.Entity<PbublishLicenseUpload>(entity =>
            {
                entity.ToTable("PBublishLicense_Upload");

                entity.Property(e => e.AuditStatusPbublishLicenseUpload).HasColumnName("AuditStatus_PBublishLicense_Upload");

                entity.Property(e => e.CreatorPbublishLicenseUpload).HasColumnName("Creator_PBublishLicense_Upload");

                entity.Property(e => e.InstanceIdPbublishLicenseUpload).HasColumnName("InstanceId_PBublishLicense_Upload");

                entity.Property(e => e.InstanceSridPbublishLicenseUpload).HasColumnName("InstanceSRId_PBublishLicense_Upload");

                entity.Property(e => e.IpPbublishLicenseUpload).HasColumnName("IP_PBublishLicense_Upload");

                entity.Property(e => e.RegistrationDatePbublishLicenseUpload).HasColumnName("RegistrationDate_PBublishLicense_Upload");

                entity.Property(e => e.RegistrationStatusPbublishLicenseUpload).HasColumnName("RegistrationStatus_PBublishLicense_Upload");

                entity.Property(e => e.RegistrationTimePbublishLicenseUpload).HasColumnName("RegistrationTime_PBublishLicense_Upload");

                entity.Property(e => e.UploadFile).HasColumnName("uploadFile");
            });

            modelBuilder.Entity<PepgameLicenseConfirmation>(entity =>
            {
                entity.ToTable("PEPGameLicenseConfirmation");

                entity.Property(e => e.AuditStatusPepgameLicenseConfirmation).HasColumnName("AuditStatus_PEPGameLicenseConfirmation");

                entity.Property(e => e.CreatorPepgameLicenseConfirmation).HasColumnName("Creator_PEPGameLicenseConfirmation");

                entity.Property(e => e.InstanceIdPepgameLicenseConfirmation).HasColumnName("InstanceId_PEPGameLicenseConfirmation");

                entity.Property(e => e.InstanceSridPepgameLicenseConfirmation).HasColumnName("InstanceSRId_PEPGameLicenseConfirmation");

                entity.Property(e => e.IpPepgameLicenseConfirmation).HasColumnName("IP_PEPGameLicenseConfirmation");

                entity.Property(e => e.RegistrationDatePepgameLicenseConfirmation).HasColumnName("RegistrationDate_PEPGameLicenseConfirmation");

                entity.Property(e => e.RegistrationStatusPepgameLicenseConfirmation).HasColumnName("RegistrationStatus_PEPGameLicenseConfirmation");

                entity.Property(e => e.RegistrationTimePepgameLicenseConfirmation).HasColumnName("RegistrationTime_PEPGameLicenseConfirmation");
            });

            modelBuilder.Entity<PepgameLicenseRequest>(entity =>
            {
                entity.ToTable("PEPGameLicenseRequest");

                entity.Property(e => e.AuditStatusPepgameLicenseRequest).HasColumnName("AuditStatus_PEPGameLicenseRequest");

                entity.Property(e => e.CompanySubmitDateGregorian)
                    .HasColumnName("CompanySubmitDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatorPepgameLicenseRequest).HasColumnName("Creator_PEPGameLicenseRequest");

                entity.Property(e => e.Flname).HasColumnName("FLName");

                entity.Property(e => e.InstanceIdPepgameLicenseRequest).HasColumnName("InstanceId_PEPGameLicenseRequest");

                entity.Property(e => e.InstanceSridPepgameLicenseRequest).HasColumnName("InstanceSRId_PEPGameLicenseRequest");

                entity.Property(e => e.IpPepgameLicenseRequest).HasColumnName("IP_PEPGameLicenseRequest");

                entity.Property(e => e.MgntBcpic).HasColumnName("MgntBCPic");

                entity.Property(e => e.MgntNipic).HasColumnName("MgntNIPic");

                entity.Property(e => e.RegistrationDatePepgameLicenseRequest).HasColumnName("RegistrationDate_PEPGameLicenseRequest");

                entity.Property(e => e.RegistrationStatusPepgameLicenseRequest).HasColumnName("RegistrationStatus_PEPGameLicenseRequest");

                entity.Property(e => e.RegistrationTimePepgameLicenseRequest).HasColumnName("RegistrationTime_PEPGameLicenseRequest");
            });

            modelBuilder.Entity<PermissionGroups>(entity =>
            {
                entity.HasKey(e => e.PermissionGroupId);
            });

            modelBuilder.Entity<Permissions>(entity =>
            {
                entity.HasKey(e => e.PermissionId);

                entity.HasIndex(e => e.PermissionName)
                    .HasName("IX_PermissionName")
                    .IsUnique();

                entity.Property(e => e.PermissionName).HasMaxLength(200);
            });

            modelBuilder.Entity<PersonalInformations>(entity =>
            {
                entity.HasIndex(e => e.PersonId)
                    .HasName("IX_PersonId");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonalInformations)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_dbo.PersonalInformations_dbo.People_PersonId");
            });

            modelBuilder.Entity<PhysicalPublishersAccounts>(entity =>
            {
                entity.ToTable("PhysicalPublishers_Accounts");

                entity.Property(e => e.AuditStatusPhysicalPublishersAccounts).HasColumnName("AuditStatus_PhysicalPublishers_Accounts");

                entity.Property(e => e.CreatorPhysicalPublishersAccounts).HasColumnName("Creator_PhysicalPublishers_Accounts");

                entity.Property(e => e.InstanceIdPhysicalPublishersAccounts).HasColumnName("InstanceId_PhysicalPublishers_Accounts");

                entity.Property(e => e.InstanceSridPhysicalPublishersAccounts).HasColumnName("InstanceSRId_PhysicalPublishers_Accounts");

                entity.Property(e => e.IpPhysicalPublishersAccounts).HasColumnName("IP_PhysicalPublishers_Accounts");

                entity.Property(e => e.NumGreenHologram).HasColumnName("numGreenHologram");

                entity.Property(e => e.NumPrimaryPublisherHologram).HasColumnName("numPrimaryPublisherHologram");

                entity.Property(e => e.NumPublisherRating).HasColumnName("numPublisherRating");

                entity.Property(e => e.RegistrationDatePhysicalPublishersAccounts).HasColumnName("RegistrationDate_PhysicalPublishers_Accounts");

                entity.Property(e => e.RegistrationStatusPhysicalPublishersAccounts).HasColumnName("RegistrationStatus_PhysicalPublishers_Accounts");

                entity.Property(e => e.RegistrationTimePhysicalPublishersAccounts).HasColumnName("RegistrationTime_PhysicalPublishers_Accounts");

                entity.Property(e => e.UplDocumentation).HasColumnName("uplDocumentation");

                entity.Property(e => e.UplPrimaryHologramDocumentation).HasColumnName("uplPrimaryHologramDocumentation");

                entity.Property(e => e.UplPrimaryScoreDocumentation).HasColumnName("uplPrimaryScoreDocumentation");
            });

            modelBuilder.Entity<PhysicalPublishersBasicInformation>(entity =>
            {
                entity.ToTable("PhysicalPublishers_BasicInformation");

                entity.Property(e => e.AuditStatusPhysicalPublishersBasicInformation).HasColumnName("AuditStatus_PhysicalPublishers_BasicInformation");

                entity.Property(e => e.CreatorPhysicalPublishersBasicInformation).HasColumnName("Creator_PhysicalPublishers_BasicInformation");

                entity.Property(e => e.InstanceIdPhysicalPublishersBasicInformation).HasColumnName("InstanceId_PhysicalPublishers_BasicInformation");

                entity.Property(e => e.InstanceSridPhysicalPublishersBasicInformation).HasColumnName("InstanceSRId_PhysicalPublishers_BasicInformation");

                entity.Property(e => e.IpPhysicalPublishersBasicInformation).HasColumnName("IP_PhysicalPublishers_BasicInformation");

                entity.Property(e => e.MailEMail).HasColumnName("mailE_Mail");

                entity.Property(e => e.NumFixedPhoneNumber2).HasColumnName("numFixedPhoneNumber2");

                entity.Property(e => e.NumMobilePhoneNumber2).HasColumnName("numMobilePhoneNumber2");

                entity.Property(e => e.RegistrationDatePhysicalPublishersBasicInformation).HasColumnName("RegistrationDate_PhysicalPublishers_BasicInformation");

                entity.Property(e => e.RegistrationStatusPhysicalPublishersBasicInformation).HasColumnName("RegistrationStatus_PhysicalPublishers_BasicInformation");

                entity.Property(e => e.RegistrationTimePhysicalPublishersBasicInformation).HasColumnName("RegistrationTime_PhysicalPublishers_BasicInformation");

                entity.Property(e => e.TxtLastName).HasColumnName("txtLastName");

                entity.Property(e => e.TxtName).HasColumnName("txtName");

                entity.Property(e => e.TxtRequestTitle).HasColumnName("txtRequestTitle");

                entity.Property(e => e.Upl).HasColumnName("upl");
            });

            modelBuilder.Entity<PhysicalPublishersDisapprovals>(entity =>
            {
                entity.ToTable("PhysicalPublishers_Disapprovals");

                entity.Property(e => e.AuditStatusPhysicalPublishersDisapprovals).HasColumnName("AuditStatus_PhysicalPublishers_Disapprovals");

                entity.Property(e => e.AxtReasonForNotAccepting).HasColumnName("axtReasonForNotAccepting");

                entity.Property(e => e.CreatorPhysicalPublishersDisapprovals).HasColumnName("Creator_PhysicalPublishers_Disapprovals");

                entity.Property(e => e.InstanceIdPhysicalPublishersDisapprovals).HasColumnName("InstanceId_PhysicalPublishers_Disapprovals");

                entity.Property(e => e.InstanceSridPhysicalPublishersDisapprovals).HasColumnName("InstanceSRId_PhysicalPublishers_Disapprovals");

                entity.Property(e => e.IpPhysicalPublishersDisapprovals).HasColumnName("IP_PhysicalPublishers_Disapprovals");

                entity.Property(e => e.RegistrationDatePhysicalPublishersDisapprovals).HasColumnName("RegistrationDate_PhysicalPublishers_Disapprovals");

                entity.Property(e => e.RegistrationStatusPhysicalPublishersDisapprovals).HasColumnName("RegistrationStatus_PhysicalPublishers_Disapprovals");

                entity.Property(e => e.RegistrationTimePhysicalPublishersDisapprovals).HasColumnName("RegistrationTime_PhysicalPublishers_Disapprovals");
            });

            modelBuilder.Entity<PhysicalPublishersFinalInformation>(entity =>
            {
                entity.ToTable("PhysicalPublishers_FinalInformation");

                entity.Property(e => e.AuditStatusPhysicalPublishersFinalInformation).HasColumnName("AuditStatus_PhysicalPublishers_FinalInformation");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorPhysicalPublishersFinalInformation).HasColumnName("Creator_PhysicalPublishers_FinalInformation");

                entity.Property(e => e.DdlApplicantType).HasColumnName("ddlApplicantType");

                entity.Property(e => e.DdlKind).HasColumnName("ddlKind");

                entity.Property(e => e.InstanceIdPhysicalPublishersFinalInformation).HasColumnName("InstanceId_PhysicalPublishers_FinalInformation");

                entity.Property(e => e.InstanceSridPhysicalPublishersFinalInformation).HasColumnName("InstanceSRId_PhysicalPublishers_FinalInformation");

                entity.Property(e => e.IpPhysicalPublishersFinalInformation).HasColumnName("IP_PhysicalPublishers_FinalInformation");

                entity.Property(e => e.NumEconomicCode).HasColumnName("numEconomicCode");

                entity.Property(e => e.NumNationalCodeCeo).HasColumnName("numNationalCodeCEO");

                entity.Property(e => e.NumPostalCode).HasColumnName("numPostalCode");

                entity.Property(e => e.NumRegistrationNumber).HasColumnName("numRegistrationNumber");

                entity.Property(e => e.Pdate).HasColumnName("pdate");

                entity.Property(e => e.PdateGregorian)
                    .HasColumnName("pdate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDatePhysicalPublishersFinalInformation).HasColumnName("RegistrationDate_PhysicalPublishers_FinalInformation");

                entity.Property(e => e.RegistrationStatusPhysicalPublishersFinalInformation).HasColumnName("RegistrationStatus_PhysicalPublishers_FinalInformation");

                entity.Property(e => e.RegistrationTimePhysicalPublishersFinalInformation).HasColumnName("RegistrationTime_PhysicalPublishers_FinalInformation");

                entity.Property(e => e.TxtNameCeo).HasColumnName("txtNameCEO");

                entity.Property(e => e.TxtNameCompany).HasColumnName("txtNameCompany");

                entity.Property(e => e.TxtSurnameCeo).HasColumnName("txtSurnameCEO");

                entity.Property(e => e.UplDocumentation).HasColumnName("uplDocumentation");
            });

            modelBuilder.Entity<PhysicalPublishersUserId>(entity =>
            {
                entity.ToTable("PhysicalPublishers_UserID");

                entity.Property(e => e.AuditStatusPhysicalPublishersUserId).HasColumnName("AuditStatus_PhysicalPublishers_UserID");

                entity.Property(e => e.CreatorPhysicalPublishersUserId).HasColumnName("Creator_PhysicalPublishers_UserID");

                entity.Property(e => e.Ddlcoooooooooooooompany).HasColumnName("ddlcoooooooooooooompany");

                entity.Property(e => e.InstanceIdPhysicalPublishersUserId).HasColumnName("InstanceId_PhysicalPublishers_UserID");

                entity.Property(e => e.InstanceSridPhysicalPublishersUserId).HasColumnName("InstanceSRId_PhysicalPublishers_UserID");

                entity.Property(e => e.IpPhysicalPublishersUserId).HasColumnName("IP_PhysicalPublishers_UserID");

                entity.Property(e => e.RegistrationDatePhysicalPublishersUserId).HasColumnName("RegistrationDate_PhysicalPublishers_UserID");

                entity.Property(e => e.RegistrationStatusPhysicalPublishersUserId).HasColumnName("RegistrationStatus_PhysicalPublishers_UserID");

                entity.Property(e => e.RegistrationTimePhysicalPublishersUserId).HasColumnName("RegistrationTime_PhysicalPublishers_UserID");

                entity.Property(e => e.TxtPassword).HasColumnName("txtPassword");

                entity.Property(e => e.TxtPhysicalPublisherId).HasColumnName("txtPhysicalPublisherID");
            });

            modelBuilder.Entity<Pictogram2>(entity =>
            {
                entity.ToTable("pictogram2");

                entity.Property(e => e.AuditStatusPictogram2).HasColumnName("AuditStatus_pictogram2");

                entity.Property(e => e.CreatorPictogram2).HasColumnName("Creator_pictogram2");

                entity.Property(e => e.Ddlpictogram2).HasColumnName("ddlpictogram2");

                entity.Property(e => e.InstanceIdPictogram2).HasColumnName("InstanceId_pictogram2");

                entity.Property(e => e.InstanceSridPictogram2).HasColumnName("InstanceSRId_pictogram2");

                entity.Property(e => e.IpPictogram2).HasColumnName("IP_pictogram2");

                entity.Property(e => e.RegistrationDatePictogram2).HasColumnName("RegistrationDate_pictogram2");

                entity.Property(e => e.RegistrationStatusPictogram2).HasColumnName("RegistrationStatus_pictogram2");

                entity.Property(e => e.RegistrationTimePictogram2).HasColumnName("RegistrationTime_pictogram2");

                entity.Property(e => e.TxtpictogramValue2).HasColumnName("txtpictogramValue2");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.Pictogram2)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_wRadebandiSazmani_pictogram2");
            });

            modelBuilder.Entity<PlatformsList>(entity =>
            {
                entity.Property(e => e.AuditStatusPlatformsList).HasColumnName("AuditStatus_PlatformsList");

                entity.Property(e => e.CreatorPlatformsList).HasColumnName("Creator_PlatformsList");

                entity.Property(e => e.InstanceIdPlatformsList).HasColumnName("InstanceId_PlatformsList");

                entity.Property(e => e.InstanceSridPlatformsList).HasColumnName("InstanceSRId_PlatformsList");

                entity.Property(e => e.IpPlatformsList).HasColumnName("IP_PlatformsList");

                entity.Property(e => e.RegistrationDatePlatformsList).HasColumnName("RegistrationDate_PlatformsList");

                entity.Property(e => e.RegistrationStatusPlatformsList).HasColumnName("RegistrationStatus_PlatformsList");

                entity.Property(e => e.RegistrationTimePlatformsList).HasColumnName("RegistrationTime_PlatformsList");

                entity.Property(e => e.TxtPlatform).HasColumnName("txtPlatform");
            });

            modelBuilder.Entity<PostPeoples>(entity =>
            {
                entity.HasIndex(e => e.PeopleId)
                    .HasName("IX_PeopleId");

                entity.HasIndex(e => e.PostId)
                    .HasName("IX_PostId");

                entity.HasOne(d => d.People)
                    .WithMany(p => p.PostPeoples)
                    .HasForeignKey(d => d.PeopleId)
                    .HasConstraintName("FK_dbo.PostPeoples_dbo.People_PeopleId");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.PostPeoples)
                    .HasForeignKey(d => d.PostId)
                    .HasConstraintName("FK_dbo.PostPeoples_dbo.Posts_PostId");
            });

            modelBuilder.Entity<Posts>(entity =>
            {
                entity.HasIndex(e => e.UnitId)
                    .HasName("IX_UnitId");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.Posts)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_dbo.Posts_dbo.Units_UnitId");
            });

            modelBuilder.Entity<PrintAuctionsSelectPublisher>(entity =>
            {
                entity.ToTable("PrintAuctions_SelectPublisher");

                entity.Property(e => e.AuditStatusPrintAuctionsSelectPublisher).HasColumnName("AuditStatus_PrintAuctions_SelectPublisher");

                entity.Property(e => e.CreatorPrintAuctionsSelectPublisher).HasColumnName("Creator_PrintAuctions_SelectPublisher");

                entity.Property(e => e.InstanceIdPrintAuctionsSelectPublisher).HasColumnName("InstanceId_PrintAuctions_SelectPublisher");

                entity.Property(e => e.InstanceSridPrintAuctionsSelectPublisher).HasColumnName("InstanceSRId_PrintAuctions_SelectPublisher");

                entity.Property(e => e.IpPrintAuctionsSelectPublisher).HasColumnName("IP_PrintAuctions_SelectPublisher");

                entity.Property(e => e.PdateAuctionDatePrinting).HasColumnName("pdateAuctionDatePrinting");

                entity.Property(e => e.PdateAuctionDatePrintingGregorian)
                    .HasColumnName("pdateAuctionDatePrinting_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDatePrintAuctionsSelectPublisher).HasColumnName("RegistrationDate_PrintAuctions_SelectPublisher");

                entity.Property(e => e.RegistrationStatusPrintAuctionsSelectPublisher).HasColumnName("RegistrationStatus_PrintAuctions_SelectPublisher");

                entity.Property(e => e.RegistrationTimePrintAuctionsSelectPublisher).HasColumnName("RegistrationTime_PrintAuctions_SelectPublisher");

                entity.Property(e => e.TimeAuctionsHoursPrinting).HasColumnName("timeAuctionsHoursPrinting");
            });

            modelBuilder.Entity<ProcessChangeRequest>(entity =>
            {
                entity.Property(e => e.AuditStatusProcessChangeRequest).HasColumnName("AuditStatus_ProcessChangeRequest");

                entity.Property(e => e.CreatorProcessChangeRequest).HasColumnName("Creator_ProcessChangeRequest");

                entity.Property(e => e.InstanceIdProcessChangeRequest).HasColumnName("InstanceId_ProcessChangeRequest");

                entity.Property(e => e.InstanceSridProcessChangeRequest).HasColumnName("InstanceSRId_ProcessChangeRequest");

                entity.Property(e => e.IpProcessChangeRequest).HasColumnName("IP_ProcessChangeRequest");

                entity.Property(e => e.RegistrationDateProcessChangeRequest).HasColumnName("RegistrationDate_ProcessChangeRequest");

                entity.Property(e => e.RegistrationStatusProcessChangeRequest).HasColumnName("RegistrationStatus_ProcessChangeRequest");

                entity.Property(e => e.RegistrationTimeProcessChangeRequest).HasColumnName("RegistrationTime_ProcessChangeRequest");

                entity.Property(e => e.TxtD).HasColumnName("txtD");

                entity.Property(e => e.TxtOffer).HasColumnName("txtOffer");

                entity.Property(e => e.TxtPt).HasColumnName("txtPT");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");
            });

            modelBuilder.Entity<ProductSpecifications>(entity =>
            {
                entity.Property(e => e.AuditStatusProductSpecifications).HasColumnName("AuditStatus_ProductSpecifications");

                entity.Property(e => e.CreatorProductSpecifications).HasColumnName("Creator_ProductSpecifications");

                entity.Property(e => e.InstanceIdProductSpecifications).HasColumnName("InstanceId_ProductSpecifications");

                entity.Property(e => e.InstanceSridProductSpecifications).HasColumnName("InstanceSRId_ProductSpecifications");

                entity.Property(e => e.IpProductSpecifications).HasColumnName("IP_ProductSpecifications");

                entity.Property(e => e.NumNumberGoods).HasColumnName("numNumberGoods");

                entity.Property(e => e.RegistrationDateProductSpecifications).HasColumnName("RegistrationDate_ProductSpecifications");

                entity.Property(e => e.RegistrationStatusProductSpecifications).HasColumnName("RegistrationStatus_ProductSpecifications");

                entity.Property(e => e.RegistrationTimeProductSpecifications).HasColumnName("RegistrationTime_ProductSpecifications");

                entity.Property(e => e.TxtProductName).HasColumnName("txtProductName");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.ProductSpecifications)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ApplyingForGoods_Form1_ProductSpecifications");
            });

            modelBuilder.Entity<PropellerReleaseCheckApplyingDeputy>(entity =>
            {
                entity.ToTable("PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.AuditStatusPropellerReleaseCheckApplyingDeputy).HasColumnName("AuditStatus_PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.AxtActionOrder).HasColumnName("axtActionOrder");

                entity.Property(e => e.AxtReasonRefusal).HasColumnName("axtReasonRefusal");

                entity.Property(e => e.CreatorPropellerReleaseCheckApplyingDeputy).HasColumnName("Creator_PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.DdlResultReview).HasColumnName("ddlResultReview");

                entity.Property(e => e.InstanceIdPropellerReleaseCheckApplyingDeputy).HasColumnName("InstanceId_PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.InstanceSridPropellerReleaseCheckApplyingDeputy).HasColumnName("InstanceSRId_PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.IpPropellerReleaseCheckApplyingDeputy).HasColumnName("IP_PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.RegistrationDatePropellerReleaseCheckApplyingDeputy).HasColumnName("RegistrationDate_PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.RegistrationStatusPropellerReleaseCheckApplyingDeputy).HasColumnName("RegistrationStatus_PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.RegistrationTimePropellerReleaseCheckApplyingDeputy).HasColumnName("RegistrationTime_PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.TxtPeriodRenewalLicense).HasColumnName("txtPeriodRenewalLicense");
            });

            modelBuilder.Entity<PropellerReleaseSelectPermissionsRelease>(entity =>
            {
                entity.ToTable("PropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.AuditStatusPropellerReleaseSelectPermissionsRelease).HasColumnName("AuditStatus_PropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.CreatorPropellerReleaseSelectPermissionsRelease).HasColumnName("Creator_PropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.InstanceIdPropellerReleaseSelectPermissionsRelease).HasColumnName("InstanceId_PropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.InstanceSridPropellerReleaseSelectPermissionsRelease).HasColumnName("InstanceSRId_PropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.IpPropellerReleaseSelectPermissionsRelease).HasColumnName("IP_PropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.RegistrationDatePropellerReleaseSelectPermissionsRelease).HasColumnName("RegistrationDate_PropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.RegistrationStatusPropellerReleaseSelectPermissionsRelease).HasColumnName("RegistrationStatus_PropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.RegistrationTimePropellerReleaseSelectPermissionsRelease).HasColumnName("RegistrationTime_PropellerRelease_SelectPermissionsRelease");
            });

            modelBuilder.Entity<PropellerReleaseUploadPropellerRelease>(entity =>
            {
                entity.ToTable("PropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.AuditStatusPropellerReleaseUploadPropellerRelease).HasColumnName("AuditStatus_PropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorPropellerReleaseUploadPropellerRelease).HasColumnName("Creator_PropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.InstanceIdPropellerReleaseUploadPropellerRelease).HasColumnName("InstanceId_PropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.InstanceSridPropellerReleaseUploadPropellerRelease).HasColumnName("InstanceSRId_PropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.IpPropellerReleaseUploadPropellerRelease).HasColumnName("IP_PropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.RegistrationDatePropellerReleaseUploadPropellerRelease).HasColumnName("RegistrationDate_PropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.RegistrationStatusPropellerReleaseUploadPropellerRelease).HasColumnName("RegistrationStatus_PropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.RegistrationTimePropellerReleaseUploadPropellerRelease).HasColumnName("RegistrationTime_PropellerRelease_UploadPropellerRelease");

                entity.Property(e => e.UplUploadLicenseRelease).HasColumnName("uplUploadLicenseRelease");
            });

            modelBuilder.Entity<PublisherSubmit>(entity =>
            {
                entity.Property(e => e.AuditStatusPublisherSubmit).HasColumnName("AuditStatus_PublisherSubmit");

                entity.Property(e => e.CreatorPublisherSubmit).HasColumnName("Creator_PublisherSubmit");

                entity.Property(e => e.InstanceIdPublisherSubmit).HasColumnName("InstanceId_PublisherSubmit");

                entity.Property(e => e.InstanceSridPublisherSubmit).HasColumnName("InstanceSRId_PublisherSubmit");

                entity.Property(e => e.IpPublisherSubmit).HasColumnName("IP_PublisherSubmit");

                entity.Property(e => e.RegistrationDatePublisherSubmit).HasColumnName("RegistrationDate_PublisherSubmit");

                entity.Property(e => e.RegistrationStatusPublisherSubmit).HasColumnName("RegistrationStatus_PublisherSubmit");

                entity.Property(e => e.RegistrationTimePublisherSubmit).HasColumnName("RegistrationTime_PublisherSubmit");

                entity.Property(e => e.TxaAddress).HasColumnName("txaAddress");

                entity.Property(e => e.TxtPublisherId).HasColumnName("txtPublisherID");

                entity.Property(e => e.TxtPublisherName).HasColumnName("txtPublisherName");

                entity.Property(e => e.TxtSubmitCode).HasColumnName("txtSubmitCode");

                entity.Property(e => e.TxtWebSite).HasColumnName("txtWebSite");

                entity.Property(e => e.TxtZipCode).HasColumnName("txtZipCode");
            });

            modelBuilder.Entity<PublishLicenceCover>(entity =>
            {
                entity.HasKey(e => new { e.FileId, e.PublishLicenseId });
            });

            modelBuilder.Entity<RatingAccountApplyingRatingAccount>(entity =>
            {
                entity.ToTable("RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.AuditStatusRatingAccountApplyingRatingAccount).HasColumnName("AuditStatus_RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.CreatorRatingAccountApplyingRatingAccount).HasColumnName("Creator_RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.InstanceIdRatingAccountApplyingRatingAccount).HasColumnName("InstanceId_RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.InstanceSridRatingAccountApplyingRatingAccount).HasColumnName("InstanceSRId_RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.IpRatingAccountApplyingRatingAccount).HasColumnName("IP_RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.NumScoreRequested).HasColumnName("numScoreRequested");

                entity.Property(e => e.RegistrationDateRatingAccountApplyingRatingAccount).HasColumnName("RegistrationDate_RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.RegistrationStatusRatingAccountApplyingRatingAccount).HasColumnName("RegistrationStatus_RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.RegistrationTimeRatingAccountApplyingRatingAccount).HasColumnName("RegistrationTime_RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.TxtReqTitle).HasColumnName("txtReqTitle");

                entity.Property(e => e.UplPaymentDocumentation).HasColumnName("uplPaymentDocumentation");
            });

            modelBuilder.Entity<RatingAccountCheckingFinancialDeputy>(entity =>
            {
                entity.ToTable("RatingAccount_CheckingFinancialDeputy");

                entity.Property(e => e.AuditStatusRatingAccountCheckingFinancialDeputy).HasColumnName("AuditStatus_RatingAccount_CheckingFinancialDeputy");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.AxtNeedCorrection).HasColumnName("axtNeedCorrection");

                entity.Property(e => e.CreatorRatingAccountCheckingFinancialDeputy).HasColumnName("Creator_RatingAccount_CheckingFinancialDeputy");

                entity.Property(e => e.DdlResultApplicationReview).HasColumnName("ddlResultApplicationReview");

                entity.Property(e => e.InstanceIdRatingAccountCheckingFinancialDeputy).HasColumnName("InstanceId_RatingAccount_CheckingFinancialDeputy");

                entity.Property(e => e.InstanceSridRatingAccountCheckingFinancialDeputy).HasColumnName("InstanceSRId_RatingAccount_CheckingFinancialDeputy");

                entity.Property(e => e.IpRatingAccountCheckingFinancialDeputy).HasColumnName("IP_RatingAccount_CheckingFinancialDeputy");

                entity.Property(e => e.RegistrationDateRatingAccountCheckingFinancialDeputy).HasColumnName("RegistrationDate_RatingAccount_CheckingFinancialDeputy");

                entity.Property(e => e.RegistrationStatusRatingAccountCheckingFinancialDeputy).HasColumnName("RegistrationStatus_RatingAccount_CheckingFinancialDeputy");

                entity.Property(e => e.RegistrationTimeRatingAccountCheckingFinancialDeputy).HasColumnName("RegistrationTime_RatingAccount_CheckingFinancialDeputy");
            });

            modelBuilder.Entity<RatingAccountFinancialManagerReview>(entity =>
            {
                entity.ToTable("RatingAccount_FinancialManagerReview");

                entity.Property(e => e.AuditStatusRatingAccountFinancialManagerReview).HasColumnName("AuditStatus_RatingAccount_FinancialManagerReview");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.AxtNeedCorrection).HasColumnName("axtNeedCorrection");

                entity.Property(e => e.CreatorRatingAccountFinancialManagerReview).HasColumnName("Creator_RatingAccount_FinancialManagerReview");

                entity.Property(e => e.DdlResultApplicationReview).HasColumnName("ddlResultApplicationReview");

                entity.Property(e => e.InstanceIdRatingAccountFinancialManagerReview).HasColumnName("InstanceId_RatingAccount_FinancialManagerReview");

                entity.Property(e => e.InstanceSridRatingAccountFinancialManagerReview).HasColumnName("InstanceSRId_RatingAccount_FinancialManagerReview");

                entity.Property(e => e.IpRatingAccountFinancialManagerReview).HasColumnName("IP_RatingAccount_FinancialManagerReview");

                entity.Property(e => e.NumScoreApproved).HasColumnName("numScoreApproved");

                entity.Property(e => e.RegistrationDateRatingAccountFinancialManagerReview).HasColumnName("RegistrationDate_RatingAccount_FinancialManagerReview");

                entity.Property(e => e.RegistrationStatusRatingAccountFinancialManagerReview).HasColumnName("RegistrationStatus_RatingAccount_FinancialManagerReview");

                entity.Property(e => e.RegistrationTimeRatingAccountFinancialManagerReview).HasColumnName("RegistrationTime_RatingAccount_FinancialManagerReview");
            });

            modelBuilder.Entity<RatingAccountReviewExpertSales>(entity =>
            {
                entity.ToTable("RatingAccount_ReviewExpertSales");

                entity.Property(e => e.AuditStatusRatingAccountReviewExpertSales).HasColumnName("AuditStatus_RatingAccount_ReviewExpertSales");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.AxtNeedCorrection).HasColumnName("axtNeedCorrection");

                entity.Property(e => e.CreatorRatingAccountReviewExpertSales).HasColumnName("Creator_RatingAccount_ReviewExpertSales");

                entity.Property(e => e.DdlResultApplicationReview).HasColumnName("ddlResultApplicationReview");

                entity.Property(e => e.InstanceIdRatingAccountReviewExpertSales).HasColumnName("InstanceId_RatingAccount_ReviewExpertSales");

                entity.Property(e => e.InstanceSridRatingAccountReviewExpertSales).HasColumnName("InstanceSRId_RatingAccount_ReviewExpertSales");

                entity.Property(e => e.IpRatingAccountReviewExpertSales).HasColumnName("IP_RatingAccount_ReviewExpertSales");

                entity.Property(e => e.RegistrationDateRatingAccountReviewExpertSales).HasColumnName("RegistrationDate_RatingAccount_ReviewExpertSales");

                entity.Property(e => e.RegistrationStatusRatingAccountReviewExpertSales).HasColumnName("RegistrationStatus_RatingAccount_ReviewExpertSales");

                entity.Property(e => e.RegistrationTimeRatingAccountReviewExpertSales).HasColumnName("RegistrationTime_RatingAccount_ReviewExpertSales");

                entity.Property(e => e.UplFinancialDocuments).HasColumnName("uplFinancialDocuments");
            });

            modelBuilder.Entity<RatingRequest>(entity =>
            {
                entity.Property(e => e.AuditStatusRatingRequest).HasColumnName("AuditStatus_RatingRequest");

                entity.Property(e => e.CreatorRatingRequest).HasColumnName("Creator_RatingRequest");

                entity.Property(e => e.Ddl2TestPlatform).HasColumnName("ddl2TestPlatform");

                entity.Property(e => e.DdlGameName).HasColumnName("ddlGameName");

                entity.Property(e => e.DdlGamer).HasColumnName("ddlGamer");

                entity.Property(e => e.DdlNarrator).HasColumnName("ddlNarrator");

                entity.Property(e => e.DdlResult).HasColumnName("ddlResult");

                entity.Property(e => e.InstanceIdRatingRequest).HasColumnName("InstanceId_RatingRequest");

                entity.Property(e => e.InstanceSridRatingRequest).HasColumnName("InstanceSRId_RatingRequest");

                entity.Property(e => e.IpRatingRequest).HasColumnName("IP_RatingRequest");

                entity.Property(e => e.RatingDateGregorian)
                    .HasColumnName("RatingDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateRatingRequest).HasColumnName("RegistrationDate_RatingRequest");

                entity.Property(e => e.RegistrationStatusRatingRequest).HasColumnName("RegistrationStatus_RatingRequest");

                entity.Property(e => e.RegistrationTimeRatingRequest).HasColumnName("RegistrationTime_RatingRequest");

                entity.Property(e => e.TxtGameCode).HasColumnName("txtGameCode");

                entity.Property(e => e.TxtIrPublisher).HasColumnName("txtIrPublisher");
            });

            modelBuilder.Entity<RatingSystem>(entity =>
            {
                entity.Property(e => e.AuditStatusRatingSystem).HasColumnName("AuditStatus_RatingSystem");

                entity.Property(e => e.CreatorRatingSystem).HasColumnName("Creator_RatingSystem");

                entity.Property(e => e.InstanceIdRatingSystem).HasColumnName("InstanceId_RatingSystem");

                entity.Property(e => e.InstanceSridRatingSystem).HasColumnName("InstanceSRId_RatingSystem");

                entity.Property(e => e.IpRatingSystem).HasColumnName("IP_RatingSystem");

                entity.Property(e => e.RegistrationDateRatingSystem).HasColumnName("RegistrationDate_RatingSystem");

                entity.Property(e => e.RegistrationStatusRatingSystem).HasColumnName("RegistrationStatus_RatingSystem");

                entity.Property(e => e.RegistrationTimeRatingSystem).HasColumnName("RegistrationTime_RatingSystem");

                entity.Property(e => e.TxtRating).HasColumnName("txtRating");

                entity.Property(e => e.TxtRatingSystem).HasColumnName("txtRatingSystem");
            });

            modelBuilder.Entity<RatingVersion>(entity =>
            {
                entity.Property(e => e.AuditStatusRatingVersion).HasColumnName("AuditStatus_RatingVersion");

                entity.Property(e => e.CreatorRatingVersion).HasColumnName("Creator_RatingVersion");

                entity.Property(e => e.InstanceIdRatingVersion).HasColumnName("InstanceId_RatingVersion");

                entity.Property(e => e.InstanceSridRatingVersion).HasColumnName("InstanceSRId_RatingVersion");

                entity.Property(e => e.IpRatingVersion).HasColumnName("IP_RatingVersion");

                entity.Property(e => e.RegistrationDateRatingVersion).HasColumnName("RegistrationDate_RatingVersion");

                entity.Property(e => e.RegistrationStatusRatingVersion).HasColumnName("RegistrationStatus_RatingVersion");

                entity.Property(e => e.RegistrationTimeRatingVersion).HasColumnName("RegistrationTime_RatingVersion");
            });

            modelBuilder.Entity<ReadFromAnotherDbs>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.ReadFromAnotherDbs)
                    .HasForeignKey<ReadFromAnotherDbs>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.ReadFromAnotherDbs_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<RealDocUpload>(entity =>
            {
                entity.Property(e => e.AuditStatusRealDocUpload).HasColumnName("AuditStatus_RealDocUpload");

                entity.Property(e => e.Bcpic).HasColumnName("BCPic");

                entity.Property(e => e.CreatorRealDocUpload).HasColumnName("Creator_RealDocUpload");

                entity.Property(e => e.Ecpic).HasColumnName("ECPic");

                entity.Property(e => e.InstanceIdRealDocUpload).HasColumnName("InstanceId_RealDocUpload");

                entity.Property(e => e.InstanceSridRealDocUpload).HasColumnName("InstanceSRId_RealDocUpload");

                entity.Property(e => e.IpRealDocUpload).HasColumnName("IP_RealDocUpload");

                entity.Property(e => e.Ncpic).HasColumnName("NCPic");

                entity.Property(e => e.RegistrationDateRealDocUpload).HasColumnName("RegistrationDate_RealDocUpload");

                entity.Property(e => e.RegistrationStatusRealDocUpload).HasColumnName("RegistrationStatus_RealDocUpload");

                entity.Property(e => e.RegistrationTimeRealDocUpload).HasColumnName("RegistrationTime_RealDocUpload");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");
            });

            modelBuilder.Entity<ReceiverEmails>(entity =>
            {
                entity.HasIndex(e => e.SendingMailId)
                    .HasName("IX_SendingMailId");

                entity.HasIndex(e => e.SendingSmsId)
                    .HasName("IX_SendingSMS_Id");

                entity.Property(e => e.SendingSmsId).HasColumnName("SendingSMS_Id");

                entity.HasOne(d => d.SendingMail)
                    .WithMany(p => p.ReceiverEmails)
                    .HasForeignKey(d => d.SendingMailId)
                    .HasConstraintName("FK_dbo.ReceiverEmails_dbo.SendingMails_SendingMailId");

                entity.HasOne(d => d.SendingSms)
                    .WithMany(p => p.ReceiverEmails)
                    .HasForeignKey(d => d.SendingSmsId)
                    .HasConstraintName("FK_dbo.ReceiverEmails_dbo.SendingSMS_SendingSMS_Id");
            });

            modelBuilder.Entity<ReceiveSourceFlag>(entity =>
            {
                entity.ToTable("receiveSourceFlag");

                entity.Property(e => e.AuditStatusReceiveSourceFlag).HasColumnName("AuditStatus_receiveSourceFlag");

                entity.Property(e => e.CreatorReceiveSourceFlag).HasColumnName("Creator_receiveSourceFlag");

                entity.Property(e => e.InstanceIdReceiveSourceFlag).HasColumnName("InstanceId_receiveSourceFlag");

                entity.Property(e => e.InstanceSridReceiveSourceFlag).HasColumnName("InstanceSRId_receiveSourceFlag");

                entity.Property(e => e.IpReceiveSourceFlag).HasColumnName("IP_receiveSourceFlag");

                entity.Property(e => e.RegistrationDateReceiveSourceFlag).HasColumnName("RegistrationDate_receiveSourceFlag");

                entity.Property(e => e.RegistrationStatusReceiveSourceFlag).HasColumnName("RegistrationStatus_receiveSourceFlag");

                entity.Property(e => e.RegistrationTimeReceiveSourceFlag).HasColumnName("RegistrationTime_receiveSourceFlag");

                entity.Property(e => e.TxtSender).HasColumnName("txtSender");
            });

            modelBuilder.Entity<RegisterPyramidTeamsApplyingForAwards>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_ApplyingForAwards");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsApplyingForAwards).HasColumnName("AuditStatus_RegisterPyramidTeams_ApplyingForAwards");

                entity.Property(e => e.CreatorRegisterPyramidTeamsApplyingForAwards).HasColumnName("Creator_RegisterPyramidTeams_ApplyingForAwards");

                entity.Property(e => e.DdlAwardsHonors1).HasColumnName("ddlAwardsHonors_1");

                entity.Property(e => e.DdlAwardsHonors4).HasColumnName("ddlAwardsHonors_4");

                entity.Property(e => e.DdlAwardsHonors7).HasColumnName("ddlAwardsHonors_7");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsApplyingForAwards).HasColumnName("InstanceId_RegisterPyramidTeams_ApplyingForAwards");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsApplyingForAwards).HasColumnName("InstanceSRId_RegisterPyramidTeams_ApplyingForAwards");

                entity.Property(e => e.IpRegisterPyramidTeamsApplyingForAwards).HasColumnName("IP_RegisterPyramidTeams_ApplyingForAwards");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsApplyingForAwards).HasColumnName("RegistrationDate_RegisterPyramidTeams_ApplyingForAwards");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsApplyingForAwards).HasColumnName("RegistrationStatus_RegisterPyramidTeams_ApplyingForAwards");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsApplyingForAwards).HasColumnName("RegistrationTime_RegisterPyramidTeams_ApplyingForAwards");
            });

            modelBuilder.Entity<RegisterPyramidTeamsApplyingForAwardsSub1>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsApplyingForAwardsSub1).HasColumnName("AuditStatus_RegisterPyramidTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.CreatorRegisterPyramidTeamsApplyingForAwardsSub1).HasColumnName("Creator_RegisterPyramidTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.DdlFestivalInformation).HasColumnName("ddlFestivalInformation");

                entity.Property(e => e.DdlFestivalInformation3).HasColumnName("ddlFestivalInformation_3");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsApplyingForAwardsSub1).HasColumnName("InstanceId_RegisterPyramidTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsApplyingForAwardsSub1).HasColumnName("InstanceSRId_RegisterPyramidTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.IpRegisterPyramidTeamsApplyingForAwardsSub1).HasColumnName("IP_RegisterPyramidTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsApplyingForAwardsSub1).HasColumnName("RegistrationDate_RegisterPyramidTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsApplyingForAwardsSub1).HasColumnName("RegistrationStatus_RegisterPyramidTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsApplyingForAwardsSub1).HasColumnName("RegistrationTime_RegisterPyramidTeams_ApplyingForAwards_Sub1");

                entity.Property(e => e.TxtFestivalInformation2).HasColumnName("txtFestivalInformation_2");

                entity.Property(e => e.TxtFestivalInformation4).HasColumnName("txtFestivalInformation_4");

                entity.Property(e => e.UplFestivalInformation5).HasColumnName("uplFestivalInformation_5");
            });

            modelBuilder.Entity<RegisterPyramidTeamsApplyingForAwardsSub2>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsApplyingForAwardsSub2).HasColumnName("AuditStatus_RegisterPyramidTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.CreatorRegisterPyramidTeamsApplyingForAwardsSub2).HasColumnName("Creator_RegisterPyramidTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsApplyingForAwardsSub2).HasColumnName("InstanceId_RegisterPyramidTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsApplyingForAwardsSub2).HasColumnName("InstanceSRId_RegisterPyramidTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.IpRegisterPyramidTeamsApplyingForAwardsSub2).HasColumnName("IP_RegisterPyramidTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsApplyingForAwardsSub2).HasColumnName("RegistrationDate_RegisterPyramidTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsApplyingForAwardsSub2).HasColumnName("RegistrationStatus_RegisterPyramidTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsApplyingForAwardsSub2).HasColumnName("RegistrationTime_RegisterPyramidTeams_ApplyingForAwards_Sub2");

                entity.Property(e => e.TxtArticles1).HasColumnName("txtArticles_1");

                entity.Property(e => e.TxtArticles2).HasColumnName("txtArticles_2");

                entity.Property(e => e.UplArticles3).HasColumnName("uplArticles_3");
            });

            modelBuilder.Entity<RegisterPyramidTeamsApplyingForAwardsSub3>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsApplyingForAwardsSub3).HasColumnName("AuditStatus_RegisterPyramidTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.CreatorRegisterPyramidTeamsApplyingForAwardsSub3).HasColumnName("Creator_RegisterPyramidTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.DdlExhibit4).HasColumnName("ddlExhibit_4");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsApplyingForAwardsSub3).HasColumnName("InstanceId_RegisterPyramidTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsApplyingForAwardsSub3).HasColumnName("InstanceSRId_RegisterPyramidTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.IpRegisterPyramidTeamsApplyingForAwardsSub3).HasColumnName("IP_RegisterPyramidTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.PdateExhibit3).HasColumnName("pdateExhibit_3");

                entity.Property(e => e.PdateExhibit3Gregorian)
                    .HasColumnName("pdateExhibit_3_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsApplyingForAwardsSub3).HasColumnName("RegistrationDate_RegisterPyramidTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsApplyingForAwardsSub3).HasColumnName("RegistrationStatus_RegisterPyramidTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsApplyingForAwardsSub3).HasColumnName("RegistrationTime_RegisterPyramidTeams_ApplyingForAwards_Sub3");

                entity.Property(e => e.TxtExhibit1).HasColumnName("txtExhibit_1");

                entity.Property(e => e.TxtExhibit2).HasColumnName("txtExhibit_2");

                entity.Property(e => e.TxtExhibit5).HasColumnName("txtExhibit5");

                entity.Property(e => e.UplExhibit5).HasColumnName("uplExhibit_5");
            });

            modelBuilder.Entity<RegisterPyramidTeamsFurtherInformation>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_FurtherInformation");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsFurtherInformation).HasColumnName("AuditStatus_RegisterPyramidTeams_FurtherInformation");

                entity.Property(e => e.ChkFurtherInformation6).HasColumnName("chkFurtherInformation_6");

                entity.Property(e => e.CreatorRegisterPyramidTeamsFurtherInformation).HasColumnName("Creator_RegisterPyramidTeams_FurtherInformation");

                entity.Property(e => e.DdlFurtherInformation).HasColumnName("ddlFurtherInformation");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsFurtherInformation).HasColumnName("InstanceId_RegisterPyramidTeams_FurtherInformation");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsFurtherInformation).HasColumnName("InstanceSRId_RegisterPyramidTeams_FurtherInformation");

                entity.Property(e => e.IpRegisterPyramidTeamsFurtherInformation).HasColumnName("IP_RegisterPyramidTeams_FurtherInformation");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsFurtherInformation).HasColumnName("RegistrationDate_RegisterPyramidTeams_FurtherInformation");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsFurtherInformation).HasColumnName("RegistrationStatus_RegisterPyramidTeams_FurtherInformation");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsFurtherInformation).HasColumnName("RegistrationTime_RegisterPyramidTeams_FurtherInformation");
            });

            modelBuilder.Entity<RegisterPyramidTeamsFurtherInformationSub>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_FurtherInformation_Sub");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsFurtherInformationSub).HasColumnName("AuditStatus_RegisterPyramidTeams_FurtherInformation_Sub");

                entity.Property(e => e.CreatorRegisterPyramidTeamsFurtherInformationSub).HasColumnName("Creator_RegisterPyramidTeams_FurtherInformation_Sub");

                entity.Property(e => e.DdlApprenticeship6).HasColumnName("ddlApprenticeship_6");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsFurtherInformationSub).HasColumnName("InstanceId_RegisterPyramidTeams_FurtherInformation_Sub");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsFurtherInformationSub).HasColumnName("InstanceSRId_RegisterPyramidTeams_FurtherInformation_Sub");

                entity.Property(e => e.IpRegisterPyramidTeamsFurtherInformationSub).HasColumnName("IP_RegisterPyramidTeams_FurtherInformation_Sub");

                entity.Property(e => e.PdateApprenticeship2).HasColumnName("pdateApprenticeship_2");

                entity.Property(e => e.PdateApprenticeship2Gregorian)
                    .HasColumnName("pdateApprenticeship_2_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.PdateApprenticeship3).HasColumnName("pdateApprenticeship_3");

                entity.Property(e => e.PdateApprenticeship3Gregorian)
                    .HasColumnName("pdateApprenticeship_3_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsFurtherInformationSub).HasColumnName("RegistrationDate_RegisterPyramidTeams_FurtherInformation_Sub");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsFurtherInformationSub).HasColumnName("RegistrationStatus_RegisterPyramidTeams_FurtherInformation_Sub");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsFurtherInformationSub).HasColumnName("RegistrationTime_RegisterPyramidTeams_FurtherInformation_Sub");

                entity.Property(e => e.TxtApprenticeship1).HasColumnName("txtApprenticeship_1");

                entity.Property(e => e.TxtApprenticeship4).HasColumnName("txtApprenticeship_4");

                entity.Property(e => e.TxtApprenticeship5).HasColumnName("txtApprenticeship_5");
            });

            modelBuilder.Entity<RegisterPyramidTeamsGameInfo>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_GameInfo");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsGameInfo).HasColumnName("AuditStatus_RegisterPyramidTeams_GameInfo");

                entity.Property(e => e.CreatorRegisterPyramidTeamsGameInfo).HasColumnName("Creator_RegisterPyramidTeams_GameInfo");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsGameInfo).HasColumnName("InstanceId_RegisterPyramidTeams_GameInfo");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsGameInfo).HasColumnName("InstanceSRId_RegisterPyramidTeams_GameInfo");

                entity.Property(e => e.IpRegisterPyramidTeamsGameInfo).HasColumnName("IP_RegisterPyramidTeams_GameInfo");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsGameInfo).HasColumnName("RegistrationDate_RegisterPyramidTeams_GameInfo");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsGameInfo).HasColumnName("RegistrationStatus_RegisterPyramidTeams_GameInfo");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsGameInfo).HasColumnName("RegistrationTime_RegisterPyramidTeams_GameInfo");
            });

            modelBuilder.Entity<RegisterPyramidTeamsGameInfoSub1>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_GameInfo_Sub1");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsGameInfoSub1).HasColumnName("AuditStatus_RegisterPyramidTeams_GameInfo_Sub1");

                entity.Property(e => e.CreatorRegisterPyramidTeamsGameInfoSub1).HasColumnName("Creator_RegisterPyramidTeams_GameInfo_Sub1");

                entity.Property(e => e.DdlGameInfo10).HasColumnName("ddlGameInfo_10");

                entity.Property(e => e.DdlGameInfo12).HasColumnName("ddlGameInfo_12");

                entity.Property(e => e.DdlGameInfo13).HasColumnName("ddlGameInfo_13");

                entity.Property(e => e.DdlGameInfo15).HasColumnName("ddlGameInfo_15");

                entity.Property(e => e.DdlGameInfo2).HasColumnName("ddlGameInfo2");

                entity.Property(e => e.DdlGameInfo3).HasColumnName("ddlGameInfo_3");

                entity.Property(e => e.DdlGameInfo4).HasColumnName("ddlGameInfo_4");

                entity.Property(e => e.DdlGameInfo5).HasColumnName("ddlGameInfo_5");

                entity.Property(e => e.DdlGameInfo7).HasColumnName("ddlGameInfo_7");

                entity.Property(e => e.DdlGameInfo8).HasColumnName("ddlGameInfo_8");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsGameInfoSub1).HasColumnName("InstanceId_RegisterPyramidTeams_GameInfo_Sub1");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsGameInfoSub1).HasColumnName("InstanceSRId_RegisterPyramidTeams_GameInfo_Sub1");

                entity.Property(e => e.IpRegisterPyramidTeamsGameInfoSub1).HasColumnName("IP_RegisterPyramidTeams_GameInfo_Sub1");

                entity.Property(e => e.PdateGameInfo2).HasColumnName("pdateGameInfo_2");

                entity.Property(e => e.PdateGameInfo2Gregorian)
                    .HasColumnName("pdateGameInfo_2_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsGameInfoSub1).HasColumnName("RegistrationDate_RegisterPyramidTeams_GameInfo_Sub1");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsGameInfoSub1).HasColumnName("RegistrationStatus_RegisterPyramidTeams_GameInfo_Sub1");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsGameInfoSub1).HasColumnName("RegistrationTime_RegisterPyramidTeams_GameInfo_Sub1");

                entity.Property(e => e.TxtGameInfo).HasColumnName("txtGameInfo");

                entity.Property(e => e.TxtGameInfo14).HasColumnName("txtGameInfo_14");

                entity.Property(e => e.TxtGameInfo17).HasColumnName("txtGameInfo_17");

                entity.Property(e => e.TxtGameInfo18).HasColumnName("txtGameInfo_18");

                entity.Property(e => e.TxtGameInfo19).HasColumnName("txtGameInfo_19");

                entity.Property(e => e.TxtGameInfo22).HasColumnName("txtGameInfo22");

                entity.Property(e => e.TxtGameInfo24).HasColumnName("txtGameInfo24");

                entity.Property(e => e.TxtGameInfo6).HasColumnName("txtGameInfo_6");

                entity.Property(e => e.UplGameInfo11).HasColumnName("uplGameInfo_11");

                entity.Property(e => e.UplGameInfo20).HasColumnName("uplGameInfo_20");

                entity.Property(e => e.UplGameInfo26).HasColumnName("uplGameInfo_26");

                entity.Property(e => e.UplGameInfo3).HasColumnName("uplGameInfo3");

                entity.Property(e => e.UplGameInfo9).HasColumnName("uplGameInfo_9");
            });

            modelBuilder.Entity<RegisterPyramidTeamsIdentityInformation>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_IdentityInformation");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsIdentityInformation).HasColumnName("AuditStatus_RegisterPyramidTeams_IdentityInformation");

                entity.Property(e => e.CkeLocationEstablishment).HasColumnName("ckeLocationEstablishment");

                entity.Property(e => e.CreatorRegisterPyramidTeamsIdentityInformation).HasColumnName("Creator_RegisterPyramidTeams_IdentityInformation");

                entity.Property(e => e.DdlIdentityInformation1).HasColumnName("ddlIdentityInformation1");

                entity.Property(e => e.DdlIdentityInformation16).HasColumnName("ddlIdentityInformation16");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsIdentityInformation).HasColumnName("InstanceId_RegisterPyramidTeams_IdentityInformation");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsIdentityInformation).HasColumnName("InstanceSRId_RegisterPyramidTeams_IdentityInformation");

                entity.Property(e => e.IpRegisterPyramidTeamsIdentityInformation).HasColumnName("IP_RegisterPyramidTeams_IdentityInformation");

                entity.Property(e => e.MailEAddress).HasColumnName("mailE_Address");

                entity.Property(e => e.MailEMail).HasColumnName("mailE_Mail");

                entity.Property(e => e.NumAmountForeignIncome).HasColumnName("numAmountForeignIncome");

                entity.Property(e => e.NumContactNumber).HasColumnName("numContactNumber");

                entity.Property(e => e.NumInternalRevenue).HasColumnName("numInternalRevenue");

                entity.Property(e => e.NumPhoneNumber).HasColumnName("numPhoneNumber");

                entity.Property(e => e.NumTeamMembers).HasColumnName("numTeamMembers");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsIdentityInformation).HasColumnName("RegistrationDate_RegisterPyramidTeams_IdentityInformation");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsIdentityInformation).HasColumnName("RegistrationStatus_RegisterPyramidTeams_IdentityInformation");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsIdentityInformation).HasColumnName("RegistrationTime_RegisterPyramidTeams_IdentityInformation");

                entity.Property(e => e.TxtIdentityInformation2).HasColumnName("txtIdentityInformation2");

                entity.Property(e => e.TxtNameSurname).HasColumnName("txtNameSurname");

                entity.Property(e => e.TxtSiteAddress).HasColumnName("txtSiteAddress");

                entity.Property(e => e.TxtTeamName).HasColumnName("txtTeamName");

                entity.Property(e => e.UplIdentityInformation).HasColumnName("uplIdentityInformation");

                entity.Property(e => e.UplIdentityInformation3).HasColumnName("uplIdentityInformation3");

                entity.Property(e => e.UplIdentityInformation4).HasColumnName("uplIdentityInformation4");

                entity.Property(e => e.UplLoadingLogo).HasColumnName("uplLoadingLogo");
            });

            modelBuilder.Entity<RegisterPyramidTeamsPreRegistration>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_PreRegistration");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsPreRegistration).HasColumnName("AuditStatus_RegisterPyramidTeams_PreRegistration");

                entity.Property(e => e.CreatorRegisterPyramidTeamsPreRegistration).HasColumnName("Creator_RegisterPyramidTeams_PreRegistration");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsPreRegistration).HasColumnName("InstanceId_RegisterPyramidTeams_PreRegistration");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsPreRegistration).HasColumnName("InstanceSRId_RegisterPyramidTeams_PreRegistration");

                entity.Property(e => e.IpRegisterPyramidTeamsPreRegistration).HasColumnName("IP_RegisterPyramidTeams_PreRegistration");

                entity.Property(e => e.MailEAddress).HasColumnName("mailE_Address");

                entity.Property(e => e.NumNationalCode).HasColumnName("numNationalCode");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsPreRegistration).HasColumnName("RegistrationDate_RegisterPyramidTeams_PreRegistration");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsPreRegistration).HasColumnName("RegistrationStatus_RegisterPyramidTeams_PreRegistration");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsPreRegistration).HasColumnName("RegistrationTime_RegisterPyramidTeams_PreRegistration");

                entity.Property(e => e.TxtLastName).HasColumnName("txtLastName");

                entity.Property(e => e.TxtName).HasColumnName("txtName");

                entity.Property(e => e.TxtPassword).HasColumnName("txtPassword");

                entity.Property(e => e.TxtRpassword).HasColumnName("txtRPassword");
            });

            modelBuilder.Entity<RegisterPyramidTeamsRecordAllDocuments>(entity =>
            {
                entity.ToTable("RegisterPyramidTeams_RecordAllDocuments");

                entity.Property(e => e.AuditStatusRegisterPyramidTeamsRecordAllDocuments).HasColumnName("AuditStatus_RegisterPyramidTeams_RecordAllDocuments");

                entity.Property(e => e.CkeRecordAllDocuments2).HasColumnName("ckeRecordAllDocuments_2");

                entity.Property(e => e.CreatorRegisterPyramidTeamsRecordAllDocuments).HasColumnName("Creator_RegisterPyramidTeams_RecordAllDocuments");

                entity.Property(e => e.DdlRecordAllDocuments1).HasColumnName("ddlRecordAllDocuments_1");

                entity.Property(e => e.InstanceIdRegisterPyramidTeamsRecordAllDocuments).HasColumnName("InstanceId_RegisterPyramidTeams_RecordAllDocuments");

                entity.Property(e => e.InstanceSridRegisterPyramidTeamsRecordAllDocuments).HasColumnName("InstanceSRId_RegisterPyramidTeams_RecordAllDocuments");

                entity.Property(e => e.IpRegisterPyramidTeamsRecordAllDocuments).HasColumnName("IP_RegisterPyramidTeams_RecordAllDocuments");

                entity.Property(e => e.RegistrationDateRegisterPyramidTeamsRecordAllDocuments).HasColumnName("RegistrationDate_RegisterPyramidTeams_RecordAllDocuments");

                entity.Property(e => e.RegistrationStatusRegisterPyramidTeamsRecordAllDocuments).HasColumnName("RegistrationStatus_RegisterPyramidTeams_RecordAllDocuments");

                entity.Property(e => e.RegistrationTimeRegisterPyramidTeamsRecordAllDocuments).HasColumnName("RegistrationTime_RegisterPyramidTeams_RecordAllDocuments");
            });

            modelBuilder.Entity<RegisterTicket>(entity =>
            {
                entity.ToTable("registerTicket");

                entity.Property(e => e.AuditStatusRegisterTicket).HasColumnName("AuditStatus_registerTicket");

                entity.Property(e => e.CreatorRegisterTicket).HasColumnName("Creator_registerTicket");

                entity.Property(e => e.DdlCategory).HasColumnName("ddl_category");

                entity.Property(e => e.FileUpl).HasColumnName("file_upl");

                entity.Property(e => e.InstanceIdRegisterTicket).HasColumnName("InstanceId_registerTicket");

                entity.Property(e => e.InstanceSridRegisterTicket).HasColumnName("InstanceSRId_registerTicket");

                entity.Property(e => e.IpRegisterTicket).HasColumnName("IP_registerTicket");

                entity.Property(e => e.RegistrationDateRegisterTicket).HasColumnName("RegistrationDate_registerTicket");

                entity.Property(e => e.RegistrationStatusRegisterTicket).HasColumnName("RegistrationStatus_registerTicket");

                entity.Property(e => e.RegistrationTimeRegisterTicket).HasColumnName("RegistrationTime_registerTicket");

                entity.Property(e => e.TxtSharh).HasColumnName("txt_sharh");

                entity.Property(e => e.TxtSubject).HasColumnName("txt_subject");
            });

            modelBuilder.Entity<RegistrationForeignContractForm1>(entity =>
            {
                entity.ToTable("RegistrationForeignContract_Form1");

                entity.Property(e => e.AuditStatusRegistrationForeignContractForm1).HasColumnName("AuditStatus_RegistrationForeignContract_Form1");

                entity.Property(e => e.CreatorRegistrationForeignContractForm1).HasColumnName("Creator_RegistrationForeignContract_Form1");

                entity.Property(e => e.InstanceIdRegistrationForeignContractForm1).HasColumnName("InstanceId_RegistrationForeignContract_Form1");

                entity.Property(e => e.InstanceSridRegistrationForeignContractForm1).HasColumnName("InstanceSRId_RegistrationForeignContract_Form1");

                entity.Property(e => e.IpRegistrationForeignContractForm1).HasColumnName("IP_RegistrationForeignContract_Form1");

                entity.Property(e => e.PdateContractDeliveryDate).HasColumnName("pdateContractDeliveryDate");

                entity.Property(e => e.PdateContractDeliveryDateGregorian)
                    .HasColumnName("pdateContractDeliveryDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateRegistrationForeignContractForm1).HasColumnName("RegistrationDate_RegistrationForeignContract_Form1");

                entity.Property(e => e.RegistrationStatusRegistrationForeignContractForm1).HasColumnName("RegistrationStatus_RegistrationForeignContract_Form1");

                entity.Property(e => e.RegistrationTimeRegistrationForeignContractForm1).HasColumnName("RegistrationTime_RegistrationForeignContract_Form1");

                entity.Property(e => e.UplContractImage).HasColumnName("uplContractImage");
            });

            modelBuilder.Entity<RegistrationForeignContractForm2>(entity =>
            {
                entity.ToTable("RegistrationForeignContract_Form2");

                entity.Property(e => e.AuditStatusRegistrationForeignContractForm2).HasColumnName("AuditStatus_RegistrationForeignContract_Form2");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorRegistrationForeignContractForm2).HasColumnName("Creator_RegistrationForeignContract_Form2");

                entity.Property(e => e.InstanceIdRegistrationForeignContractForm2).HasColumnName("InstanceId_RegistrationForeignContract_Form2");

                entity.Property(e => e.InstanceSridRegistrationForeignContractForm2).HasColumnName("InstanceSRId_RegistrationForeignContract_Form2");

                entity.Property(e => e.IpRegistrationForeignContractForm2).HasColumnName("IP_RegistrationForeignContract_Form2");

                entity.Property(e => e.PdateGetSecretariatContract).HasColumnName("pdateGetSecretariatContract");

                entity.Property(e => e.PdateGetSecretariatContractGregorian)
                    .HasColumnName("pdateGetSecretariatContract_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateRegistrationForeignContractForm2).HasColumnName("RegistrationDate_RegistrationForeignContract_Form2");

                entity.Property(e => e.RegistrationStatusRegistrationForeignContractForm2).HasColumnName("RegistrationStatus_RegistrationForeignContract_Form2");

                entity.Property(e => e.RegistrationTimeRegistrationForeignContractForm2).HasColumnName("RegistrationTime_RegistrationForeignContract_Form2");

                entity.Property(e => e.UplContractImage).HasColumnName("uplContractImage");
            });

            modelBuilder.Entity<RegistrationForeignContractForm3>(entity =>
            {
                entity.ToTable("RegistrationForeignContract_Form3");

                entity.Property(e => e.AuditStatusRegistrationForeignContractForm3).HasColumnName("AuditStatus_RegistrationForeignContract_Form3");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorRegistrationForeignContractForm3).HasColumnName("Creator_RegistrationForeignContract_Form3");

                entity.Property(e => e.InstanceIdRegistrationForeignContractForm3).HasColumnName("InstanceId_RegistrationForeignContract_Form3");

                entity.Property(e => e.InstanceSridRegistrationForeignContractForm3).HasColumnName("InstanceSRId_RegistrationForeignContract_Form3");

                entity.Property(e => e.IpRegistrationForeignContractForm3).HasColumnName("IP_RegistrationForeignContract_Form3");

                entity.Property(e => e.NumAmountInstallment).HasColumnName("numAmountInstallment");

                entity.Property(e => e.NumContractNumber).HasColumnName("numContractNumber");

                entity.Property(e => e.NumNumberInstallments).HasColumnName("numNumberInstallments");

                entity.Property(e => e.NumTermContract).HasColumnName("numTermContract");

                entity.Property(e => e.NumTotalAmountContract).HasColumnName("numTotalAmountContract");

                entity.Property(e => e.PdateDateOfContract).HasColumnName("pdateDateOfContract");

                entity.Property(e => e.PdateDateOfContractGregorian)
                    .HasColumnName("pdateDateOfContract_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.PdateDeliveryDateRegistration).HasColumnName("pdateDeliveryDateRegistration");

                entity.Property(e => e.PdateDeliveryDateRegistrationGregorian)
                    .HasColumnName("pdateDeliveryDateRegistration_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateRegistrationForeignContractForm3).HasColumnName("RegistrationDate_RegistrationForeignContract_Form3");

                entity.Property(e => e.RegistrationStatusRegistrationForeignContractForm3).HasColumnName("RegistrationStatus_RegistrationForeignContract_Form3");

                entity.Property(e => e.RegistrationTimeRegistrationForeignContractForm3).HasColumnName("RegistrationTime_RegistrationForeignContract_Form3");

                entity.Property(e => e.TxtContractObserver).HasColumnName("txtContractObserver");

                entity.Property(e => e.TxtContractSubject).HasColumnName("txtContractSubject");

                entity.Property(e => e.TxtPartyContract).HasColumnName("txtPartyContract");

                entity.Property(e => e.UplAttachedPicture).HasColumnName("uplAttachedPicture");

                entity.Property(e => e.UplContractImage).HasColumnName("uplContractImage");
            });

            modelBuilder.Entity<RegistrationForeignContractForm4>(entity =>
            {
                entity.ToTable("RegistrationForeignContract_Form4");

                entity.Property(e => e.AuditStatusRegistrationForeignContractForm4).HasColumnName("AuditStatus_RegistrationForeignContract_Form4");

                entity.Property(e => e.AxtEditingItems).HasColumnName("axtEditingItems");

                entity.Property(e => e.CreatorRegistrationForeignContractForm4).HasColumnName("Creator_RegistrationForeignContract_Form4");

                entity.Property(e => e.DdlConfirmationInformation).HasColumnName("ddlConfirmationInformation");

                entity.Property(e => e.InstanceIdRegistrationForeignContractForm4).HasColumnName("InstanceId_RegistrationForeignContract_Form4");

                entity.Property(e => e.InstanceSridRegistrationForeignContractForm4).HasColumnName("InstanceSRId_RegistrationForeignContract_Form4");

                entity.Property(e => e.IpRegistrationForeignContractForm4).HasColumnName("IP_RegistrationForeignContract_Form4");

                entity.Property(e => e.RegistrationDateRegistrationForeignContractForm4).HasColumnName("RegistrationDate_RegistrationForeignContract_Form4");

                entity.Property(e => e.RegistrationStatusRegistrationForeignContractForm4).HasColumnName("RegistrationStatus_RegistrationForeignContract_Form4");

                entity.Property(e => e.RegistrationTimeRegistrationForeignContractForm4).HasColumnName("RegistrationTime_RegistrationForeignContract_Form4");
            });

            modelBuilder.Entity<RelationAddLevel2Test201808013>(entity =>
            {
                entity.ToTable("Relation_AddLevel2_Test_20180801_3", "ipdbuser");

                entity.Property(e => e.AddLevel2Id).HasColumnName("AddLevel2_Id");

                entity.Property(e => e.Test201808013Id).HasColumnName("Test_20180801_3_Id");

                entity.HasOne(d => d.AddLevel2)
                    .WithMany(p => p.RelationAddLevel2Test201808013)
                    .HasForeignKey(d => d.AddLevel2Id)
                    .HasConstraintName("FK__Relation___AddLe__466C5FD2");

                entity.HasOne(d => d.Test201808013)
                    .WithMany(p => p.RelationAddLevel2Test201808013)
                    .HasForeignKey(d => d.Test201808013Id)
                    .HasConstraintName("FK__Relation___Test___4760840B");
            });

            modelBuilder.Entity<RelationAddVersionToGame>(entity =>
            {
                entity.ToTable("Relation__addVersionToGame");

                entity.Property(e => e.AddVersionToGameId).HasColumnName("addVersionToGame_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationAnalyzerScoreFormShowScoreAverage>(entity =>
            {
                entity.ToTable("Relation_AnalyzerScoreForm_showScoreAverage");

                entity.Property(e => e.AnalyzerScoreFormId).HasColumnName("AnalyzerScoreForm_Id");

                entity.Property(e => e.ShowScoreAverageId).HasColumnName("showScoreAverage_Id");
            });

            modelBuilder.Entity<RelationAnotherRatingsGamerAndStoryTellerChoose>(entity =>
            {
                entity.ToTable("Relation_AnotherRatings_GamerAndStoryTellerChoose");

                entity.Property(e => e.AnotherRatingsId).HasColumnName("AnotherRatings_Id");

                entity.Property(e => e.GamerAndStoryTellerChooseId).HasColumnName("GamerAndStoryTellerChoose_Id");
            });

            modelBuilder.Entity<RelationApplyingForGoodsForm1>(entity =>
            {
                entity.ToTable("Relation__ApplyingForGoods_Form1");

                entity.Property(e => e.ApplyingForGoodsForm1Id).HasColumnName("ApplyingForGoods_Form1_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationAttractingTestablePersonnelFormE>(entity =>
            {
                entity.ToTable("Relation__AttractingTestablePersonnel_FormE");

                entity.Property(e => e.AttractingTestablePersonnelFormEId).HasColumnName("AttractingTestablePersonnel_FormE_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationAuctionItems>(entity =>
            {
                entity.ToTable("Relation__AuctionItems");

                entity.Property(e => e.AuctionItemsId).HasColumnName("AuctionItems_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationAuctionItems2>(entity =>
            {
                entity.ToTable("Relation__AuctionItems2");

                entity.Property(e => e.AuctionItems2Id).HasColumnName("AuctionItems2_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationAuctionItemsEditAuctionItems>(entity =>
            {
                entity.ToTable("Relation_AuctionItems_EditAuctionItems");

                entity.Property(e => e.AuctionItemsId).HasColumnName("AuctionItems_Id");

                entity.Property(e => e.EditAuctionItemsId).HasColumnName("EditAuctionItems_Id");
            });

            modelBuilder.Entity<RelationContractPaymentContractSealRequest>(entity =>
            {
                entity.ToTable("Relation_ContractPayment_ContractSealRequest");

                entity.Property(e => e.ContractPaymentId).HasColumnName("ContractPayment_Id");

                entity.Property(e => e.ContractSealRequestId).HasColumnName("ContractSealRequest_Id");
            });

            modelBuilder.Entity<RelationConvergentSupportiveStructureApplyAwardAndHonorsSub1ConvergentSupportiveStructureApplyAwardAndHonors>(entity =>
            {
                entity.ToTable("Relation_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1_ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.ConvergentSupportiveStructureApplyAwardAndHonorsId).HasColumnName("ConvergentSupportiveStructure_ApplyAwardAndHonors_Id");

                entity.Property(e => e.ConvergentSupportiveStructureApplyAwardAndHonorsSub1Id).HasColumnName("ConvergentSupportiveStructure_ApplyAwardAndHonors_sub1_Id");
            });

            modelBuilder.Entity<RelationConvergentSupportiveStructureApplyAwardAndHonorsSub2ConvergentSupportiveStructureApplyAwardAndHonors>(entity =>
            {
                entity.ToTable("Relation_ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2_ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.ConvergentSupportiveStructureApplyAwardAndHonorsId).HasColumnName("ConvergentSupportiveStructure_ApplyAwardAndHonors_Id");

                entity.Property(e => e.ConvergentSupportiveStructureApplyAwardAndHonorsSub2Id).HasColumnName("ConvergentSupportiveStructure_ApplyAwardAndHonors_sub2_Id");
            });

            modelBuilder.Entity<RelationConvergentSupportiveStructureApplyAwardAndHonorsSub3ConvergentSupportiveStructureApplyAwardAndHonors>(entity =>
            {
                entity.ToTable("Relation_ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3_ConvergentSupportiveStructure_ApplyAwardAndHonors");

                entity.Property(e => e.ConvergentSupportiveStructureApplyAwardAndHonorsId).HasColumnName("ConvergentSupportiveStructure_ApplyAwardAndHonors_Id");

                entity.Property(e => e.ConvergentSupportiveStructureApplyAwardAndHonorsSub3Id).HasColumnName("ConvergentSupportiveStructure__ApplyAwardAndHonors_sub3_Id");
            });

            modelBuilder.Entity<RelationConvergentSupportiveStructureCompleteGameInfoSubFormConvergentSupportiveStructureCompleteGameInfo>(entity =>
            {
                entity.ToTable("Relation_ConvergentSupportiveStructure_CompleteGameInfo_SubForm_ConvergentSupportiveStructure_CompleteGameInfo");

                entity.Property(e => e.ConvergentSupportiveStructureCompleteGameInfoId).HasColumnName("ConvergentSupportiveStructure_CompleteGameInfo_Id");

                entity.Property(e => e.ConvergentSupportiveStructureCompleteGameInfoSubFormId).HasColumnName("ConvergentSupportiveStructure_CompleteGameInfo_SubForm_Id");
            });

            modelBuilder.Entity<RelationConvergentSupportiveStructureTeamsApplyingForAwardsSub1ConvergentSupportiveStructureTeamsApplyingForAwards>(entity =>
            {
                entity.ToTable("Relation_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1_ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.ConvergentSupportiveStructureTeamsApplyingForAwardsId).HasColumnName("ConvergentSupportiveStructureTeams_ApplyingForAwards_Id");

                entity.Property(e => e.ConvergentSupportiveStructureTeamsApplyingForAwardsSub1Id).HasColumnName("ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub1_Id");
            });

            modelBuilder.Entity<RelationConvergentSupportiveStructureTeamsApplyingForAwardsSub2ConvergentSupportiveStructureTeamsApplyingForAwards>(entity =>
            {
                entity.ToTable("Relation_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2_ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.ConvergentSupportiveStructureTeamsApplyingForAwardsId).HasColumnName("ConvergentSupportiveStructureTeams_ApplyingForAwards_Id");

                entity.Property(e => e.ConvergentSupportiveStructureTeamsApplyingForAwardsSub2Id).HasColumnName("ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub2_Id");
            });

            modelBuilder.Entity<RelationConvergentSupportiveStructureTeamsApplyingForAwardsSub3ConvergentSupportiveStructureTeamsApplyingForAwards>(entity =>
            {
                entity.ToTable("Relation_ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3_ConvergentSupportiveStructureTeams_ApplyingForAwards");

                entity.Property(e => e.ConvergentSupportiveStructureTeamsApplyingForAwardsId).HasColumnName("ConvergentSupportiveStructureTeams_ApplyingForAwards_Id");

                entity.Property(e => e.ConvergentSupportiveStructureTeamsApplyingForAwardsSub3Id).HasColumnName("ConvergentSupportiveStructureTeams_ApplyingForAwards_Sub3_Id");
            });

            modelBuilder.Entity<RelationConvergentSupportiveStructureTeamsFurtherInformationSubConvergentSupportiveStructureTeamsFurtherInformation>(entity =>
            {
                entity.ToTable("Relation_ConvergentSupportiveStructureTeams_FurtherInformation_Sub_ConvergentSupportiveStructureTeams_FurtherInformation");

                entity.Property(e => e.ConvergentSupportiveStructureTeamsFurtherInformationId).HasColumnName("ConvergentSupportiveStructureTeams_FurtherInformation_Id");

                entity.Property(e => e.ConvergentSupportiveStructureTeamsFurtherInformationSubId).HasColumnName("ConvergentSupportiveStructureTeams_FurtherInformation_Sub_Id");
            });

            modelBuilder.Entity<RelationConvergentSupportiveStructureTeamsGameInfoSub1ConvergentSupportiveStructureTeamsGameInfo>(entity =>
            {
                entity.ToTable("Relation_ConvergentSupportiveStructureTeams_GameInfo_Sub1_ConvergentSupportiveStructureTeams_GameInfo");

                entity.Property(e => e.ConvergentSupportiveStructureTeamsGameInfoId).HasColumnName("ConvergentSupportiveStructureTeams_GameInfo_Id");

                entity.Property(e => e.ConvergentSupportiveStructureTeamsGameInfoSub1Id).HasColumnName("ConvergentSupportiveStructureTeams_GameInfo_Sub1_Id");
            });

            modelBuilder.Entity<RelationDeclarationHumanResourcesForm1>(entity =>
            {
                entity.ToTable("Relation__DeclarationHumanResources_Form1");

                entity.Property(e => e.DeclarationHumanResourcesForm1Id).HasColumnName("DeclarationHumanResources_Form1_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationDisseminationInitialVoting>(entity =>
            {
                entity.ToTable("Relation__Dissemination_InitialVoting");

                entity.Property(e => e.DisseminationInitialVotingId).HasColumnName("Dissemination_InitialVoting_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationDisseminationInitialVotingSubForm>(entity =>
            {
                entity.ToTable("Relation__Dissemination_InitialVoting_SubForm");

                entity.Property(e => e.DisseminationInitialVotingSubFormId).HasColumnName("Dissemination_InitialVoting_SubForm_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationDisseminationListItemsCourse>(entity =>
            {
                entity.ToTable("Relation__Dissemination_ListItemsCourse");

                entity.Property(e => e.DisseminationListItemsCourseId).HasColumnName("Dissemination_ListItemsCourse_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationDisseminationListItemsCourseSubForm>(entity =>
            {
                entity.ToTable("Relation__Dissemination_ListItemsCourse_SubForm");

                entity.Property(e => e.DisseminationListItemsCourseSubFormId).HasColumnName("Dissemination_ListItemsCourse_SubForm_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationDisseminationPublishersAuctions>(entity =>
            {
                entity.ToTable("Relation__Dissemination_PublishersAuctions");

                entity.Property(e => e.DisseminationPublishersAuctionsId).HasColumnName("Dissemination_PublishersAuctions_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationDisseminationPublishersVotes>(entity =>
            {
                entity.ToTable("Relation__Dissemination_PublishersVotes");

                entity.Property(e => e.DisseminationPublishersVotesId).HasColumnName("Dissemination_PublishersVotes_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationEditAuctionItems>(entity =>
            {
                entity.ToTable("Relation__EditAuctionItems");

                entity.Property(e => e.EditAuctionItemsId).HasColumnName("EditAuctionItems_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationEditGameChooseEditingGame>(entity =>
            {
                entity.ToTable("Relation__EditGame_ChooseEditingGame");

                entity.Property(e => e.EditGameChooseEditingGameId).HasColumnName("EditGame_ChooseEditingGame_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationEditGameChooseNameGameEditGameChooseEditingGame>(entity =>
            {
                entity.ToTable("Relation_EditGame_ChooseNameGame_EditGame_ChooseEditingGame");

                entity.Property(e => e.EditGameChooseEditingGameId).HasColumnName("EditGame_ChooseEditingGame_Id");

                entity.Property(e => e.EditGameChooseNameGameId).HasColumnName("EditGame_ChooseNameGame_Id");
            });

            modelBuilder.Entity<RelationEditGameGetEditingDocumentation>(entity =>
            {
                entity.ToTable("Relation__EditGame_GetEditingDocumentation");

                entity.Property(e => e.EditGameGetEditingDocumentationId).HasColumnName("EditGame_GetEditingDocumentation_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationEditGamePublisherReview>(entity =>
            {
                entity.ToTable("Relation__EditGame_PublisherReview");

                entity.Property(e => e.EditGamePublisherReviewId).HasColumnName("EditGame_PublisherReview_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationEditItemUpload>(entity =>
            {
                entity.ToTable("Relation__editItemUpload");

                entity.Property(e => e.EditItemUploadId).HasColumnName("editItemUpload_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationEditorRatingRegisterRatingEditor>(entity =>
            {
                entity.ToTable("Relation__EditorRating_RegisterRatingEditor");

                entity.Property(e => e.EditorRatingRegisterRatingEditorId).HasColumnName("EditorRating_RegisterRatingEditor_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationExclusiveOriginalGamesRequestPublisher>(entity =>
            {
                entity.ToTable("Relation__ExclusiveOriginalGames_RequestPublisher");

                entity.Property(e => e.ExclusiveOriginalGamesRequestPublisherId).HasColumnName("ExclusiveOriginalGames_RequestPublisher_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationExitPersonnelForm6>(entity =>
            {
                entity.ToTable("Relation__ExitPersonnel_Form6");

                entity.Property(e => e.ExitPersonnelForm6Id).HasColumnName("ExitPersonnel_Form6_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationFrmpictogram2WRadebandiSazmani>(entity =>
            {
                entity.ToTable("Relation_frmpictogram2_wRadebandiSazmani");

                entity.Property(e => e.Frmpictogram2Id).HasColumnName("frmpictogram2_Id");

                entity.Property(e => e.WRadebandiSazmaniId).HasColumnName("wRadebandiSazmani_Id");
            });

            modelBuilder.Entity<RelationFrmpictogramhaWRadebandiSazmani>(entity =>
            {
                entity.ToTable("Relation_frmpictogramha_wRadebandiSazmani");

                entity.Property(e => e.FrmpictogramhaId).HasColumnName("frmpictogramha_Id");

                entity.Property(e => e.WRadebandiSazmaniId).HasColumnName("wRadebandiSazmani_Id");
            });

            modelBuilder.Entity<RelationGameMarketListSelectMyBosses>(entity =>
            {
                entity.ToTable("Relation_GameMarketList_SelectMyBosses");

                entity.Property(e => e.GameMarketListId).HasColumnName("GameMarketList_Id");

                entity.Property(e => e.SelectMyBossesId).HasColumnName("SelectMyBosses_Id");

                entity.HasOne(d => d.GameMarketList)
                    .WithMany(p => p.RelationGameMarketListSelectMyBosses)
                    .HasForeignKey(d => d.GameMarketListId)
                    .HasConstraintName("FK__GameMarke__GameM__2EFAF1E2");

                entity.HasOne(d => d.SelectMyBosses)
                    .WithMany(p => p.RelationGameMarketListSelectMyBosses)
                    .HasForeignKey(d => d.SelectMyBossesId)
                    .HasConstraintName("FK__GameMarke__Selec__2FEF161B");
            });

            modelBuilder.Entity<RelationGamersFullGameMovieGamersFullMovie2>(entity =>
            {
                entity.ToTable("Relation_gamersFullGameMovie_GamersFullMovie2");

                entity.Property(e => e.GamersFullGameMovieId).HasColumnName("gamersFullGameMovie_Id");

                entity.Property(e => e.GamersFullMovie2Id).HasColumnName("GamersFullMovie2_Id");
            });

            modelBuilder.Entity<RelationGreenHologramApplyItems>(entity =>
            {
                entity.ToTable("Relation__GreenHologram_ApplyItems");

                entity.Property(e => e.GreenHologramApplyItemsId).HasColumnName("GreenHologram_ApplyItems_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationGreenHologramApplyItemsSubFormGreenHologramApplyItems>(entity =>
            {
                entity.ToTable("Relation_GreenHologram_ApplyItems_SubForm_GreenHologram_ApplyItems");

                entity.Property(e => e.GreenHologramApplyItemsId).HasColumnName("GreenHologram_ApplyItems_Id");

                entity.Property(e => e.GreenHologramApplyItemsSubFormId).HasColumnName("GreenHologram_ApplyItems_SubForm_Id");
            });

            modelBuilder.Entity<RelationGreenHologramApplyItemsSubFormGreenHologramRequestReview>(entity =>
            {
                entity.ToTable("Relation_GreenHologram_ApplyItems_SubForm_GreenHologram_RequestReview");

                entity.Property(e => e.GreenHologramApplyItemsSubFormId).HasColumnName("GreenHologram_ApplyItems_SubForm_Id");

                entity.Property(e => e.GreenHologramRequestReviewId).HasColumnName("GreenHologram_RequestReview_Id");
            });

            modelBuilder.Entity<RelationGreenHologramAttachmentDocumentation>(entity =>
            {
                entity.ToTable("Relation__GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.GreenHologramAttachmentDocumentationId).HasColumnName("GreenHologram_AttachmentDocumentation_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationGreenHologramDeclareFee>(entity =>
            {
                entity.ToTable("Relation__GreenHologram_DeclareFee");

                entity.Property(e => e.GreenHologramDeclareFeeId).HasColumnName("GreenHologram_DeclareFee_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationGreenHologramRequestReview>(entity =>
            {
                entity.ToTable("Relation__GreenHologram_RequestReview");

                entity.Property(e => e.GreenHologramRequestReviewId).HasColumnName("GreenHologram_RequestReview_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationGreenHologramReviewFinancialRequest>(entity =>
            {
                entity.ToTable("Relation__GreenHologram_ReviewFinancialRequest");

                entity.Property(e => e.GreenHologramReviewFinancialRequestId).HasColumnName("GreenHologram_ReviewFinancialRequest_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationGreenHologramReviewFinancialRequestGreenHologramDeclareFee>(entity =>
            {
                entity.ToTable("Relation_GreenHologram_ReviewFinancialRequest_GreenHologram_DeclareFee");

                entity.Property(e => e.GreenHologramDeclareFeeId).HasColumnName("GreenHologram_DeclareFee_Id");

                entity.Property(e => e.GreenHologramReviewFinancialRequestId).HasColumnName("GreenHologram_ReviewFinancialRequest_Id");
            });

            modelBuilder.Entity<RelationGreenHologramUploadDocumentation>(entity =>
            {
                entity.ToTable("Relation__GreenHologram_UploadDocumentation");

                entity.Property(e => e.GreenHologramUploadDocumentationId).HasColumnName("GreenHologram_UploadDocumentation_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationHoldingDisseminationMeetingDissemination>(entity =>
            {
                entity.ToTable("Relation__HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.HoldingDisseminationMeetingDisseminationId).HasColumnName("HoldingDissemination_MeetingDissemination_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationHoldingDisseminationRecordResults>(entity =>
            {
                entity.ToTable("Relation__HoldingDissemination_RecordResults");

                entity.Property(e => e.HoldingDisseminationRecordResultsId).HasColumnName("HoldingDissemination_RecordResults_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationHoldingDisseminationRecordResultsSubFormHoldingDisseminationRecordResults>(entity =>
            {
                entity.ToTable("Relation_HoldingDissemination_RecordResults_SubForm_HoldingDissemination_RecordResults");

                entity.Property(e => e.HoldingDisseminationRecordResultsId).HasColumnName("HoldingDissemination_RecordResults_Id");

                entity.Property(e => e.HoldingDisseminationRecordResultsSubFormId).HasColumnName("HoldingDissemination_RecordResults_SubForm_Id");
            });

            modelBuilder.Entity<RelationHologramAttachmentHologramAttachmentRequest>(entity =>
            {
                entity.ToTable("Relation__HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.HologramAttachmentHologramAttachmentRequestId).HasColumnName("HologramAttachment_HologramAttachmentRequest_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationHologramAttachmentHologramAttachmentRequestSubForm>(entity =>
            {
                entity.ToTable("Relation__HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.HologramAttachmentHologramAttachmentRequestSubFormId).HasColumnName("HologramAttachment_HologramAttachmentRequest_SubForm_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationHologramAttachmentHologramNumber>(entity =>
            {
                entity.ToTable("Relation__HologramAttachment_HologramNumber");

                entity.Property(e => e.HologramAttachmentHologramNumberId).HasColumnName("HologramAttachment_HologramNumber_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationHologramAttachmentHologramNumberSubForm>(entity =>
            {
                entity.ToTable("Relation__HologramAttachment_HologramNumber_SubForm");

                entity.Property(e => e.HologramAttachmentHologramNumberSubFormId).HasColumnName("HologramAttachment_HologramNumber_SubForm_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationHologramAttachmentInstallationList>(entity =>
            {
                entity.ToTable("Relation__HologramAttachment_InstallationList");

                entity.Property(e => e.HologramAttachmentInstallationListId).HasColumnName("HologramAttachment_InstallationList_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationHologramAttachmentInstallationListSubForm>(entity =>
            {
                entity.ToTable("Relation__HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.HologramAttachmentInstallationListSubFormId).HasColumnName("HologramAttachment_InstallationList_SubForm_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationHologramTransferToOldGamesApplyAndSelectGame>(entity =>
            {
                entity.ToTable("Relation__HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.HologramTransferToOldGamesApplyAndSelectGameId).HasColumnName("HologramTransferToOldGames_ApplyAndSelectGame_Id");

                entity.Property(e => e.Id1).HasColumnName("_Id");
            });

            modelBuilder.Entity<RelationHologramTransferToOldGamesApplyAndSelectGameSubFormHologramTransferToOldGamesApplyAndSelectGame>(entity =>
            {
                entity.ToTable("Relation_HologramTransferToOldGames_ApplyAndSelectGame_SubForm_HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.HologramTransferToOldGamesApplyAndSelectGameId).HasColumnName("HologramTransferToOldGames_ApplyAndSelectGame_Id");

                entity.Property(e => e.HologramTransferToOldGamesApplyAndSelectGameSubFormId).HasColumnName("HologramTransferToOldGames_ApplyAndSelectGame_SubForm_Id");
            });

            modelBuilder.Entity<RelationIidSubFormVgPrimaryInsertion>(entity =>
            {
                entity.ToTable("Relation_IID_SubForm_VG_PrimaryInsertion");

                entity.Property(e => e.IidSubFormId).HasColumnName("IID_SubForm_Id");

                entity.Property(e => e.VgPrimaryInsertionId).HasColumnName("VG_PrimaryInsertion_Id");
            });

            modelBuilder.Entity<RelationIssueLicensingForPublicOldGamesRequestIssuanceLicense>(entity =>
            {
                entity.ToTable("Relation__IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.IssueLicensingForPublicOldGamesRequestIssuanceLicenseId).HasColumnName("IssueLicensingForPublicOldGames_RequestIssuanceLicense_Id");
            });

            modelBuilder.Entity<RelationLegalPersonRegistrationApplyAwardAndHonorsSub1LegalPersonRegistrationApplyAwardAndHonors>(entity =>
            {
                entity.ToTable("Relation_LegalPersonRegistration_ApplyAwardAndHonors_sub1_LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.LegalPersonRegistrationApplyAwardAndHonorsId).HasColumnName("LegalPersonRegistration_ApplyAwardAndHonors_Id");

                entity.Property(e => e.LegalPersonRegistrationApplyAwardAndHonorsSub1Id).HasColumnName("LegalPersonRegistration_ApplyAwardAndHonors_sub1_Id");
            });

            modelBuilder.Entity<RelationLegalPersonRegistrationApplyAwardAndHonorsSub2LegalPersonRegistrationApplyAwardAndHonors>(entity =>
            {
                entity.ToTable("Relation_LegalPersonRegistration_ApplyAwardAndHonors_sub2_LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.LegalPersonRegistrationApplyAwardAndHonorsId).HasColumnName("LegalPersonRegistration_ApplyAwardAndHonors_Id");

                entity.Property(e => e.LegalPersonRegistrationApplyAwardAndHonorsSub2Id).HasColumnName("LegalPersonRegistration_ApplyAwardAndHonors_sub2_Id");
            });

            modelBuilder.Entity<RelationLegalPersonRegistrationApplyAwardAndHonorsSub3LegalPersonRegistrationApplyAwardAndHonors>(entity =>
            {
                entity.ToTable("Relation_LegalPersonRegistration_ApplyAwardAndHonors_sub3_LegalPersonRegistration_ApplyAwardAndHonors");

                entity.Property(e => e.LegalPersonRegistrationApplyAwardAndHonorsId).HasColumnName("LegalPersonRegistration_ApplyAwardAndHonors_Id");

                entity.Property(e => e.LegalPersonRegistrationApplyAwardAndHonorsSub3Id).HasColumnName("LegalPersonRegistration_ApplyAwardAndHonors_sub3_Id");
            });

            modelBuilder.Entity<RelationLegalPersonRegistrationCompleteGameInfo>(entity =>
            {
                entity.ToTable("Relation__LegalPersonRegistration_CompleteGameInfo");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.LegalPersonRegistrationCompleteGameInfoId).HasColumnName("LegalPersonRegistration_CompleteGameInfo_Id");
            });

            modelBuilder.Entity<RelationLegalPersonRegistrationCompleteGameInfoSubFormLegalPersonRegistrationCompleteGameInfo>(entity =>
            {
                entity.ToTable("Relation_LegalPersonRegistration_CompleteGameInfo_SubForm_LegalPersonRegistration_CompleteGameInfo");

                entity.Property(e => e.LegalPersonRegistrationCompleteGameInfoId).HasColumnName("LegalPersonRegistration_CompleteGameInfo_Id");

                entity.Property(e => e.LegalPersonRegistrationCompleteGameInfoSubFormId).HasColumnName("LegalPersonRegistration_CompleteGameInfo_SubForm_Id");
            });

            modelBuilder.Entity<RelationLegalPersonRegistrationRequestAdditionalInformationSub1LegalPersonRegistrationRequestAdditionalInformation>(entity =>
            {
                entity.ToTable("Relation_LegalPersonRegistration_RequestAdditionalInformation_Sub1_LegalPersonRegistration_RequestAdditionalInformation");

                entity.Property(e => e.LegalPersonRegistrationRequestAdditionalInformationId).HasColumnName("LegalPersonRegistration_RequestAdditionalInformation_Id");

                entity.Property(e => e.LegalPersonRegistrationRequestAdditionalInformationSub1Id).HasColumnName("LegalPersonRegistration_RequestAdditionalInformation_Sub1_Id");
            });

            modelBuilder.Entity<RelationLicensingPublicationRequestingPublishingLicense>(entity =>
            {
                entity.ToTable("Relation__LicensingPublication_RequestingPublishingLicense");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.LicensingPublicationRequestingPublishingLicenseId).HasColumnName("LicensingPublication_RequestingPublishingLicense_Id");
            });

            modelBuilder.Entity<RelationLowLevelAnalyze2AnalyzeManagerObserveForm>(entity =>
            {
                entity.ToTable("Relation_lowLevelAnalyze2_AnalyzeManagerObserveForm");

                entity.Property(e => e.AnalyzeManagerObserveFormId).HasColumnName("AnalyzeManagerObserveForm_Id");

                entity.Property(e => e.LowLevelAnalyze2Id).HasColumnName("lowLevelAnalyze2_Id");
            });

            modelBuilder.Entity<RelationLowLevelAnalyze2AnalyzeReportForm>(entity =>
            {
                entity.ToTable("Relation_lowLevelAnalyze2_AnalyzeReportForm");

                entity.Property(e => e.AnalyzeReportFormId).HasColumnName("AnalyzeReportForm_Id");

                entity.Property(e => e.LowLevelAnalyze2Id).HasColumnName("lowLevelAnalyze2_Id");
            });

            modelBuilder.Entity<RelationLowLevelAnalyze2AnalyzerItemsCheck>(entity =>
            {
                entity.ToTable("Relation_LowLevelAnalyze2_AnalyzerItemsCheck");

                entity.Property(e => e.AnalyzerItemsCheckId).HasColumnName("AnalyzerItemsCheck_Id");

                entity.Property(e => e.LowLevelAnalyze2Id).HasColumnName("LowLevelAnalyze2_Id");
            });

            modelBuilder.Entity<RelationLowLevelAnalyze2LowLevelAnalyzeThree>(entity =>
            {
                entity.ToTable("Relation_lowLevelAnalyze2_lowLevelAnalyzeThree");

                entity.Property(e => e.LowLevelAnalyze2Id).HasColumnName("lowLevelAnalyze2_Id");

                entity.Property(e => e.LowLevelAnalyzeThreeId).HasColumnName("lowLevelAnalyzeThree_Id");
            });

            modelBuilder.Entity<RelationLowLevelAnalyzeThree>(entity =>
            {
                entity.ToTable("Relation__lowLevelAnalyzeThree");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.LowLevelAnalyzeThreeId).HasColumnName("lowLevelAnalyzeThree_Id");
            });

            modelBuilder.Entity<RelationMobileGamesRatingRequestSazmani>(entity =>
            {
                entity.ToTable("Relation__MobileGamesRatingRequestSazmani");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.MobileGamesRatingRequestSazmaniId).HasColumnName("MobileGamesRatingRequestSazmani_Id");
            });

            modelBuilder.Entity<RelationNmobileGameAgeRatingReq>(entity =>
            {
                entity.ToTable("Relation__NMobileGameAgeRatingReq");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.NmobileGameAgeRatingReqId).HasColumnName("NMobileGameAgeRatingReq_Id");
            });

            modelBuilder.Entity<RelationNmobileGameAgeRatingReqSazmani>(entity =>
            {
                entity.ToTable("Relation__NMobileGameAgeRatingReqSazmani");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.NmobileGameAgeRatingReqSazmaniId).HasColumnName("NMobileGameAgeRatingReqSazmani_Id");
            });

            modelBuilder.Entity<RelationOldGameReleaseLicenseSelectGame>(entity =>
            {
                entity.ToTable("Relation__OldGameReleaseLicense_SelectGame");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.OldGameReleaseLicenseSelectGameId).HasColumnName("OldGameReleaseLicense_SelectGame_Id");
            });

            modelBuilder.Entity<RelationOldHologramGameApplyHologram>(entity =>
            {
                entity.ToTable("Relation__OldHologramGame_ApplyHologram");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.OldHologramGameApplyHologramId).HasColumnName("OldHologramGame_ApplyHologram_Id");
            });

            modelBuilder.Entity<RelationOldHologramGameApplyHologramSubForm>(entity =>
            {
                entity.ToTable("Relation__OldHologramGame_ApplyHologram_SubForm");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.OldHologramGameApplyHologramSubFormId).HasColumnName("OldHologramGame_ApplyHologram_SubForm_Id");
            });

            modelBuilder.Entity<RelationOldHologramGameFinalInstallationList>(entity =>
            {
                entity.ToTable("Relation__OldHologramGame_FinalInstallationList");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.OldHologramGameFinalInstallationListId).HasColumnName("OldHologramGame_FinalInstallationList_Id");
            });

            modelBuilder.Entity<RelationOldHologramGameHologramNumber>(entity =>
            {
                entity.ToTable("Relation__OldHologramGame_HologramNumber");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.OldHologramGameHologramNumberId).HasColumnName("OldHologramGame_HologramNumber_Id");
            });

            modelBuilder.Entity<RelationOldHologramGameHologramNumberSubForm>(entity =>
            {
                entity.ToTable("Relation__OldHologramGame_HologramNumber_SubForm");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.OldHologramGameHologramNumberSubFormId).HasColumnName("OldHologramGame_HologramNumber_SubForm_Id");
            });

            modelBuilder.Entity<RelationOrganizationMobileGamingLicenseForeignCheckingDocuments>(entity =>
            {
                entity.ToTable("Relation_Organization_MobileGamingLicenseForeign_CheckingDocuments");

                entity.Property(e => e.MobileGamingLicenseForeignCheckingDocumentsId).HasColumnName("MobileGamingLicenseForeign_CheckingDocuments_Id");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_Id");
            });

            modelBuilder.Entity<RelationOrganizationsGameTitleRegisterReq>(entity =>
            {
                entity.ToTable("Relation_organizations_gameTitleRegisterReq");

                entity.Property(e => e.GameTitleRegisterReqId).HasColumnName("gameTitleRegisterReq_Id");

                entity.Property(e => e.OrganizationsId).HasColumnName("organizations_Id");
            });

            modelBuilder.Entity<RelationOrganizationsMobileGamingLicenseForeignCheckGameRatings>(entity =>
            {
                entity.ToTable("Relation_Organizations_MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.MobileGamingLicenseForeignCheckGameRatingsId).HasColumnName("MobileGamingLicenseForeign_CheckGameRatings_Id");

                entity.Property(e => e.OrganizationsId).HasColumnName("Organizations_Id");
            });

            modelBuilder.Entity<RelationOrganizationsSubmitSource>(entity =>
            {
                entity.ToTable("Relation_Organizations_SubmitSource");

                entity.Property(e => e.OrganizationsId).HasColumnName("Organizations_Id");

                entity.Property(e => e.SubmitSourceId).HasColumnName("SubmitSource_Id");
            });

            modelBuilder.Entity<RelationOrganizationsSur030GameRatingControl>(entity =>
            {
                entity.ToTable("Relation_Organizations_SUR_030_GameRatingControl");

                entity.Property(e => e.OrganizationsId).HasColumnName("Organizations_Id");

                entity.Property(e => e.Sur030GameRatingControlId).HasColumnName("SUR_030_GameRatingControl_Id");
            });

            modelBuilder.Entity<RelationOrganizationsVersionInsertDecide>(entity =>
            {
                entity.ToTable("Relation_organizations_versionInsertDecide");

                entity.Property(e => e.OrganizationsId).HasColumnName("organizations_Id");

                entity.Property(e => e.VersionInsertDecideId).HasColumnName("versionInsertDecide_Id");
            });

            modelBuilder.Entity<RelationOtherRatingsGamerAndStoryTellerChoose>(entity =>
            {
                entity.ToTable("Relation_otherRatings_GamerAndStoryTellerChoose");

                entity.Property(e => e.GamerAndStoryTellerChooseId).HasColumnName("GamerAndStoryTellerChoose_Id");

                entity.Property(e => e.OtherRatingsId).HasColumnName("otherRatings_Id");
            });

            modelBuilder.Entity<RelationPeopleAgreementRequest>(entity =>
            {
                entity.ToTable("Relation_People_AgreementRequest");

                entity.Property(e => e.AgreementRequestId).HasColumnName("AgreementRequest_Id");

                entity.Property(e => e.PeopleId).HasColumnName("People_Id");

                entity.HasOne(d => d.AgreementRequest)
                    .WithMany(p => p.RelationPeopleAgreementRequest)
                    .HasForeignKey(d => d.AgreementRequestId)
                    .HasConstraintName("FK__People_Ag__Agree__6B44E613");

                entity.HasOne(d => d.People)
                    .WithMany(p => p.RelationPeopleAgreementRequest)
                    .HasForeignKey(d => d.PeopleId)
                    .HasConstraintName("FK__People_Ag__Peopl__6A50C1DA");
            });

            modelBuilder.Entity<RelationPeopleContractFirstRequest>(entity =>
            {
                entity.ToTable("Relation_People_ContractFirstRequest");

                entity.Property(e => e.ContractFirstRequestId).HasColumnName("ContractFirstRequest_Id");

                entity.Property(e => e.PeopleId).HasColumnName("People_Id");

                entity.HasOne(d => d.ContractFirstRequest)
                    .WithMany(p => p.RelationPeopleContractFirstRequest)
                    .HasForeignKey(d => d.ContractFirstRequestId)
                    .HasConstraintName("FK__People_Co__Contr__63A3C44B");

                entity.HasOne(d => d.People)
                    .WithMany(p => p.RelationPeopleContractFirstRequest)
                    .HasForeignKey(d => d.PeopleId)
                    .HasConstraintName("FK__People_Co__Peopl__62AFA012");
            });

            modelBuilder.Entity<RelationPeopleContractSealRequest>(entity =>
            {
                entity.ToTable("Relation_people_ContractSealRequest");

                entity.Property(e => e.ContractSealRequestId).HasColumnName("ContractSealRequest_Id");

                entity.Property(e => e.PeopleId).HasColumnName("people_Id");
            });

            modelBuilder.Entity<RelationPeopleContractUpload>(entity =>
            {
                entity.ToTable("Relation_People_ContractUpload");

                entity.Property(e => e.ContractUploadId).HasColumnName("ContractUpload_Id");

                entity.Property(e => e.PeopleId).HasColumnName("People_Id");

                entity.HasOne(d => d.ContractUpload)
                    .WithMany(p => p.RelationPeopleContractUpload)
                    .HasForeignKey(d => d.ContractUploadId)
                    .HasConstraintName("FK__People_Co__Contr__3AA1AEB8");

                entity.HasOne(d => d.People)
                    .WithMany(p => p.RelationPeopleContractUpload)
                    .HasForeignKey(d => d.PeopleId)
                    .HasConstraintName("FK__People_Co__Peopl__39AD8A7F");
            });

            modelBuilder.Entity<RelationPeopleSuportReplyForm>(entity =>
            {
                entity.ToTable("Relation_People_suportReplyForm");

                entity.Property(e => e.PeopleId).HasColumnName("People_Id");

                entity.Property(e => e.SuportReplyFormId).HasColumnName("suportReplyForm_Id");

                entity.HasOne(d => d.People)
                    .WithMany(p => p.RelationPeopleSuportReplyForm)
                    .HasForeignKey(d => d.PeopleId)
                    .HasConstraintName("FK__People_su__Peopl__09946309");

                entity.HasOne(d => d.SuportReplyForm)
                    .WithMany(p => p.RelationPeopleSuportReplyForm)
                    .HasForeignKey(d => d.SuportReplyFormId)
                    .HasConstraintName("FK__People_su__supor__0A888742");
            });

            modelBuilder.Entity<RelationPeopleSupportMgntCheck>(entity =>
            {
                entity.ToTable("Relation_People_SupportMgntCheck");

                entity.Property(e => e.PeopleId).HasColumnName("People_Id");

                entity.Property(e => e.SupportMgntCheckId).HasColumnName("SupportMgntCheck_Id");

                entity.HasOne(d => d.People)
                    .WithMany(p => p.RelationPeopleSupportMgntCheck)
                    .HasForeignKey(d => d.PeopleId)
                    .HasConstraintName("FK__People_Su__Peopl__05C3D225");

                entity.HasOne(d => d.SupportMgntCheck)
                    .WithMany(p => p.RelationPeopleSupportMgntCheck)
                    .HasForeignKey(d => d.SupportMgntCheckId)
                    .HasConstraintName("FK__People_Su__Suppo__06B7F65E");
            });

            modelBuilder.Entity<RelationPictogram2WRadebandiSazmani>(entity =>
            {
                entity.ToTable("Relation_pictogram2_wRadebandiSazmani");

                entity.Property(e => e.Pictogram2Id).HasColumnName("pictogram2_Id");

                entity.Property(e => e.WRadebandiSazmaniId).HasColumnName("wRadebandiSazmani_Id");
            });

            modelBuilder.Entity<RelationPrintAuctionsSelectPublisher>(entity =>
            {
                entity.ToTable("Relation__PrintAuctions_SelectPublisher");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.PrintAuctionsSelectPublisherId).HasColumnName("PrintAuctions_SelectPublisher_Id");
            });

            modelBuilder.Entity<RelationPropellerReleaseCheckApplyingDeputy>(entity =>
            {
                entity.ToTable("Relation__PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.PropellerReleaseCheckApplyingDeputyId).HasColumnName("PropellerRelease_CheckApplyingDeputy_Id");
            });

            modelBuilder.Entity<RelationPropellerReleaseSelectPermissionsRelease>(entity =>
            {
                entity.ToTable("Relation__PropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.PropellerReleaseSelectPermissionsReleaseId).HasColumnName("PropellerRelease_SelectPermissionsRelease_Id");
            });

            modelBuilder.Entity<RelationRatingAccountApplyingRatingAccount>(entity =>
            {
                entity.ToTable("Relation__RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.RatingAccountApplyingRatingAccountId).HasColumnName("RatingAccount_ApplyingRatingAccount_Id");
            });

            modelBuilder.Entity<RelationRegisterPyramidTeamsGameInfo>(entity =>
            {
                entity.ToTable("Relation__RegisterPyramidTeams_GameInfo");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.RegisterPyramidTeamsGameInfoId).HasColumnName("RegisterPyramidTeams_GameInfo_Id");
            });

            modelBuilder.Entity<RelationRelationLowLevelAnalyze2AnalyzeReportFormAnalyzerItemsCheck>(entity =>
            {
                entity.ToTable("Relation_Relation_lowLevelAnalyze2_AnalyzeReportForm_AnalyzerItemsCheck");

                entity.Property(e => e.AnalyzerItemsCheckId).HasColumnName("AnalyzerItemsCheck_Id");

                entity.Property(e => e.RelationLowLevelAnalyze2AnalyzeReportFormId).HasColumnName("Relation_lowLevelAnalyze2_AnalyzeReportForm_Id");
            });

            modelBuilder.Entity<RelationRelationTblPhysicalPublishLicensePropellerReleaseSelectPermissionsReleasePropellerReleaseCheckApplyingDeputy>(entity =>
            {
                entity.ToTable("Relation_Relation_tblPhysicalPublishLicense_PropellerRelease_SelectPermissionsRelease_PropellerRelease_CheckApplyingDeputy");

                entity.Property(e => e.PropellerReleaseCheckApplyingDeputyId).HasColumnName("PropellerRelease_CheckApplyingDeputy_Id");

                entity.Property(e => e.RelationTblPhysicalPublishLicensePropellerReleaseSelectPermissionsReleaseId).HasColumnName("Relation_tblPhysicalPublishLicense_PropellerRelease_SelectPermissionsRelease_Id");
            });

            modelBuilder.Entity<RelationRelationTblVersionGreenHologramApplyItemsSubFormGreenHologramApplyItems>(entity =>
            {
                entity.ToTable("Relation_Relation_tblVersion_GreenHologram_ApplyItems_SubForm_GreenHologram_ApplyItems");

                entity.Property(e => e.GreenHologramApplyItemsId).HasColumnName("GreenHologram_ApplyItems_Id");

                entity.Property(e => e.RelationTblVersionGreenHologramApplyItemsSubFormId).HasColumnName("Relation_tblVersion_GreenHologram_ApplyItems_SubForm_Id");
            });

            modelBuilder.Entity<RelationRelationUnCategorizedContentFormAnalyzeReportFormAnalyzerItemsCheck>(entity =>
            {
                entity.ToTable("Relation_Relation_unCategorizedContentForm_AnalyzeReportForm_AnalyzerItemsCheck");

                entity.Property(e => e.AnalyzerItemsCheckId).HasColumnName("AnalyzerItemsCheck_Id");

                entity.Property(e => e.RelationUnCategorizedContentFormAnalyzeReportFormId).HasColumnName("Relation_unCategorizedContentForm_AnalyzeReportForm_Id");
            });

            modelBuilder.Entity<RelationRolesWiRolesandaccess>(entity =>
            {
                entity.ToTable("Relation_roles_WI_rolesandaccess");

                entity.Property(e => e.RolesId).HasColumnName("roles_Id");

                entity.Property(e => e.WiRolesandaccessId).HasColumnName("WI_rolesandaccess_Id");
            });

            modelBuilder.Entity<RelationSelectEditorReviewSuggestions>(entity =>
            {
                entity.ToTable("Relation__SelectEditor_ReviewSuggestions");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.SelectEditorReviewSuggestionsId).HasColumnName("SelectEditor_ReviewSuggestions_Id");
            });

            modelBuilder.Entity<RelationSelectEditorSelectGame>(entity =>
            {
                entity.ToTable("Relation__SelectEditor_SelectGame");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.SelectEditorSelectGameId).HasColumnName("SelectEditor_SelectGame_Id");
            });

            modelBuilder.Entity<RelationShowScoreAverage>(entity =>
            {
                entity.ToTable("Relation__showScoreAverage");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.ShowScoreAverageId).HasColumnName("showScoreAverage_Id");
            });

            modelBuilder.Entity<RelationSubEditItemUploadEditItemUpload>(entity =>
            {
                entity.ToTable("Relation_sub_editItemUpload_editItemUpload");

                entity.Property(e => e.EditItemUploadId).HasColumnName("editItemUpload_Id");

                entity.Property(e => e.SubEditItemUploadId).HasColumnName("sub_editItemUpload_Id");
            });

            modelBuilder.Entity<RelationSubFormGamerSeenContentGamerSeenContent>(entity =>
            {
                entity.ToTable("Relation_subForm_GamerSeenContent_GamerSeenContent");

                entity.Property(e => e.GamerSeenContentId).HasColumnName("GamerSeenContent_Id");

                entity.Property(e => e.SubFormGamerSeenContentId).HasColumnName("subForm_GamerSeenContent_Id");
            });

            modelBuilder.Entity<RelationSubLevelAnalyzeAnalizorMgntSelection>(entity =>
            {
                entity.ToTable("Relation_SubLevelAnalyze_AnalizorMgntSelection");

                entity.Property(e => e.AnalizorMgntSelectionId).HasColumnName("AnalizorMgntSelection_Id");

                entity.Property(e => e.SubLevelAnalyzeId).HasColumnName("SubLevelAnalyze_Id");

                entity.HasOne(d => d.AnalizorMgntSelection)
                    .WithMany(p => p.RelationSubLevelAnalyzeAnalizorMgntSelection)
                    .HasForeignKey(d => d.AnalizorMgntSelectionId)
                    .HasConstraintName("FK__SubLevelA__Anali__38EE7070");

                entity.HasOne(d => d.SubLevelAnalyze)
                    .WithMany(p => p.RelationSubLevelAnalyzeAnalizorMgntSelection)
                    .HasForeignKey(d => d.SubLevelAnalyzeId)
                    .HasConstraintName("FK__SubLevelA__SubLe__37FA4C37");
            });

            modelBuilder.Entity<RelationSubLevelAnalyzeAnalyzeMgntReport>(entity =>
            {
                entity.ToTable("Relation_SubLevelAnalyze_AnalyzeMgntReport");

                entity.Property(e => e.AnalyzeMgntReportId).HasColumnName("AnalyzeMgntReport_Id");

                entity.Property(e => e.SubLevelAnalyzeId).HasColumnName("SubLevelAnalyze_Id");
            });

            modelBuilder.Entity<RelationTblAccountsHologramAttachmentHologramAttachmentRequest>(entity =>
            {
                entity.ToTable("Relation_tblAccounts_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.HologramAttachmentHologramAttachmentRequestId).HasColumnName("HologramAttachment_HologramAttachmentRequest_Id");

                entity.Property(e => e.TblAccountsId).HasColumnName("tblAccounts_Id");
            });

            modelBuilder.Entity<RelationTblAccountsRatingAccountApplyingRatingAccount>(entity =>
            {
                entity.ToTable("Relation_tblAccounts_RatingAccount_ApplyingRatingAccount");

                entity.Property(e => e.RatingAccountApplyingRatingAccountId).HasColumnName("RatingAccount_ApplyingRatingAccount_Id");

                entity.Property(e => e.TblAccountsId).HasColumnName("tblAccounts_Id");
            });

            modelBuilder.Entity<RelationTblAuctionDisseminationListItemsCourse>(entity =>
            {
                entity.ToTable("Relation_tblAuction_Dissemination_ListItemsCourse");

                entity.Property(e => e.DisseminationListItemsCourseId).HasColumnName("Dissemination_ListItemsCourse_Id");

                entity.Property(e => e.TblAuctionId).HasColumnName("tblAuction_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemDisseminationListItemsCourse>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItem_Dissemination_ListItemsCourse");

                entity.Property(e => e.DisseminationListItemsCourseId).HasColumnName("Dissemination_ListItemsCourse_Id");

                entity.Property(e => e.TblAuctionItemId).HasColumnName("tblAuctionItem_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemEditAuctionItems>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItem_EditAuctionItems");

                entity.Property(e => e.EditAuctionItemsId).HasColumnName("EditAuctionItems_Id");

                entity.Property(e => e.TblAuctionItemId).HasColumnName("tblAuctionItem_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemEnableDisseminationListItemsCourse>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItemEnable_Dissemination_ListItemsCourse");

                entity.Property(e => e.DisseminationListItemsCourseId).HasColumnName("Dissemination_ListItemsCourse_Id");

                entity.Property(e => e.TblAuctionItemEnableId).HasColumnName("tblAuctionItemEnable_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemenableEditAuctionItems>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItemenable_EditAuctionItems");

                entity.Property(e => e.EditAuctionItemsId).HasColumnName("EditAuctionItems_Id");

                entity.Property(e => e.TblAuctionItemenableId).HasColumnName("tblAuctionItemenable_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemHoldingDisseminationMeetingDissemination>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItem_HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.HoldingDisseminationMeetingDisseminationId).HasColumnName("HoldingDissemination_MeetingDissemination_Id");

                entity.Property(e => e.TblAuctionItemId).HasColumnName("tblAuctionItem_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemHoldingDisseminationRecordResults>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItem_HoldingDissemination_RecordResults");

                entity.Property(e => e.HoldingDisseminationRecordResultsId).HasColumnName("HoldingDissemination_RecordResults_Id");

                entity.Property(e => e.TblAuctionItemId).HasColumnName("tblAuctionItem_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemHologramAttachmentHologramAttachmentRequest>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItem_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.HologramAttachmentHologramAttachmentRequestId).HasColumnName("HologramAttachment_HologramAttachmentRequest_Id");

                entity.Property(e => e.TblAuctionItemId).HasColumnName("tblAuctionItem_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemHologramAttachmentHologramAttachmentRequestSubForm>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItem_HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.HologramAttachmentHologramAttachmentRequestSubFormId).HasColumnName("HologramAttachment_HologramAttachmentRequest_SubForm_Id");

                entity.Property(e => e.TblAuctionItemId).HasColumnName("tblAuctionItem_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemHologramAttachmentHologramNumber>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItem_HologramAttachment_HologramNumber");

                entity.Property(e => e.HologramAttachmentHologramNumberId).HasColumnName("HologramAttachment_HologramNumber_Id");

                entity.Property(e => e.TblAuctionItemId).HasColumnName("tblAuctionItem_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemHologramAttachmentHologramNumberSubForm>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItem_HologramAttachment_HologramNumber_SubForm");

                entity.Property(e => e.HologramAttachmentHologramNumberSubFormId).HasColumnName("HologramAttachment_HologramNumber_SubForm_Id");

                entity.Property(e => e.TblAuctionItemId).HasColumnName("tblAuctionItem_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemHologramAttachmentInstallationList>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItem_HologramAttachment_InstallationList");

                entity.Property(e => e.HologramAttachmentInstallationListId).HasColumnName("HologramAttachment_InstallationList_Id");

                entity.Property(e => e.TblAuctionItemId).HasColumnName("tblAuctionItem_Id");
            });

            modelBuilder.Entity<RelationTblAuctionItemHologramAttachmentInstallationListSubForm>(entity =>
            {
                entity.ToTable("Relation_tblAuctionItem_HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.HologramAttachmentInstallationListSubFormId).HasColumnName("HologramAttachment_InstallationList_SubForm_Id");

                entity.Property(e => e.TblAuctionItemId).HasColumnName("tblAuctionItem_Id");
            });

            modelBuilder.Entity<RelationTblDeficiencyTypeHologramAttachmentInstallationListSubForm>(entity =>
            {
                entity.ToTable("Relation_tblDeficiencyType_HologramAttachment_InstallationList_SubForm");

                entity.Property(e => e.HologramAttachmentInstallationListSubFormId).HasColumnName("HologramAttachment_InstallationList_SubForm_Id");

                entity.Property(e => e.TblDeficiencyTypeId).HasColumnName("tblDeficiencyType_Id");
            });

            modelBuilder.Entity<RelationTblEditOffersSelectEditorReviewSuggestions2>(entity =>
            {
                entity.ToTable("Relation_tblEditOffers_SelectEditor_ReviewSuggestions2");

                entity.Property(e => e.SelectEditorReviewSuggestions2Id).HasColumnName("SelectEditor_ReviewSuggestions2_Id");

                entity.Property(e => e.TblEditOffersId).HasColumnName("tblEditOffers_Id");
            });

            modelBuilder.Entity<RelationTblGameAddVersionToGame>(entity =>
            {
                entity.ToTable("Relation_tblGame_addVersionToGame");

                entity.Property(e => e.AddVersionToGameId).HasColumnName("addVersionToGame_Id");

                entity.Property(e => e.TblGameId).HasColumnName("tblGame_Id");
            });

            modelBuilder.Entity<RelationTblGameAuctionItems>(entity =>
            {
                entity.ToTable("Relation_tblGame_AuctionItems");

                entity.Property(e => e.AuctionItemsId).HasColumnName("AuctionItems_Id");

                entity.Property(e => e.TblGameId).HasColumnName("tblGame_Id");
            });

            modelBuilder.Entity<RelationTblgameAuctionItems2>(entity =>
            {
                entity.ToTable("Relation_tblgame_AuctionItems2");

                entity.Property(e => e.AuctionItems2Id).HasColumnName("AuctionItems2_Id");

                entity.Property(e => e.TblgameId).HasColumnName("tblgame_Id");
            });

            modelBuilder.Entity<RelationTblGameEditGameChooseNameGame>(entity =>
            {
                entity.ToTable("Relation_tblGame_EditGame_ChooseNameGame");

                entity.Property(e => e.EditGameChooseNameGameId).HasColumnName("EditGame_ChooseNameGame_Id");

                entity.Property(e => e.TblGameId).HasColumnName("tblGame_Id");
            });

            modelBuilder.Entity<RelationTblgameNmobileGameAgeRatingReq>(entity =>
            {
                entity.ToTable("Relation_tblgame_NMobileGameAgeRatingReq");

                entity.Property(e => e.NmobileGameAgeRatingReqId).HasColumnName("NMobileGameAgeRatingReq_Id");

                entity.Property(e => e.TblgameId).HasColumnName("tblgame_Id");
            });

            modelBuilder.Entity<RelationTblItemVersionsEditAuctionItems>(entity =>
            {
                entity.ToTable("Relation_tblItemVersions_EditAuctionItems");

                entity.Property(e => e.EditAuctionItemsId).HasColumnName("EditAuctionItems_Id");

                entity.Property(e => e.TblItemVersionsId).HasColumnName("tblItemVersions_Id");
            });

            modelBuilder.Entity<RelationTblOrganizationBonyadHologramAttachmentHologramAttachmentRequest>(entity =>
            {
                entity.ToTable("Relation_tblOrganizationBonyad_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.HologramAttachmentHologramAttachmentRequestId).HasColumnName("HologramAttachment_HologramAttachmentRequest_Id");

                entity.Property(e => e.TblOrganizationBonyadId).HasColumnName("tblOrganizationBonyad_Id");
            });

            modelBuilder.Entity<RelationTblOrganizationBonyadSimilarGamesListPr>(entity =>
            {
                entity.ToTable("Relation_tblOrganizationBonyad_SimilarGamesListPR");

                entity.Property(e => e.SimilarGamesListPrId).HasColumnName("SimilarGamesListPR_Id");

                entity.Property(e => e.TblOrganizationBonyadId).HasColumnName("tblOrganizationBonyad_Id");
            });

            modelBuilder.Entity<RelationTblOrganizationBonyadSubmitSource>(entity =>
            {
                entity.ToTable("Relation_tblOrganizationBonyad_SubmitSource");

                entity.Property(e => e.SubmitSourceId).HasColumnName("SubmitSource_Id");

                entity.Property(e => e.TblOrganizationBonyadId).HasColumnName("tblOrganizationBonyad_Id");

                entity.HasOne(d => d.SubmitSource)
                    .WithMany(p => p.RelationTblOrganizationBonyadSubmitSource)
                    .HasForeignKey(d => d.SubmitSourceId)
                    .HasConstraintName("FK__tblOrgani__Submi__6B1AC8E1");

                entity.HasOne(d => d.TblOrganizationBonyad)
                    .WithMany(p => p.RelationTblOrganizationBonyadSubmitSource)
                    .HasForeignKey(d => d.TblOrganizationBonyadId)
                    .HasConstraintName("FK__tblOrgani__tblOr__6A26A4A8");
            });

            modelBuilder.Entity<RelationTblPhysicalPublishLicenseHologramAttachmentHologramAttachmentRequest>(entity =>
            {
                entity.ToTable("Relation_tblPhysicalPublishLicense_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.HologramAttachmentHologramAttachmentRequestId).HasColumnName("HologramAttachment_HologramAttachmentRequest_Id");

                entity.Property(e => e.TblPhysicalPublishLicenseId).HasColumnName("tblPhysicalPublishLicense_Id");
            });

            modelBuilder.Entity<RelationTblPhysicalPublishLicenseHologramAttachmentHologramAttachmentRequestSubForm>(entity =>
            {
                entity.ToTable("Relation_tblPhysicalPublishLicense_HologramAttachment_HologramAttachmentRequest_SubForm");

                entity.Property(e => e.HologramAttachmentHologramAttachmentRequestSubFormId).HasColumnName("HologramAttachment_HologramAttachmentRequest_SubForm_Id");

                entity.Property(e => e.TblPhysicalPublishLicenseId).HasColumnName("tblPhysicalPublishLicense_Id");
            });

            modelBuilder.Entity<RelationTblPhysicalPublishLicenseHologramTransferToOldGamesApplyAndSelectGame>(entity =>
            {
                entity.ToTable("Relation_tblPhysicalPublishLicense_HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.HologramTransferToOldGamesApplyAndSelectGameId).HasColumnName("HologramTransferToOldGames_ApplyAndSelectGame_Id");

                entity.Property(e => e.TblPhysicalPublishLicenseId).HasColumnName("tblPhysicalPublishLicense_Id");
            });

            modelBuilder.Entity<RelationTblPhysicalPublishLicenseHologramTransferToOldGamesApplyAndSelectGameSubForm>(entity =>
            {
                entity.ToTable("Relation_tblPhysicalPublishLicense_HologramTransferToOldGames_ApplyAndSelectGame_SubForm");

                entity.Property(e => e.HologramTransferToOldGamesApplyAndSelectGameSubFormId).HasColumnName("HologramTransferToOldGames_ApplyAndSelectGame_SubForm_Id");

                entity.Property(e => e.TblPhysicalPublishLicenseId).HasColumnName("tblPhysicalPublishLicense_Id");
            });

            modelBuilder.Entity<RelationTblPhysicalPublishLicenseIssueLicensingForPublicOldGamesRequestIssuanceLicense>(entity =>
            {
                entity.ToTable("Relation_tblPhysicalPublishLicense_IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.IssueLicensingForPublicOldGamesRequestIssuanceLicenseId).HasColumnName("IssueLicensingForPublicOldGames_RequestIssuanceLicense_Id");

                entity.Property(e => e.TblPhysicalPublishLicenseId).HasColumnName("tblPhysicalPublishLicense_Id");
            });

            modelBuilder.Entity<RelationTblPhysicalPublishLicenseOldGamePropellerReleaseSelectPermissionsRelease>(entity =>
            {
                entity.ToTable("Relation_tblPhysicalPublishLicense_OldGamePropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.OldGamePropellerReleaseSelectPermissionsReleaseId).HasColumnName("OldGamePropellerRelease_SelectPermissionsRelease_Id");

                entity.Property(e => e.TblPhysicalPublishLicenseId).HasColumnName("tblPhysicalPublishLicense_Id");
            });

            modelBuilder.Entity<RelationTblPhysicalPublishLicensePropellerReleaseSelectPermissionsRelease>(entity =>
            {
                entity.ToTable("Relation_tblPhysicalPublishLicense_PropellerRelease_SelectPermissionsRelease");

                entity.Property(e => e.PropellerReleaseSelectPermissionsReleaseId).HasColumnName("PropellerRelease_SelectPermissionsRelease_Id");

                entity.Property(e => e.TblPhysicalPublishLicenseId).HasColumnName("tblPhysicalPublishLicense_Id");
            });

            modelBuilder.Entity<RelationTblPictogramWRadebandiSazmani>(entity =>
            {
                entity.ToTable("Relation_tblPictogram_wRadebandiSazmani");

                entity.Property(e => e.TblPictogramId).HasColumnName("tblPictogram_Id");

                entity.Property(e => e.WRadebandiSazmaniId).HasColumnName("wRadebandiSazmani_Id");
            });

            modelBuilder.Entity<RelationTblProducerNexclusiveNuserDisseminationPublishersAuctions>(entity =>
            {
                entity.ToTable("Relation_tblProducerNExclusiveNUser_Dissemination_PublishersAuctions");

                entity.Property(e => e.DisseminationPublishersAuctionsId).HasColumnName("Dissemination_PublishersAuctions_Id");

                entity.Property(e => e.TblProducerNexclusiveNuserId).HasColumnName("tblProducerNExclusiveNUser_Id");
            });

            modelBuilder.Entity<RelationTblProducerNexclusiveNuserPrintAuctionsSelectPublisher>(entity =>
            {
                entity.ToTable("Relation_tblProducerNExclusiveNUser_PrintAuctions_SelectPublisher");

                entity.Property(e => e.PrintAuctionsSelectPublisherId).HasColumnName("PrintAuctions_SelectPublisher_Id");

                entity.Property(e => e.TblProducerNexclusiveNuserId).HasColumnName("tblProducerNExclusiveNUser_Id");
            });

            modelBuilder.Entity<RelationTblTransactionEditGameChooseEditingGame>(entity =>
            {
                entity.ToTable("Relation_tblTransaction_EditGame_ChooseEditingGame");

                entity.Property(e => e.EditGameChooseEditingGameId).HasColumnName("EditGame_ChooseEditingGame_Id");

                entity.Property(e => e.TblTransactionId).HasColumnName("tblTransaction_Id");
            });

            modelBuilder.Entity<RelationTblUserAccountGreenHologramDeclareFee>(entity =>
            {
                entity.ToTable("Relation_tblUserAccount_GreenHologram_DeclareFee");

                entity.Property(e => e.GreenHologramDeclareFeeId).HasColumnName("GreenHologram_DeclareFee_Id");

                entity.Property(e => e.TblUserAccountId).HasColumnName("tblUserAccount_Id");
            });

            modelBuilder.Entity<RelationTblUserAccountGreenHologramUploadDocumentation>(entity =>
            {
                entity.ToTable("Relation_tblUserAccount_GreenHologram_UploadDocumentation");

                entity.Property(e => e.GreenHologramUploadDocumentationId).HasColumnName("GreenHologram_UploadDocumentation_Id");

                entity.Property(e => e.TblUserAccountId).HasColumnName("tblUserAccount_Id");
            });

            modelBuilder.Entity<RelationTblUserAccountHologramAttachmentHologramAttachmentRequest>(entity =>
            {
                entity.ToTable("Relation_tblUserAccount_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.HologramAttachmentHologramAttachmentRequestId).HasColumnName("HologramAttachment_HologramAttachmentRequest_Id");

                entity.Property(e => e.TblUserAccountId).HasColumnName("tblUserAccount_Id");
            });

            modelBuilder.Entity<RelationTblUserAccountHologramTransferToOldGamesApplyAndSelectGame>(entity =>
            {
                entity.ToTable("Relation_tblUserAccount_HologramTransferToOldGames_ApplyAndSelectGame");

                entity.Property(e => e.HologramTransferToOldGamesApplyAndSelectGameId).HasColumnName("HologramTransferToOldGames_ApplyAndSelectGame_Id");

                entity.Property(e => e.TblUserAccountId).HasColumnName("tblUserAccount_Id");
            });

            modelBuilder.Entity<RelationTblversionAllGameVersions>(entity =>
            {
                entity.ToTable("Relation_tblversion_allGameVersions");

                entity.Property(e => e.AllGameVersionsId).HasColumnName("allGameVersions_Id");

                entity.Property(e => e.TblversionId).HasColumnName("tblversion_Id");
            });

            modelBuilder.Entity<RelationTblVersionAllocateGameBasketsEditInformationDataEntry>(entity =>
            {
                entity.ToTable("Relation_tblVersion_AllocateGameBasketsEditInformation_DataEntry");

                entity.Property(e => e.AllocateGameBasketsEditInformationDataEntryId).HasColumnName("AllocateGameBasketsEditInformation_DataEntry_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionAnalizSubEditItemUpload>(entity =>
            {
                entity.ToTable("Relation_tblVersionAnaliz_sub_editItemUpload");

                entity.Property(e => e.SubEditItemUploadId).HasColumnName("sub_editItemUpload_Id");

                entity.Property(e => e.TblVersionAnalizId).HasColumnName("tblVersionAnaliz_Id");
            });

            modelBuilder.Entity<RelationTblVersionAuctionItems2>(entity =>
            {
                entity.ToTable("Relation_tblVersion_AuctionItems2");

                entity.Property(e => e.AuctionItems2Id).HasColumnName("AuctionItems2_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionDisseminationInitialVoting>(entity =>
            {
                entity.ToTable("Relation_tblVersion_Dissemination_InitialVoting");

                entity.Property(e => e.DisseminationInitialVotingId).HasColumnName("Dissemination_InitialVoting_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionDisseminationListItemsCourse>(entity =>
            {
                entity.ToTable("Relation_tblVersion_Dissemination_ListItemsCourse");

                entity.Property(e => e.DisseminationListItemsCourseId).HasColumnName("Dissemination_ListItemsCourse_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionEditGameChooseEditingGame>(entity =>
            {
                entity.ToTable("Relation_tblVersion_EditGame_ChooseEditingGame");

                entity.Property(e => e.EditGameChooseEditingGameId).HasColumnName("EditGame_ChooseEditingGame_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblversioneditItemEditItemUpload>(entity =>
            {
                entity.ToTable("Relation_tblversioneditItem_editItemUpload");

                entity.Property(e => e.EditItemUploadId).HasColumnName("editItemUpload_Id");

                entity.Property(e => e.TblversioneditItemId).HasColumnName("tblversioneditItem_Id");
            });

            modelBuilder.Entity<RelationTblVersionEditItemSubEditItemUpload>(entity =>
            {
                entity.ToTable("Relation_tblVersionEditItem_sub_editItemUpload");

                entity.Property(e => e.SubEditItemUploadId).HasColumnName("sub_editItemUpload_Id");

                entity.Property(e => e.TblVersionEditItemId).HasColumnName("tblVersionEditItem_Id");
            });

            modelBuilder.Entity<RelationTblVersionEsra2RequestRegister>(entity =>
            {
                entity.ToTable("Relation_tblVersion_ESRA2_RequestRegister");

                entity.Property(e => e.Esra2RequestRegisterId).HasColumnName("ESRA2_RequestRegister_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionFinalGameRegisterForm>(entity =>
            {
                entity.ToTable("Relation_tblVersion_finalGameRegisterForm");

                entity.Property(e => e.FinalGameRegisterFormId).HasColumnName("finalGameRegisterForm_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionGamerAndStoryTellerChoose>(entity =>
            {
                entity.ToTable("Relation_tblVersion_GamerAndStoryTellerChoose");

                entity.Property(e => e.GamerAndStoryTellerChooseId).HasColumnName("GamerAndStoryTellerChoose_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionGameTitleRegisterReq>(entity =>
            {
                entity.ToTable("Relation_tblVersion_gameTitleRegisterReq");

                entity.Property(e => e.GameTitleRegisterReqId).HasColumnName("gameTitleRegisterReq_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionGreenHologramApplyItemsSubForm>(entity =>
            {
                entity.ToTable("Relation_tblVersion_GreenHologram_ApplyItems_SubForm");

                entity.Property(e => e.GreenHologramApplyItemsSubFormId).HasColumnName("GreenHologram_ApplyItems_SubForm_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionGreenHologramAttachmentDocumentation>(entity =>
            {
                entity.ToTable("Relation_tblVersion_GreenHologram_AttachmentDocumentation");

                entity.Property(e => e.GreenHologramAttachmentDocumentationId).HasColumnName("GreenHologram_AttachmentDocumentation_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionGreenHologramDeclareFee>(entity =>
            {
                entity.ToTable("Relation_tblVersion_GreenHologram_DeclareFee");

                entity.Property(e => e.GreenHologramDeclareFeeId).HasColumnName("GreenHologram_DeclareFee_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionGreenHologramRequestReview>(entity =>
            {
                entity.ToTable("Relation_tblVersion_GreenHologram_RequestReview");

                entity.Property(e => e.GreenHologramRequestReviewId).HasColumnName("GreenHologram_RequestReview_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionGreenHologramReviewFinancialRequest>(entity =>
            {
                entity.ToTable("Relation_tblVersion_GreenHologram_ReviewFinancialRequest");

                entity.Property(e => e.GreenHologramReviewFinancialRequestId).HasColumnName("GreenHologram_ReviewFinancialRequest_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionGreenHologramUploadDocumentation>(entity =>
            {
                entity.ToTable("Relation_tblVersion_GreenHologram_UploadDocumentation");

                entity.Property(e => e.GreenHologramUploadDocumentationId).HasColumnName("GreenHologram_UploadDocumentation_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionHoldingDisseminationRecordResults>(entity =>
            {
                entity.ToTable("Relation_tblVersion_HoldingDissemination_RecordResults");

                entity.Property(e => e.HoldingDisseminationRecordResultsId).HasColumnName("HoldingDissemination_RecordResults_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionHologramAttachmentHologramAttachmentRequest>(entity =>
            {
                entity.ToTable("Relation_tblVersion_HologramAttachment_HologramAttachmentRequest");

                entity.Property(e => e.HologramAttachmentHologramAttachmentRequestId).HasColumnName("HologramAttachment_HologramAttachmentRequest_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionHologramAttachmentHologramNumber>(entity =>
            {
                entity.ToTable("Relation_tblVersion_HologramAttachment_HologramNumber");

                entity.Property(e => e.HologramAttachmentHologramNumberId).HasColumnName("HologramAttachment_HologramNumber_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionIssueLicensingForPublicOldGamesRequestIssuanceLicense>(entity =>
            {
                entity.ToTable("Relation_tblVersion_IssueLicensingForPublicOldGames_RequestIssuanceLicense");

                entity.Property(e => e.IssueLicensingForPublicOldGamesRequestIssuanceLicenseId).HasColumnName("IssueLicensingForPublicOldGames_RequestIssuanceLicense_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblversionMobileGamingLicenseForeignCheckingDocuments>(entity =>
            {
                entity.ToTable("Relation_tblversion_MobileGamingLicenseForeign_CheckingDocuments");

                entity.Property(e => e.MobileGamingLicenseForeignCheckingDocumentsId).HasColumnName("MobileGamingLicenseForeign_CheckingDocuments_Id");

                entity.Property(e => e.TblversionId).HasColumnName("tblversion_Id");
            });

            modelBuilder.Entity<RelationTblVersionNmobileGameAgeRatingReq>(entity =>
            {
                entity.ToTable("Relation_tblVersion_NMobileGameAgeRatingReq");

                entity.Property(e => e.NmobileGameAgeRatingReqId).HasColumnName("NMobileGameAgeRatingReq_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionOldGameReleaseLicenseSelectGame>(entity =>
            {
                entity.ToTable("Relation_tblVersion_OldGameReleaseLicense_SelectGame");

                entity.Property(e => e.OldGameReleaseLicenseSelectGameId).HasColumnName("OldGameReleaseLicense_SelectGame_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionPbublishLicenseUpload>(entity =>
            {
                entity.ToTable("Relation_tblVersion_PBublishLicense_Upload");

                entity.Property(e => e.PbublishLicenseUploadId).HasColumnName("PBublishLicense_Upload_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionRatingVersion>(entity =>
            {
                entity.ToTable("Relation_tblVersion_RatingVersion");

                entity.Property(e => e.RatingVersionId).HasColumnName("RatingVersion_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionReceiveSourceFlag>(entity =>
            {
                entity.ToTable("Relation_tblVersion_receiveSourceFlag");

                entity.Property(e => e.ReceiveSourceFlagId).HasColumnName("receiveSourceFlag_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionSelectEditorReviewSuggestions2>(entity =>
            {
                entity.ToTable("Relation_tblVersion_SelectEditor_ReviewSuggestions2");

                entity.Property(e => e.SelectEditorReviewSuggestions2Id).HasColumnName("SelectEditor_ReviewSuggestions2_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionSelectEditorSelectGame>(entity =>
            {
                entity.ToTable("Relation_tblVersion_SelectEditor_SelectGame");

                entity.Property(e => e.SelectEditorSelectGameId).HasColumnName("SelectEditor_SelectGame_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionSimilarGamesListPr>(entity =>
            {
                entity.ToTable("Relation_tblVersion_SimilarGamesListPR");

                entity.Property(e => e.SimilarGamesListPrId).HasColumnName("SimilarGamesListPR_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionSimilarVersions>(entity =>
            {
                entity.ToTable("Relation_tblVersion_SimilarVersions");

                entity.Property(e => e.SimilarVersionsId).HasColumnName("SimilarVersions_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblversionSimilarVersionsSelect>(entity =>
            {
                entity.ToTable("Relation_tblversion_SimilarVersionsSelect");

                entity.Property(e => e.SimilarVersionsSelectId).HasColumnName("SimilarVersionsSelect_Id");

                entity.Property(e => e.TblversionId).HasColumnName("tblversion_Id");
            });

            modelBuilder.Entity<RelationTblVersionSubmitGameForCertificate>(entity =>
            {
                entity.ToTable("Relation_tblVersion_SubmitGameForCertificate");

                entity.Property(e => e.SubmitGameForCertificateId).HasColumnName("SubmitGameForCertificate_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionSur030CheckExistenceVersion>(entity =>
            {
                entity.ToTable("Relation_tblVersion_SUR_030_CheckExistenceVersion");

                entity.Property(e => e.Sur030CheckExistenceVersionId).HasColumnName("SUR_030_CheckExistenceVersion_Id");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");
            });

            modelBuilder.Entity<RelationTblVersionTestP002Sub1>(entity =>
            {
                entity.ToTable("Relation_tblVersion_TestP002_sub1");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");

                entity.Property(e => e.TestP002Sub1Id).HasColumnName("TestP002_sub1_Id");
            });

            modelBuilder.Entity<RelationTblVersionTestP002Sub2>(entity =>
            {
                entity.ToTable("Relation_tblVersion_TestP002_sub2");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");

                entity.Property(e => e.TestP002Sub2Id).HasColumnName("TestP002_sub2_Id");
            });

            modelBuilder.Entity<RelationTblversionVersionInsertDecide>(entity =>
            {
                entity.ToTable("Relation_tblversion_versionInsertDecide");

                entity.Property(e => e.TblversionId).HasColumnName("tblversion_Id");

                entity.Property(e => e.VersionInsertDecideId).HasColumnName("versionInsertDecide_Id");
            });

            modelBuilder.Entity<RelationTblVersionWRadebandiSazmani>(entity =>
            {
                entity.ToTable("Relation_tblVersion_wRadebandiSazmani");

                entity.Property(e => e.TblVersionId).HasColumnName("tblVersion_Id");

                entity.Property(e => e.WRadebandiSazmaniId).HasColumnName("wRadebandiSazmani_Id");
            });

            modelBuilder.Entity<RelationTest001>(entity =>
            {
                entity.ToTable("Relation__test001");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.Test001Id).HasColumnName("test001_Id");
            });

            modelBuilder.Entity<RelationTest201808012>(entity =>
            {
                entity.ToTable("Relation__Test_20180801_2");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.Test201808012Id).HasColumnName("Test_20180801_2_Id");
            });

            modelBuilder.Entity<RelationTestTableGtblTest>(entity =>
            {
                entity.ToTable("Relation_testTABLE_gtblTest");

                entity.Property(e => e.GtblTestId).HasColumnName("gtblTest_Id");

                entity.Property(e => e.TestTableId).HasColumnName("testTABLE_Id");
            });

            modelBuilder.Entity<RelationTestZdff>(entity =>
            {
                entity.ToTable("Relation_test_zdff");

                entity.Property(e => e.TestId).HasColumnName("test_Id");

                entity.Property(e => e.ZdffId).HasColumnName("zdff_Id");
            });

            modelBuilder.Entity<RelationTransferPointsApplyFinancialChanges>(entity =>
            {
                entity.ToTable("Relation__TransferPoints_ApplyFinancialChanges");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.TransferPointsApplyFinancialChangesId).HasColumnName("TransferPoints_ApplyFinancialChanges_Id");
            });

            modelBuilder.Entity<RelationTransferPointsApplyingInternalSoftwareChanges>(entity =>
            {
                entity.ToTable("Relation__TransferPoints_ApplyingInternalSoftwareChanges");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.TransferPointsApplyingInternalSoftwareChangesId).HasColumnName("TransferPoints_ApplyingInternalSoftwareChanges_Id");
            });

            modelBuilder.Entity<RelationTransferPointsFinancialReviews>(entity =>
            {
                entity.ToTable("Relation__TransferPoints_FinancialReviews");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.TransferPointsFinancialReviewsId).HasColumnName("TransferPoints_FinancialReviews_Id");
            });

            modelBuilder.Entity<RelationTransferPointsInitialReviewRequest>(entity =>
            {
                entity.ToTable("Relation__TransferPoints_InitialReviewRequest");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.TransferPointsInitialReviewRequestId).HasColumnName("TransferPoints_InitialReviewRequest_Id");
            });

            modelBuilder.Entity<RelationTransferPointsInternalSoftwareReviews>(entity =>
            {
                entity.ToTable("Relation__TransferPoints_InternalSoftwareReviews");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.TransferPointsInternalSoftwareReviewsId).HasColumnName("TransferPoints_InternalSoftwareReviews_Id");
            });

            modelBuilder.Entity<RelationTransferPointsLawyerReviews>(entity =>
            {
                entity.ToTable("Relation__TransferPoints_LawyerReviews");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.TransferPointsLawyerReviewsId).HasColumnName("TransferPoints_LawyerReviews_Id");
            });

            modelBuilder.Entity<RelationTransferPointsSupervisoryReviews>(entity =>
            {
                entity.ToTable("Relation__TransferPoints_SupervisoryReviews");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.TransferPointsSupervisoryReviewsId).HasColumnName("TransferPoints_SupervisoryReviews_Id");
            });

            modelBuilder.Entity<RelationUnCategorizedContentFormAnalyzeManagerObserveForm>(entity =>
            {
                entity.ToTable("Relation_unCategorizedContentForm_AnalyzeManagerObserveForm");

                entity.Property(e => e.AnalyzeManagerObserveFormId).HasColumnName("AnalyzeManagerObserveForm_Id");

                entity.Property(e => e.UnCategorizedContentFormId).HasColumnName("unCategorizedContentForm_Id");
            });

            modelBuilder.Entity<RelationUnCategorizedContentFormAnalyzeReportForm>(entity =>
            {
                entity.ToTable("Relation_unCategorizedContentForm_AnalyzeReportForm");

                entity.Property(e => e.AnalyzeReportFormId).HasColumnName("AnalyzeReportForm_Id");

                entity.Property(e => e.UnCategorizedContentFormId).HasColumnName("unCategorizedContentForm_Id");
            });

            modelBuilder.Entity<RelationUnCategorizedContentFormAnalyzerItemsCheck>(entity =>
            {
                entity.ToTable("Relation_unCategorizedContentForm_AnalyzerItemsCheck");

                entity.Property(e => e.AnalyzerItemsCheckId).HasColumnName("AnalyzerItemsCheck_Id");

                entity.Property(e => e.UnCategorizedContentFormId).HasColumnName("unCategorizedContentForm_Id");
            });

            modelBuilder.Entity<RelationUsersCaptchatest>(entity =>
            {
                entity.ToTable("Relation_users_captchatest");

                entity.Property(e => e.CaptchatestId).HasColumnName("captchatest_Id");

                entity.Property(e => e.UsersId).HasColumnName("users_Id");
            });

            modelBuilder.Entity<RelationUsersContractManualInsertion>(entity =>
            {
                entity.ToTable("Relation_Users_ContractManualInsertion");

                entity.Property(e => e.ContractManualInsertionId).HasColumnName("ContractManualInsertion_Id");

                entity.Property(e => e.UsersId).HasColumnName("Users_Id");
            });

            modelBuilder.Entity<RelationUsersDb34>(entity =>
            {
                entity.ToTable("Relation_users_db34");

                entity.Property(e => e.Db34Id).HasColumnName("db34_Id");

                entity.Property(e => e.UsersId).HasColumnName("users_Id");
            });

            modelBuilder.Entity<RelationUsersEditorRatingRegisterRatingEditor>(entity =>
            {
                entity.ToTable("Relation_Users_EditorRating_RegisterRatingEditor");

                entity.Property(e => e.EditorRatingRegisterRatingEditorId).HasColumnName("EditorRating_RegisterRatingEditor_Id");

                entity.Property(e => e.UsersId).HasColumnName("Users_Id");
            });

            modelBuilder.Entity<RelationUsersGreenHologramDeclareFee>(entity =>
            {
                entity.ToTable("Relation_Users_GreenHologram_DeclareFee");

                entity.Property(e => e.GreenHologramDeclareFeeId).HasColumnName("GreenHologram_DeclareFee_Id");

                entity.Property(e => e.UsersId).HasColumnName("Users_Id");
            });

            modelBuilder.Entity<RelationUsersHoldingDisseminationMeetingDissemination>(entity =>
            {
                entity.ToTable("Relation_Users_HoldingDissemination_MeetingDissemination");

                entity.Property(e => e.HoldingDisseminationMeetingDisseminationId).HasColumnName("HoldingDissemination_MeetingDissemination_Id");

                entity.Property(e => e.UsersId).HasColumnName("Users_Id");
            });

            modelBuilder.Entity<RelationUsersHoldingDisseminationRecordResults>(entity =>
            {
                entity.ToTable("Relation_Users_HoldingDissemination_RecordResults");

                entity.Property(e => e.HoldingDisseminationRecordResultsId).HasColumnName("HoldingDissemination_RecordResults_Id");

                entity.Property(e => e.UsersId).HasColumnName("Users_Id");
            });

            modelBuilder.Entity<RelationUsersMobileGamingLicenseForeignCheckGameRatings>(entity =>
            {
                entity.ToTable("Relation_Users_MobileGamingLicenseForeign_CheckGameRatings");

                entity.Property(e => e.MobileGamingLicenseForeignCheckGameRatingsId).HasColumnName("MobileGamingLicenseForeign_CheckGameRatings_Id");

                entity.Property(e => e.UsersId).HasColumnName("Users_Id");
            });

            modelBuilder.Entity<RelationValetUploadsValetChecking>(entity =>
            {
                entity.ToTable("Relation_ValetUploads_ValetChecking");

                entity.Property(e => e.ValetCheckingId).HasColumnName("ValetChecking_Id");

                entity.Property(e => e.ValetUploadsId).HasColumnName("ValetUploads_Id");

                entity.HasOne(d => d.ValetChecking)
                    .WithMany(p => p.RelationValetUploadsValetChecking)
                    .HasForeignKey(d => d.ValetCheckingId)
                    .HasConstraintName("FK__Relation___Valet__7251D655");

                entity.HasOne(d => d.ValetUploads)
                    .WithMany(p => p.RelationValetUploadsValetChecking)
                    .HasForeignKey(d => d.ValetUploadsId)
                    .HasConstraintName("FK__Relation___Valet__715DB21C");
            });

            modelBuilder.Entity<RelationVersionInsertDecide>(entity =>
            {
                entity.ToTable("Relation__versionInsertDecide");

                entity.Property(e => e.Id1).HasColumnName("_Id");

                entity.Property(e => e.VersionInsertDecideId).HasColumnName("versionInsertDecide_Id");
            });

            modelBuilder.Entity<RelationWorFromInsertSubWorkFlowFormInsertion>(entity =>
            {
                entity.ToTable("Relation_worFromInsertSub_workFlowFormInsertion");

                entity.Property(e => e.WorFromInsertSubId).HasColumnName("worFromInsertSub_Id");

                entity.Property(e => e.WorkFlowFormInsertionId).HasColumnName("workFlowFormInsertion_Id");
            });

            modelBuilder.Entity<RelationZdffTest>(entity =>
            {
                entity.ToTable("Relation_zdff_test");

                entity.Property(e => e.TestId).HasColumnName("test_Id");

                entity.Property(e => e.ZdffId).HasColumnName("zdff_Id");
            });

            modelBuilder.Entity<ReportConditions>(entity =>
            {
                entity.HasIndex(e => e.TblReportId)
                    .HasName("IX_TblReport_Id");

                entity.Property(e => e.ReportDbid).HasColumnName("ReportDBId");

                entity.Property(e => e.TblReportId).HasColumnName("tblReport_Id");

                entity.Property(e => e.Value).HasColumnName("value");

                entity.HasOne(d => d.TblReport)
                    .WithMany(p => p.ReportConditions)
                    .HasForeignKey(d => d.TblReportId)
                    .HasConstraintName("FK_dbo.tblFilterings_dbo.tblReports_tblReport_Id");
            });

            modelBuilder.Entity<Reports>(entity =>
            {
                entity.Property(e => e.FieldChartType).HasDefaultValueSql("((0))");

                entity.Property(e => e.SettingId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ReportSettings>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ReportTblContestLicenses>(entity =>
            {
                entity.ToTable("reportTbl_ContestLicenses");

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.ConstestEndDate).HasMaxLength(50);

                entity.Property(e => e.ContestAddress).HasMaxLength(500);

                entity.Property(e => e.ContestStartDate).HasMaxLength(50);

                entity.Property(e => e.GameName).HasMaxLength(1000);

                entity.Property(e => e.IssueDate).HasMaxLength(50);

                entity.Property(e => e.LicenseNumber).HasMaxLength(50);

                entity.Property(e => e.RequestDate).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportTblOnlineContestLicenses>(entity =>
            {
                entity.ToTable("reportTbl_OnlineContestLicenses");

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.ContestAddress).HasMaxLength(500);

                entity.Property(e => e.ContestEndDate).HasMaxLength(50);

                entity.Property(e => e.ContestStartDate).HasMaxLength(50);

                entity.Property(e => e.GameName).HasMaxLength(1000);

                entity.Property(e => e.IssueDate).HasMaxLength(50);

                entity.Property(e => e.LicenseNumber).HasMaxLength(50);

                entity.Property(e => e.RequestDate).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportTblPhysicalPublishLicenses>(entity =>
            {
                entity.ToTable("reportTbl_PhysicalPublishLicenses");

                entity.Property(e => e.Age).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.Count).HasMaxLength(50);

                entity.Property(e => e.Format).HasMaxLength(50);

                entity.Property(e => e.GameTitle).HasMaxLength(500);

                entity.Property(e => e.LicenseNumber).HasMaxLength(500);

                entity.Property(e => e.Os)
                    .HasColumnName("OS")
                    .HasMaxLength(50);

                entity.Property(e => e.SourceType).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportTblPhysicalPublishLicensesAuc>(entity =>
            {
                entity.ToTable("reportTbl_PhysicalPublishLicensesAuc");

                entity.Property(e => e.Age).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.Count).HasMaxLength(50);

                entity.Property(e => e.Format).HasMaxLength(50);

                entity.Property(e => e.GameTitle).HasMaxLength(500);

                entity.Property(e => e.LicenseNumber).HasMaxLength(500);

                entity.Property(e => e.Os)
                    .HasColumnName("OS")
                    .HasMaxLength(50);

                entity.Property(e => e.SourceType).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportTblProductionLicenses>(entity =>
            {
                entity.ToTable("reportTbl_ProductionLicenses");

                entity.Property(e => e.BirthCertificateCity).HasMaxLength(100);

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.FathersName).HasMaxLength(500);

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(100);

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductionLicense).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportTblSingleUseInstitutes>(entity =>
            {
                entity.ToTable("reportTbl_SingleUseInstitutes");

                entity.Property(e => e.DirectorResponsibleFname)
                    .HasColumnName("DirectorResponsibleFName")
                    .HasMaxLength(50);

                entity.Property(e => e.DirectorResponsibleLname)
                    .HasColumnName("DirectorResponsibleLName")
                    .HasMaxLength(50);

                entity.Property(e => e.InstituteAddress).HasMaxLength(500);

                entity.Property(e => e.InstituteName).HasMaxLength(50);

                entity.Property(e => e.InstituteRegistrationDate).HasMaxLength(50);

                entity.Property(e => e.InstituteStatuteNumber).HasMaxLength(50);

                entity.Property(e => e.IssueDate).HasMaxLength(50);

                entity.Property(e => e.LicenseNumber).HasMaxLength(50);

                entity.Property(e => e.ValidPeriod).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportTblSupplyLicenses>(entity =>
            {
                entity.ToTable("reportTbl_SupplyLicenses");

                entity.Property(e => e.BirthCertificateCity).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.FathersName).HasMaxLength(500);

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.IssueDate).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.LicenseNumber).HasMaxLength(50);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RequestConfirmationForm>(entity =>
            {
                entity.Property(e => e.AuditStatusRequestConfirmationForm).HasColumnName("AuditStatus_RequestConfirmationForm");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.CreatorRequestConfirmationForm).HasColumnName("Creator_RequestConfirmationForm");

                entity.Property(e => e.InstanceIdRequestConfirmationForm).HasColumnName("InstanceId_RequestConfirmationForm");

                entity.Property(e => e.InstanceSridRequestConfirmationForm).HasColumnName("InstanceSRId_RequestConfirmationForm");

                entity.Property(e => e.IpRequestConfirmationForm).HasColumnName("IP_RequestConfirmationForm");

                entity.Property(e => e.RegistrationDateRequestConfirmationForm).HasColumnName("RegistrationDate_RequestConfirmationForm");

                entity.Property(e => e.RegistrationStatusRequestConfirmationForm).HasColumnName("RegistrationStatus_RequestConfirmationForm");

                entity.Property(e => e.RegistrationTimeRequestConfirmationForm).HasColumnName("RegistrationTime_RequestConfirmationForm");
            });

            modelBuilder.Entity<RequestPaymentCeoreview>(entity =>
            {
                entity.ToTable("RequestPayment_CEOReview");

                entity.Property(e => e.AuditStatusRequestPaymentCeoreview).HasColumnName("AuditStatus_RequestPayment_CEOReview");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorRequestPaymentCeoreview).HasColumnName("Creator_RequestPayment_CEOReview");

                entity.Property(e => e.DdlResultOfReview).HasColumnName("ddlResultOfReview");

                entity.Property(e => e.InstanceIdRequestPaymentCeoreview).HasColumnName("InstanceId_RequestPayment_CEOReview");

                entity.Property(e => e.InstanceSridRequestPaymentCeoreview).HasColumnName("InstanceSRId_RequestPayment_CEOReview");

                entity.Property(e => e.IpRequestPaymentCeoreview).HasColumnName("IP_RequestPayment_CEOReview");

                entity.Property(e => e.RegistrationDateRequestPaymentCeoreview).HasColumnName("RegistrationDate_RequestPayment_CEOReview");

                entity.Property(e => e.RegistrationStatusRequestPaymentCeoreview).HasColumnName("RegistrationStatus_RequestPayment_CEOReview");

                entity.Property(e => e.RegistrationTimeRequestPaymentCeoreview).HasColumnName("RegistrationTime_RequestPayment_CEOReview");
            });

            modelBuilder.Entity<RequestPaymentCheckPropertyRegistration>(entity =>
            {
                entity.ToTable("RequestPayment_CheckPropertyRegistration");

                entity.Property(e => e.AuditStatusRequestPaymentCheckPropertyRegistration).HasColumnName("AuditStatus_RequestPayment_CheckPropertyRegistration");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorRequestPaymentCheckPropertyRegistration).HasColumnName("Creator_RequestPayment_CheckPropertyRegistration");

                entity.Property(e => e.DdlPropertyRegistration).HasColumnName("ddlPropertyRegistration");

                entity.Property(e => e.InstanceIdRequestPaymentCheckPropertyRegistration).HasColumnName("InstanceId_RequestPayment_CheckPropertyRegistration");

                entity.Property(e => e.InstanceSridRequestPaymentCheckPropertyRegistration).HasColumnName("InstanceSRId_RequestPayment_CheckPropertyRegistration");

                entity.Property(e => e.IpRequestPaymentCheckPropertyRegistration).HasColumnName("IP_RequestPayment_CheckPropertyRegistration");

                entity.Property(e => e.RegistrationDateRequestPaymentCheckPropertyRegistration).HasColumnName("RegistrationDate_RequestPayment_CheckPropertyRegistration");

                entity.Property(e => e.RegistrationStatusRequestPaymentCheckPropertyRegistration).HasColumnName("RegistrationStatus_RequestPayment_CheckPropertyRegistration");

                entity.Property(e => e.RegistrationTimeRequestPaymentCheckPropertyRegistration).HasColumnName("RegistrationTime_RequestPayment_CheckPropertyRegistration");
            });

            modelBuilder.Entity<RequestPaymentDocumentationOfDeliveryCheck>(entity =>
            {
                entity.ToTable("RequestPayment_DocumentationOfDeliveryCheck");

                entity.Property(e => e.AuditStatusRequestPaymentDocumentationOfDeliveryCheck).HasColumnName("AuditStatus_RequestPayment_DocumentationOfDeliveryCheck");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorRequestPaymentDocumentationOfDeliveryCheck).HasColumnName("Creator_RequestPayment_DocumentationOfDeliveryCheck");

                entity.Property(e => e.InstanceIdRequestPaymentDocumentationOfDeliveryCheck).HasColumnName("InstanceId_RequestPayment_DocumentationOfDeliveryCheck");

                entity.Property(e => e.InstanceSridRequestPaymentDocumentationOfDeliveryCheck).HasColumnName("InstanceSRId_RequestPayment_DocumentationOfDeliveryCheck");

                entity.Property(e => e.IpRequestPaymentDocumentationOfDeliveryCheck).HasColumnName("IP_RequestPayment_DocumentationOfDeliveryCheck");

                entity.Property(e => e.RegistrationDateRequestPaymentDocumentationOfDeliveryCheck).HasColumnName("RegistrationDate_RequestPayment_DocumentationOfDeliveryCheck");

                entity.Property(e => e.RegistrationStatusRequestPaymentDocumentationOfDeliveryCheck).HasColumnName("RegistrationStatus_RequestPayment_DocumentationOfDeliveryCheck");

                entity.Property(e => e.RegistrationTimeRequestPaymentDocumentationOfDeliveryCheck).HasColumnName("RegistrationTime_RequestPayment_DocumentationOfDeliveryCheck");

                entity.Property(e => e.UplSignedReceiptImage).HasColumnName("uplSignedReceiptImage");
            });

            modelBuilder.Entity<RequestPaymentFinancialDeputyReview>(entity =>
            {
                entity.ToTable("RequestPayment_FinancialDeputyReview");

                entity.Property(e => e.AuditStatusRequestPaymentFinancialDeputyReview).HasColumnName("AuditStatus_RequestPayment_FinancialDeputyReview");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorRequestPaymentFinancialDeputyReview).HasColumnName("Creator_RequestPayment_FinancialDeputyReview");

                entity.Property(e => e.DdlResultOfReview).HasColumnName("ddlResultOfReview");

                entity.Property(e => e.InstanceIdRequestPaymentFinancialDeputyReview).HasColumnName("InstanceId_RequestPayment_FinancialDeputyReview");

                entity.Property(e => e.InstanceSridRequestPaymentFinancialDeputyReview).HasColumnName("InstanceSRId_RequestPayment_FinancialDeputyReview");

                entity.Property(e => e.IpRequestPaymentFinancialDeputyReview).HasColumnName("IP_RequestPayment_FinancialDeputyReview");

                entity.Property(e => e.RegistrationDateRequestPaymentFinancialDeputyReview).HasColumnName("RegistrationDate_RequestPayment_FinancialDeputyReview");

                entity.Property(e => e.RegistrationStatusRequestPaymentFinancialDeputyReview).HasColumnName("RegistrationStatus_RequestPayment_FinancialDeputyReview");

                entity.Property(e => e.RegistrationTimeRequestPaymentFinancialDeputyReview).HasColumnName("RegistrationTime_RequestPayment_FinancialDeputyReview");
            });

            modelBuilder.Entity<RequestPaymentFinancialManagerReview>(entity =>
            {
                entity.ToTable("RequestPayment_FinancialManagerReview");

                entity.Property(e => e.AuditStatusRequestPaymentFinancialManagerReview).HasColumnName("AuditStatus_RequestPayment_FinancialManagerReview");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorRequestPaymentFinancialManagerReview).HasColumnName("Creator_RequestPayment_FinancialManagerReview");

                entity.Property(e => e.DdlResultOfReview).HasColumnName("ddlResultOfReview");

                entity.Property(e => e.InstanceIdRequestPaymentFinancialManagerReview).HasColumnName("InstanceId_RequestPayment_FinancialManagerReview");

                entity.Property(e => e.InstanceSridRequestPaymentFinancialManagerReview).HasColumnName("InstanceSRId_RequestPayment_FinancialManagerReview");

                entity.Property(e => e.IpRequestPaymentFinancialManagerReview).HasColumnName("IP_RequestPayment_FinancialManagerReview");

                entity.Property(e => e.RegistrationDateRequestPaymentFinancialManagerReview).HasColumnName("RegistrationDate_RequestPayment_FinancialManagerReview");

                entity.Property(e => e.RegistrationStatusRequestPaymentFinancialManagerReview).HasColumnName("RegistrationStatus_RequestPayment_FinancialManagerReview");

                entity.Property(e => e.RegistrationTimeRequestPaymentFinancialManagerReview).HasColumnName("RegistrationTime_RequestPayment_FinancialManagerReview");
            });

            modelBuilder.Entity<RequestPaymentRecordFinancialDocuments>(entity =>
            {
                entity.ToTable("RequestPayment_RecordFinancialDocuments");

                entity.Property(e => e.AuditStatusRequestPaymentRecordFinancialDocuments).HasColumnName("AuditStatus_RequestPayment_RecordFinancialDocuments");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorRequestPaymentRecordFinancialDocuments).HasColumnName("Creator_RequestPayment_RecordFinancialDocuments");

                entity.Property(e => e.InstanceIdRequestPaymentRecordFinancialDocuments).HasColumnName("InstanceId_RequestPayment_RecordFinancialDocuments");

                entity.Property(e => e.InstanceSridRequestPaymentRecordFinancialDocuments).HasColumnName("InstanceSRId_RequestPayment_RecordFinancialDocuments");

                entity.Property(e => e.IpRequestPaymentRecordFinancialDocuments).HasColumnName("IP_RequestPayment_RecordFinancialDocuments");

                entity.Property(e => e.RegistrationDateRequestPaymentRecordFinancialDocuments).HasColumnName("RegistrationDate_RequestPayment_RecordFinancialDocuments");

                entity.Property(e => e.RegistrationStatusRequestPaymentRecordFinancialDocuments).HasColumnName("RegistrationStatus_RequestPayment_RecordFinancialDocuments");

                entity.Property(e => e.RegistrationTimeRequestPaymentRecordFinancialDocuments).HasColumnName("RegistrationTime_RequestPayment_RecordFinancialDocuments");

                entity.Property(e => e.UplCheckedSignatureImage).HasColumnName("uplCheckedSignatureImage");

                entity.Property(e => e.UplOrderConfirmedPayment).HasColumnName("uplOrderConfirmedPayment");
            });

            modelBuilder.Entity<RequestPaymentSubmitApplication>(entity =>
            {
                entity.ToTable("RequestPayment_SubmitApplication");

                entity.Property(e => e.AuditStatusRequestPaymentSubmitApplication).HasColumnName("AuditStatus_RequestPayment_SubmitApplication");

                entity.Property(e => e.CreatorRequestPaymentSubmitApplication).HasColumnName("Creator_RequestPayment_SubmitApplication");

                entity.Property(e => e.InstanceIdRequestPaymentSubmitApplication).HasColumnName("InstanceId_RequestPayment_SubmitApplication");

                entity.Property(e => e.InstanceSridRequestPaymentSubmitApplication).HasColumnName("InstanceSRId_RequestPayment_SubmitApplication");

                entity.Property(e => e.IpRequestPaymentSubmitApplication).HasColumnName("IP_RequestPayment_SubmitApplication");

                entity.Property(e => e.NumAmountOfMoney).HasColumnName("numAmountOfMoney");

                entity.Property(e => e.RegistrationDateRequestPaymentSubmitApplication).HasColumnName("RegistrationDate_RequestPayment_SubmitApplication");

                entity.Property(e => e.RegistrationStatusRequestPaymentSubmitApplication).HasColumnName("RegistrationStatus_RequestPayment_SubmitApplication");

                entity.Property(e => e.RegistrationTimeRequestPaymentSubmitApplication).HasColumnName("RegistrationTime_RequestPayment_SubmitApplication");

                entity.Property(e => e.TxtPaymentSubject).HasColumnName("txtPaymentSubject");

                entity.Property(e => e.UplPaymentDocumentation).HasColumnName("uplPaymentDocumentation");
            });

            modelBuilder.Entity<ReviewTheEditOfAuctionItems>(entity =>
            {
                entity.Property(e => e.AuditStatusReviewTheEditOfAuctionItems).HasColumnName("AuditStatus_ReviewTheEditOfAuctionItems");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorReviewTheEditOfAuctionItems).HasColumnName("Creator_ReviewTheEditOfAuctionItems");

                entity.Property(e => e.DdlResultOfReview).HasColumnName("ddlResultOfReview");

                entity.Property(e => e.InstanceIdReviewTheEditOfAuctionItems).HasColumnName("InstanceId_ReviewTheEditOfAuctionItems");

                entity.Property(e => e.InstanceSridReviewTheEditOfAuctionItems).HasColumnName("InstanceSRId_ReviewTheEditOfAuctionItems");

                entity.Property(e => e.IpReviewTheEditOfAuctionItems).HasColumnName("IP_ReviewTheEditOfAuctionItems");

                entity.Property(e => e.RegistrationDateReviewTheEditOfAuctionItems).HasColumnName("RegistrationDate_ReviewTheEditOfAuctionItems");

                entity.Property(e => e.RegistrationStatusReviewTheEditOfAuctionItems).HasColumnName("RegistrationStatus_ReviewTheEditOfAuctionItems");

                entity.Property(e => e.RegistrationTimeReviewTheEditOfAuctionItems).HasColumnName("RegistrationTime_ReviewTheEditOfAuctionItems");
            });

            modelBuilder.Entity<RolePermissions>(entity =>
            {
                entity.HasKey(e => e.RolePermissionId);

                entity.HasIndex(e => new { e.RoleId, e.PermissionId })
                    .HasName("IX_RolePermission_Unique")
                    .IsUnique();
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.HasKey(e => e.RoleId);

                entity.Property(e => e.PostId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Sabtezamanehozoorfiziki>(entity =>
            {
                entity.ToTable("sabtezamanehozoorfiziki");

                entity.Property(e => e.AuditStatusSabtezamanehozoorfiziki).HasColumnName("AuditStatus_sabtezamanehozoorfiziki");

                entity.Property(e => e.CreatorSabtezamanehozoorfiziki).HasColumnName("Creator_sabtezamanehozoorfiziki");

                entity.Property(e => e.InstanceIdSabtezamanehozoorfiziki).HasColumnName("InstanceId_sabtezamanehozoorfiziki");

                entity.Property(e => e.InstanceSridSabtezamanehozoorfiziki).HasColumnName("InstanceSRId_sabtezamanehozoorfiziki");

                entity.Property(e => e.IpSabtezamanehozoorfiziki).HasColumnName("IP_sabtezamanehozoorfiziki");

                entity.Property(e => e.RegistrationDateSabtezamanehozoorfiziki).HasColumnName("RegistrationDate_sabtezamanehozoorfiziki");

                entity.Property(e => e.RegistrationStatusSabtezamanehozoorfiziki).HasColumnName("RegistrationStatus_sabtezamanehozoorfiziki");

                entity.Property(e => e.RegistrationTimeSabtezamanehozoorfiziki).HasColumnName("RegistrationTime_sabtezamanehozoorfiziki");

                entity.Property(e => e.TxaZaman).HasColumnName("txaZaman");
            });

            modelBuilder.Entity<SelectEditorReviewSuggestions2>(entity =>
            {
                entity.ToTable("SelectEditor_ReviewSuggestions2");

                entity.Property(e => e.AuditStatusSelectEditorReviewSuggestions2).HasColumnName("AuditStatus_SelectEditor_ReviewSuggestions2");

                entity.Property(e => e.CreatorSelectEditorReviewSuggestions2).HasColumnName("Creator_SelectEditor_ReviewSuggestions2");

                entity.Property(e => e.InstanceIdSelectEditorReviewSuggestions2).HasColumnName("InstanceId_SelectEditor_ReviewSuggestions2");

                entity.Property(e => e.InstanceSridSelectEditorReviewSuggestions2).HasColumnName("InstanceSRId_SelectEditor_ReviewSuggestions2");

                entity.Property(e => e.IpSelectEditorReviewSuggestions2).HasColumnName("IP_SelectEditor_ReviewSuggestions2");

                entity.Property(e => e.RegistrationDateSelectEditorReviewSuggestions2).HasColumnName("RegistrationDate_SelectEditor_ReviewSuggestions2");

                entity.Property(e => e.RegistrationStatusSelectEditorReviewSuggestions2).HasColumnName("RegistrationStatus_SelectEditor_ReviewSuggestions2");

                entity.Property(e => e.RegistrationTimeSelectEditorReviewSuggestions2).HasColumnName("RegistrationTime_SelectEditor_ReviewSuggestions2");
            });

            modelBuilder.Entity<SelectEditorSelectGame>(entity =>
            {
                entity.ToTable("SelectEditor_SelectGame");

                entity.Property(e => e.AuditStatusSelectEditorSelectGame).HasColumnName("AuditStatus_SelectEditor_SelectGame");

                entity.Property(e => e.CreatorSelectEditorSelectGame).HasColumnName("Creator_SelectEditor_SelectGame");

                entity.Property(e => e.InstanceIdSelectEditorSelectGame).HasColumnName("InstanceId_SelectEditor_SelectGame");

                entity.Property(e => e.InstanceSridSelectEditorSelectGame).HasColumnName("InstanceSRId_SelectEditor_SelectGame");

                entity.Property(e => e.IpSelectEditorSelectGame).HasColumnName("IP_SelectEditor_SelectGame");

                entity.Property(e => e.RegistrationDateSelectEditorSelectGame).HasColumnName("RegistrationDate_SelectEditor_SelectGame");

                entity.Property(e => e.RegistrationStatusSelectEditorSelectGame).HasColumnName("RegistrationStatus_SelectEditor_SelectGame");

                entity.Property(e => e.RegistrationTimeSelectEditorSelectGame).HasColumnName("RegistrationTime_SelectEditor_SelectGame");
            });

            modelBuilder.Entity<SelectMyBosses>(entity =>
            {
                entity.Property(e => e.AuditStatusSelectMyBosses).HasColumnName("AuditStatus_SelectMyBosses");

                entity.Property(e => e.CreatorSelectMyBosses).HasColumnName("Creator_SelectMyBosses");

                entity.Property(e => e.InstanceIdSelectMyBosses).HasColumnName("InstanceId_SelectMyBosses");

                entity.Property(e => e.InstanceSridSelectMyBosses).HasColumnName("InstanceSRId_SelectMyBosses");

                entity.Property(e => e.IpSelectMyBosses).HasColumnName("IP_SelectMyBosses");

                entity.Property(e => e.RegistrationDateSelectMyBosses).HasColumnName("RegistrationDate_SelectMyBosses");

                entity.Property(e => e.RegistrationStatusSelectMyBosses).HasColumnName("RegistrationStatus_SelectMyBosses");

                entity.Property(e => e.RegistrationTimeSelectMyBosses).HasColumnName("RegistrationTime_SelectMyBosses");
            });

            modelBuilder.Entity<SendingGameSource>(entity =>
            {
                entity.Property(e => e.AuditStatusSendingGameSource).HasColumnName("AuditStatus_SendingGameSource");

                entity.Property(e => e.CreatorSendingGameSource).HasColumnName("Creator_SendingGameSource");

                entity.Property(e => e.InstanceIdSendingGameSource).HasColumnName("InstanceId_SendingGameSource");

                entity.Property(e => e.InstanceSridSendingGameSource).HasColumnName("InstanceSRId_SendingGameSource");

                entity.Property(e => e.IpSendingGameSource).HasColumnName("IP_SendingGameSource");

                entity.Property(e => e.RegistrationDateSendingGameSource).HasColumnName("RegistrationDate_SendingGameSource");

                entity.Property(e => e.RegistrationStatusSendingGameSource).HasColumnName("RegistrationStatus_SendingGameSource");

                entity.Property(e => e.RegistrationTimeSendingGameSource).HasColumnName("RegistrationTime_SendingGameSource");
            });

            modelBuilder.Entity<SendingMails>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.GroupIdSms).HasColumnName("GroupIdSMS");

                entity.Property(e => e.IsComplementaryOfFormSms).HasColumnName("IsComplementaryOfFormSMS");

                entity.Property(e => e.UserIdSms).HasColumnName("UserIdSMS");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.SendingMails)
                    .HasForeignKey<SendingMails>(d => d.Id)
                    .HasConstraintName("FK_dbo.SendingMails_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<SendingSms>(entity =>
            {
                entity.ToTable("SendingSMS");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.IsSelectedSms).HasColumnName("IsSelectedSMS");

                entity.Property(e => e.ReceiverSms).HasColumnName("ReceiverSMS");

                entity.Property(e => e.SenderSms).HasColumnName("SenderSMS");

                entity.Property(e => e.Smstext).HasColumnName("SMSText");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.SendingSms)
                    .HasForeignKey<SendingSms>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.SendingSMS_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<SeratingRequest>(entity =>
            {
                entity.ToTable("SERatingRequest");

                entity.Property(e => e.AuditStatusSeratingRequest).HasColumnName("AuditStatus_SERatingRequest");

                entity.Property(e => e.CreatorSeratingRequest).HasColumnName("Creator_SERatingRequest");

                entity.Property(e => e.InstanceIdSeratingRequest).HasColumnName("InstanceId_SERatingRequest");

                entity.Property(e => e.InstanceSridSeratingRequest).HasColumnName("InstanceSRId_SERatingRequest");

                entity.Property(e => e.IpSeratingRequest).HasColumnName("IP_SERatingRequest");

                entity.Property(e => e.RegistrationDateSeratingRequest).HasColumnName("RegistrationDate_SERatingRequest");

                entity.Property(e => e.RegistrationStatusSeratingRequest).HasColumnName("RegistrationStatus_SERatingRequest");

                entity.Property(e => e.RegistrationTimeSeratingRequest).HasColumnName("RegistrationTime_SERatingRequest");
            });

            modelBuilder.Entity<ShowScoreAverage>(entity =>
            {
                entity.ToTable("showScoreAverage");

                entity.Property(e => e.AuditStatusShowScoreAverage).HasColumnName("AuditStatus_showScoreAverage");

                entity.Property(e => e.CreatorShowScoreAverage).HasColumnName("Creator_showScoreAverage");

                entity.Property(e => e.InstanceIdShowScoreAverage).HasColumnName("InstanceId_showScoreAverage");

                entity.Property(e => e.InstanceSridShowScoreAverage).HasColumnName("InstanceSRId_showScoreAverage");

                entity.Property(e => e.IpShowScoreAverage).HasColumnName("IP_showScoreAverage");

                entity.Property(e => e.RegistrationDateShowScoreAverage).HasColumnName("RegistrationDate_showScoreAverage");

                entity.Property(e => e.RegistrationStatusShowScoreAverage).HasColumnName("RegistrationStatus_showScoreAverage");

                entity.Property(e => e.RegistrationTimeShowScoreAverage).HasColumnName("RegistrationTime_showScoreAverage");
            });

            modelBuilder.Entity<SignUpExpertCompletedRegistration>(entity =>
            {
                entity.ToTable("SignUpExpert_CompletedRegistration");

                entity.Property(e => e.AuditStatusSignUpExpertCompletedRegistration).HasColumnName("AuditStatus_SignUpExpert_CompletedRegistration");

                entity.Property(e => e.CkeContact8).HasColumnName("ckeContact_8");

                entity.Property(e => e.CreatorSignUpExpertCompletedRegistration).HasColumnName("Creator_SignUpExpert_CompletedRegistration");

                entity.Property(e => e.DdlContact1).HasColumnName("ddlContact_1");

                entity.Property(e => e.DdlContact2).HasColumnName("ddlContact_2");

                entity.Property(e => e.DdlIndividual1).HasColumnName("ddlIndividual_1");

                entity.Property(e => e.DdlIndividual2).HasColumnName("ddlIndividual_2");

                entity.Property(e => e.InstanceIdSignUpExpertCompletedRegistration).HasColumnName("InstanceId_SignUpExpert_CompletedRegistration");

                entity.Property(e => e.InstanceSridSignUpExpertCompletedRegistration).HasColumnName("InstanceSRId_SignUpExpert_CompletedRegistration");

                entity.Property(e => e.IpSignUpExpertCompletedRegistration).HasColumnName("IP_SignUpExpert_CompletedRegistration");

                entity.Property(e => e.MailContact7).HasColumnName("mailContact_7");

                entity.Property(e => e.NumNationalCode).HasColumnName("numNationalCode");

                entity.Property(e => e.PdateIndividual4).HasColumnName("pdateIndividual_4");

                entity.Property(e => e.PdateIndividual4Gregorian)
                    .HasColumnName("pdateIndividual_4_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateSignUpExpertCompletedRegistration).HasColumnName("RegistrationDate_SignUpExpert_CompletedRegistration");

                entity.Property(e => e.RegistrationStatusSignUpExpertCompletedRegistration).HasColumnName("RegistrationStatus_SignUpExpert_CompletedRegistration");

                entity.Property(e => e.RegistrationTimeSignUpExpertCompletedRegistration).HasColumnName("RegistrationTime_SignUpExpert_CompletedRegistration");

                entity.Property(e => e.TxtContact3).HasColumnName("txtContact_3");

                entity.Property(e => e.TxtContact4).HasColumnName("txtContact_4");

                entity.Property(e => e.TxtContact5).HasColumnName("txtContact_5");

                entity.Property(e => e.TxtContact6).HasColumnName("txtContact_6");

                entity.Property(e => e.TxtIndividual3).HasColumnName("txtIndividual_3");

                entity.Property(e => e.TxtIndividual5).HasColumnName("txtIndividual_5");

                entity.Property(e => e.TxtLastName).HasColumnName("txtLastName");

                entity.Property(e => e.TxtName).HasColumnName("txtName");

                entity.Property(e => e.UplRecords1).HasColumnName("uplRecords_1");

                entity.Property(e => e.UplRecords2).HasColumnName("uplRecords_2");

                entity.Property(e => e.UplRecords3).HasColumnName("uplRecords_3");

                entity.Property(e => e.UplRecords4).HasColumnName("uplRecords_4");
            });

            modelBuilder.Entity<SignUpExpertCompletedRegistration1>(entity =>
            {
                entity.ToTable("SignUpExpert_CompletedRegistration1");

                entity.Property(e => e.AuditStatusSignUpExpertCompletedRegistration1).HasColumnName("AuditStatus_SignUpExpert_CompletedRegistration1");

                entity.Property(e => e.CkeEvaluator16).HasColumnName("ckeEvaluator_16");

                entity.Property(e => e.CreatorSignUpExpertCompletedRegistration1).HasColumnName("Creator_SignUpExpert_CompletedRegistration1");

                entity.Property(e => e.Ddl2Evaluator10).HasColumnName("ddl2Evaluator_10");

                entity.Property(e => e.DdlEvaluator4).HasColumnName("ddlEvaluator_4");

                entity.Property(e => e.DdlEvaluator5).HasColumnName("ddlEvaluator_5");

                entity.Property(e => e.DdlEvaluator9).HasColumnName("ddlEvaluator_9");

                entity.Property(e => e.InstanceIdSignUpExpertCompletedRegistration1).HasColumnName("InstanceId_SignUpExpert_CompletedRegistration1");

                entity.Property(e => e.InstanceSridSignUpExpertCompletedRegistration1).HasColumnName("InstanceSRId_SignUpExpert_CompletedRegistration1");

                entity.Property(e => e.IpSignUpExpertCompletedRegistration1).HasColumnName("IP_SignUpExpert_CompletedRegistration1");

                entity.Property(e => e.MailEvaluator15).HasColumnName("mailEvaluator_15");

                entity.Property(e => e.PdateEvaluator7).HasColumnName("pdateEvaluator_7");

                entity.Property(e => e.PdateEvaluator7Gregorian)
                    .HasColumnName("pdateEvaluator_7_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateSignUpExpertCompletedRegistration1).HasColumnName("RegistrationDate_SignUpExpert_CompletedRegistration1");

                entity.Property(e => e.RegistrationStatusSignUpExpertCompletedRegistration1).HasColumnName("RegistrationStatus_SignUpExpert_CompletedRegistration1");

                entity.Property(e => e.RegistrationTimeSignUpExpertCompletedRegistration1).HasColumnName("RegistrationTime_SignUpExpert_CompletedRegistration1");

                entity.Property(e => e.TxtEvaluator1).HasColumnName("txtEvaluator_1");

                entity.Property(e => e.TxtEvaluator11).HasColumnName("txtEvaluator_11");

                entity.Property(e => e.TxtEvaluator12).HasColumnName("txtEvaluator_12");

                entity.Property(e => e.TxtEvaluator13).HasColumnName("txtEvaluator_13");

                entity.Property(e => e.TxtEvaluator14).HasColumnName("txtEvaluator_14");

                entity.Property(e => e.TxtEvaluator2).HasColumnName("txtEvaluator_2");

                entity.Property(e => e.TxtEvaluator3).HasColumnName("txtEvaluator_3");

                entity.Property(e => e.TxtEvaluator6).HasColumnName("txtEvaluator_6");

                entity.Property(e => e.TxtEvaluator8).HasColumnName("txtEvaluator_8");

                entity.Property(e => e.UplEvaluator17).HasColumnName("uplEvaluator_17");

                entity.Property(e => e.UplEvaluator18).HasColumnName("uplEvaluator_18");

                entity.Property(e => e.UplEvaluator19).HasColumnName("uplEvaluator_19");

                entity.Property(e => e.UplEvaluator20).HasColumnName("uplEvaluator_20");
            });

            modelBuilder.Entity<SignUpExpertCouncilReview>(entity =>
            {
                entity.ToTable("SignUpExpert_CouncilReview");

                entity.Property(e => e.AuditStatusSignUpExpertCouncilReview).HasColumnName("AuditStatus_SignUpExpert_CouncilReview");

                entity.Property(e => e.CkeDisapproveRequest).HasColumnName("ckeDisapproveRequest");

                entity.Property(e => e.CreatorSignUpExpertCouncilReview).HasColumnName("Creator_SignUpExpert_CouncilReview");

                entity.Property(e => e.InstanceIdSignUpExpertCouncilReview).HasColumnName("InstanceId_SignUpExpert_CouncilReview");

                entity.Property(e => e.InstanceSridSignUpExpertCouncilReview).HasColumnName("InstanceSRId_SignUpExpert_CouncilReview");

                entity.Property(e => e.IpSignUpExpertCouncilReview).HasColumnName("IP_SignUpExpert_CouncilReview");

                entity.Property(e => e.RegistrationDateSignUpExpertCouncilReview).HasColumnName("RegistrationDate_SignUpExpert_CouncilReview");

                entity.Property(e => e.RegistrationStatusSignUpExpertCouncilReview).HasColumnName("RegistrationStatus_SignUpExpert_CouncilReview");

                entity.Property(e => e.RegistrationTimeSignUpExpertCouncilReview).HasColumnName("RegistrationTime_SignUpExpert_CouncilReview");
            });

            modelBuilder.Entity<SimilarGamesListPr>(entity =>
            {
                entity.ToTable("SimilarGamesListPR");

                entity.Property(e => e.AuditStatusSimilarGamesListPr).HasColumnName("AuditStatus_SimilarGamesListPR");

                entity.Property(e => e.CreatorSimilarGamesListPr).HasColumnName("Creator_SimilarGamesListPR");

                entity.Property(e => e.DdlCompanyRepeat).HasColumnName("ddlCompanyRepeat");

                entity.Property(e => e.DdlIsRepeat).HasColumnName("ddl_isRepeat");

                entity.Property(e => e.InstanceIdSimilarGamesListPr).HasColumnName("InstanceId_SimilarGamesListPR");

                entity.Property(e => e.InstanceSridSimilarGamesListPr).HasColumnName("InstanceSRId_SimilarGamesListPR");

                entity.Property(e => e.IpSimilarGamesListPr).HasColumnName("IP_SimilarGamesListPR");

                entity.Property(e => e.RegistrationDateSimilarGamesListPr).HasColumnName("RegistrationDate_SimilarGamesListPR");

                entity.Property(e => e.RegistrationStatusSimilarGamesListPr).HasColumnName("RegistrationStatus_SimilarGamesListPR");

                entity.Property(e => e.RegistrationTimeSimilarGamesListPr).HasColumnName("RegistrationTime_SimilarGamesListPR");

                entity.Property(e => e.TxtCn).HasColumnName("TxtCN");
            });

            modelBuilder.Entity<SimilarVersions>(entity =>
            {
                entity.Property(e => e.AuditStatusSimilarVersions).HasColumnName("AuditStatus_SimilarVersions");

                entity.Property(e => e.CreatorSimilarVersions).HasColumnName("Creator_SimilarVersions");

                entity.Property(e => e.InstanceIdSimilarVersions).HasColumnName("InstanceId_SimilarVersions");

                entity.Property(e => e.InstanceSridSimilarVersions).HasColumnName("InstanceSRId_SimilarVersions");

                entity.Property(e => e.IpSimilarVersions).HasColumnName("IP_SimilarVersions");

                entity.Property(e => e.RegistrationDateSimilarVersions).HasColumnName("RegistrationDate_SimilarVersions");

                entity.Property(e => e.RegistrationStatusSimilarVersions).HasColumnName("RegistrationStatus_SimilarVersions");

                entity.Property(e => e.RegistrationTimeSimilarVersions).HasColumnName("RegistrationTime_SimilarVersions");
            });

            modelBuilder.Entity<SimilarVersionsSelect>(entity =>
            {
                entity.Property(e => e.AuditStatusSimilarVersionsSelect).HasColumnName("AuditStatus_SimilarVersionsSelect");

                entity.Property(e => e.CreatorSimilarVersionsSelect).HasColumnName("Creator_SimilarVersionsSelect");

                entity.Property(e => e.InstanceIdSimilarVersionsSelect).HasColumnName("InstanceId_SimilarVersionsSelect");

                entity.Property(e => e.InstanceSridSimilarVersionsSelect).HasColumnName("InstanceSRId_SimilarVersionsSelect");

                entity.Property(e => e.IpSimilarVersionsSelect).HasColumnName("IP_SimilarVersionsSelect");

                entity.Property(e => e.RegistrationDateSimilarVersionsSelect).HasColumnName("RegistrationDate_SimilarVersionsSelect");

                entity.Property(e => e.RegistrationStatusSimilarVersionsSelect).HasColumnName("RegistrationStatus_SimilarVersionsSelect");

                entity.Property(e => e.RegistrationTimeSimilarVersionsSelect).HasColumnName("RegistrationTime_SimilarVersionsSelect");
            });

            modelBuilder.Entity<SinglePurposeInstitutionProfile>(entity =>
            {
                entity.Property(e => e.AuditStatusSinglePurposeInstitutionProfile).HasColumnName("AuditStatus_SinglePurposeInstitutionProfile");

                entity.Property(e => e.ChkObligation).HasColumnName("chkObligation");

                entity.Property(e => e.ChkSubjectOfActivity).HasColumnName("chkSubjectOfActivity");

                entity.Property(e => e.CreatorSinglePurposeInstitutionProfile).HasColumnName("Creator_SinglePurposeInstitutionProfile");

                entity.Property(e => e.InstanceIdSinglePurposeInstitutionProfile).HasColumnName("InstanceId_SinglePurposeInstitutionProfile");

                entity.Property(e => e.InstanceSridSinglePurposeInstitutionProfile).HasColumnName("InstanceSRId_SinglePurposeInstitutionProfile");

                entity.Property(e => e.IpSinglePurposeInstitutionProfile).HasColumnName("IP_SinglePurposeInstitutionProfile");

                entity.Property(e => e.RegistrationDateSinglePurposeInstitutionProfile).HasColumnName("RegistrationDate_SinglePurposeInstitutionProfile");

                entity.Property(e => e.RegistrationStatusSinglePurposeInstitutionProfile).HasColumnName("RegistrationStatus_SinglePurposeInstitutionProfile");

                entity.Property(e => e.RegistrationTimeSinglePurposeInstitutionProfile).HasColumnName("RegistrationTime_SinglePurposeInstitutionProfile");

                entity.Property(e => e.TxaAddress).HasColumnName("txaAddress");

                entity.Property(e => e.TxaSummaryObjectives).HasColumnName("txaSummaryObjectives");

                entity.Property(e => e.TxtSuggestedName).HasColumnName("txtSuggestedName");

                entity.Property(e => e.TxtSuggestedName2).HasColumnName("txtSuggestedName2");

                entity.Property(e => e.TxtSuggestedNames3).HasColumnName("txtSuggestedNames3");
            });

            modelBuilder.Entity<SmsMessages>(entity =>
            {
                entity.Property(e => e.CreateDateTime).HasColumnType("datetime");

                entity.Property(e => e.SentDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Smspanels>(entity =>
            {
                entity.ToTable("SMSPanels");

                entity.Property(e => e.Apikey).HasColumnName("APIKey");
            });

            modelBuilder.Entity<SourceEratingRequestSubform>(entity =>
            {
                entity.ToTable("SourceERatingRequestSubform");

                entity.Property(e => e.AuditStatusSourceEratingRequestSubform).HasColumnName("AuditStatus_SourceERatingRequestSubform");

                entity.Property(e => e.CreatorSourceEratingRequestSubform).HasColumnName("Creator_SourceERatingRequestSubform");

                entity.Property(e => e.DdlPlatform).HasColumnName("ddlPlatform");

                entity.Property(e => e.DdlSourceType).HasColumnName("ddlSourceType");

                entity.Property(e => e.InstanceIdSourceEratingRequestSubform).HasColumnName("InstanceId_SourceERatingRequestSubform");

                entity.Property(e => e.InstanceSridSourceEratingRequestSubform).HasColumnName("InstanceSRId_SourceERatingRequestSubform");

                entity.Property(e => e.IpSourceEratingRequestSubform).HasColumnName("IP_SourceERatingRequestSubform");

                entity.Property(e => e.RegistrationDateSourceEratingRequestSubform).HasColumnName("RegistrationDate_SourceERatingRequestSubform");

                entity.Property(e => e.RegistrationStatusSourceEratingRequestSubform).HasColumnName("RegistrationStatus_SourceERatingRequestSubform");

                entity.Property(e => e.RegistrationTimeSourceEratingRequestSubform).HasColumnName("RegistrationTime_SourceERatingRequestSubform");

                entity.Property(e => e.TxtMediaSourceType).HasColumnName("txtMediaSourceType");

                entity.Property(e => e.TxtNumber).HasColumnName("txtNumber");

                entity.Property(e => e.TxtSite).HasColumnName("txtSite");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.SourceEratingRequestSubform)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SERatingRequest_SourceERatingRequestSubform");
            });

            modelBuilder.Entity<SourceMedia>(entity =>
            {
                entity.Property(e => e.AuditStatusSourceMedia).HasColumnName("AuditStatus_SourceMedia");

                entity.Property(e => e.CreatorSourceMedia).HasColumnName("Creator_SourceMedia");

                entity.Property(e => e.DdlMediaType).HasColumnName("ddlMediaType");

                entity.Property(e => e.InstanceIdSourceMedia).HasColumnName("InstanceId_SourceMedia");

                entity.Property(e => e.InstanceSridSourceMedia).HasColumnName("InstanceSRId_SourceMedia");

                entity.Property(e => e.IpSourceMedia).HasColumnName("IP_SourceMedia");

                entity.Property(e => e.RegistrationDateSourceMedia).HasColumnName("RegistrationDate_SourceMedia");

                entity.Property(e => e.RegistrationStatusSourceMedia).HasColumnName("RegistrationStatus_SourceMedia");

                entity.Property(e => e.RegistrationTimeSourceMedia).HasColumnName("RegistrationTime_SourceMedia");

                entity.Property(e => e.TxtMediaNumber).HasColumnName("txtMediaNumber");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.SourceMedia)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_GameInformation_SourceMedia");
            });

            modelBuilder.Entity<SourceRatingRequestSubform>(entity =>
            {
                entity.Property(e => e.AuditStatusSourceRatingRequestSubform).HasColumnName("AuditStatus_SourceRatingRequestSubform");

                entity.Property(e => e.CreatorSourceRatingRequestSubform).HasColumnName("Creator_SourceRatingRequestSubform");

                entity.Property(e => e.DdlSourceType).HasColumnName("ddlSourceType");

                entity.Property(e => e.DdllPlatform).HasColumnName("ddllPlatform");

                entity.Property(e => e.Ddlplatform).HasColumnName("ddlplatform");

                entity.Property(e => e.InstanceIdSourceRatingRequestSubform).HasColumnName("InstanceId_SourceRatingRequestSubform");

                entity.Property(e => e.InstanceSridSourceRatingRequestSubform).HasColumnName("InstanceSRId_SourceRatingRequestSubform");

                entity.Property(e => e.IpSourceRatingRequestSubform).HasColumnName("IP_SourceRatingRequestSubform");

                entity.Property(e => e.RegistrationDateSourceRatingRequestSubform).HasColumnName("RegistrationDate_SourceRatingRequestSubform");

                entity.Property(e => e.RegistrationStatusSourceRatingRequestSubform).HasColumnName("RegistrationStatus_SourceRatingRequestSubform");

                entity.Property(e => e.RegistrationTimeSourceRatingRequestSubform).HasColumnName("RegistrationTime_SourceRatingRequestSubform");

                entity.Property(e => e.TxtNumber).HasColumnName("txtNumber");

                entity.Property(e => e.TxtSrsite).HasColumnName("txtSRSite");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.SourceRatingRequestSubform)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SRatingRequest_SourceRatingRequestSubform");
            });

            modelBuilder.Entity<SponsorRegistrationCompletionSponsorRegistration>(entity =>
            {
                entity.ToTable("SponsorRegistration_CompletionSponsorRegistration");

                entity.Property(e => e.AuditStatusSponsorRegistrationCompletionSponsorRegistration).HasColumnName("AuditStatus_SponsorRegistration_CompletionSponsorRegistration");

                entity.Property(e => e.CkeSponsor5).HasColumnName("ckeSponsor_5");

                entity.Property(e => e.CreatorSponsorRegistrationCompletionSponsorRegistration).HasColumnName("Creator_SponsorRegistration_CompletionSponsorRegistration");

                entity.Property(e => e.GtblSponsor11).HasColumnName("gtblSponsor_11");

                entity.Property(e => e.InstanceIdSponsorRegistrationCompletionSponsorRegistration).HasColumnName("InstanceId_SponsorRegistration_CompletionSponsorRegistration");

                entity.Property(e => e.InstanceSridSponsorRegistrationCompletionSponsorRegistration).HasColumnName("InstanceSRId_SponsorRegistration_CompletionSponsorRegistration");

                entity.Property(e => e.IpSponsorRegistrationCompletionSponsorRegistration).HasColumnName("IP_SponsorRegistration_CompletionSponsorRegistration");

                entity.Property(e => e.MailSponsor10).HasColumnName("mailSponsor_10");

                entity.Property(e => e.MailSponsor3).HasColumnName("mailSponsor_3");

                entity.Property(e => e.RegistrationDateSponsorRegistrationCompletionSponsorRegistration).HasColumnName("RegistrationDate_SponsorRegistration_CompletionSponsorRegistration");

                entity.Property(e => e.RegistrationStatusSponsorRegistrationCompletionSponsorRegistration).HasColumnName("RegistrationStatus_SponsorRegistration_CompletionSponsorRegistration");

                entity.Property(e => e.RegistrationTimeSponsorRegistrationCompletionSponsorRegistration).HasColumnName("RegistrationTime_SponsorRegistration_CompletionSponsorRegistration");

                entity.Property(e => e.TxtSponsor1).HasColumnName("txtSponsor_1");

                entity.Property(e => e.TxtSponsor2).HasColumnName("txtSponsor_2");

                entity.Property(e => e.TxtSponsor4).HasColumnName("txtSponsor_4");

                entity.Property(e => e.TxtSponsor6).HasColumnName("txtSponsor_6");

                entity.Property(e => e.TxtSponsor7).HasColumnName("txtSponsor_7");

                entity.Property(e => e.TxtSponsor8).HasColumnName("txtSponsor_8");

                entity.Property(e => e.TxtSponsor9).HasColumnName("txtSponsor_9");

                entity.Property(e => e.UplSponsor12).HasColumnName("uplSponsor_12");
            });

            modelBuilder.Entity<SponsorRegistrationCouncilReview>(entity =>
            {
                entity.ToTable("SponsorRegistration_CouncilReview");

                entity.Property(e => e.AuditStatusSponsorRegistrationCouncilReview).HasColumnName("AuditStatus_SponsorRegistration_CouncilReview");

                entity.Property(e => e.CkeDisapproveRequest).HasColumnName("ckeDisapproveRequest");

                entity.Property(e => e.CreatorSponsorRegistrationCouncilReview).HasColumnName("Creator_SponsorRegistration_CouncilReview");

                entity.Property(e => e.InstanceIdSponsorRegistrationCouncilReview).HasColumnName("InstanceId_SponsorRegistration_CouncilReview");

                entity.Property(e => e.InstanceSridSponsorRegistrationCouncilReview).HasColumnName("InstanceSRId_SponsorRegistration_CouncilReview");

                entity.Property(e => e.IpSponsorRegistrationCouncilReview).HasColumnName("IP_SponsorRegistration_CouncilReview");

                entity.Property(e => e.RegistrationDateSponsorRegistrationCouncilReview).HasColumnName("RegistrationDate_SponsorRegistration_CouncilReview");

                entity.Property(e => e.RegistrationStatusSponsorRegistrationCouncilReview).HasColumnName("RegistrationStatus_SponsorRegistration_CouncilReview");

                entity.Property(e => e.RegistrationTimeSponsorRegistrationCouncilReview).HasColumnName("RegistrationTime_SponsorRegistration_CouncilReview");
            });

            modelBuilder.Entity<SratingRequest>(entity =>
            {
                entity.ToTable("SRatingRequest");

                entity.Property(e => e.AuditStatusSratingRequest).HasColumnName("AuditStatus_SRatingRequest");

                entity.Property(e => e.CreatorSratingRequest).HasColumnName("Creator_SRatingRequest");

                entity.Property(e => e.DdlLicenseType).HasColumnName("ddlLicenseType");

                entity.Property(e => e.InstanceIdSratingRequest).HasColumnName("InstanceId_SRatingRequest");

                entity.Property(e => e.InstanceSridSratingRequest).HasColumnName("InstanceSRId_SRatingRequest");

                entity.Property(e => e.IpSratingRequest).HasColumnName("IP_SRatingRequest");

                entity.Property(e => e.RegistrationDateSratingRequest).HasColumnName("RegistrationDate_SRatingRequest");

                entity.Property(e => e.RegistrationStatusSratingRequest).HasColumnName("RegistrationStatus_SRatingRequest");

                entity.Property(e => e.RegistrationTimeSratingRequest).HasColumnName("RegistrationTime_SRatingRequest");

                entity.Property(e => e.TxtGameName).HasColumnName("txtGameName");

                entity.Property(e => e.TxtSite).HasColumnName("txtSite");
            });

            modelBuilder.Entity<StatuteUpload>(entity =>
            {
                entity.Property(e => e.AuditStatusStatuteUpload).HasColumnName("AuditStatus_StatuteUpload");

                entity.Property(e => e.CreatorStatuteUpload).HasColumnName("Creator_StatuteUpload");

                entity.Property(e => e.InstanceIdStatuteUpload).HasColumnName("InstanceId_StatuteUpload");

                entity.Property(e => e.InstanceSridStatuteUpload).HasColumnName("InstanceSRId_StatuteUpload");

                entity.Property(e => e.IpStatuteUpload).HasColumnName("IP_StatuteUpload");

                entity.Property(e => e.RegistrationDateStatuteUpload).HasColumnName("RegistrationDate_StatuteUpload");

                entity.Property(e => e.RegistrationStatusStatuteUpload).HasColumnName("RegistrationStatus_StatuteUpload");

                entity.Property(e => e.RegistrationTimeStatuteUpload).HasColumnName("RegistrationTime_StatuteUpload");
            });

            modelBuilder.Entity<Stestddl>(entity =>
            {
                entity.ToTable("stestddl");

                entity.Property(e => e.AuditStatusStestddl).HasColumnName("AuditStatus_stestddl");

                entity.Property(e => e.CreatorStestddl).HasColumnName("Creator_stestddl");

                entity.Property(e => e.Ddla).HasColumnName("ddla");

                entity.Property(e => e.Ddlb).HasColumnName("ddlb");

                entity.Property(e => e.InstanceIdStestddl).HasColumnName("InstanceId_stestddl");

                entity.Property(e => e.InstanceSridStestddl).HasColumnName("InstanceSRId_stestddl");

                entity.Property(e => e.IpStestddl).HasColumnName("IP_stestddl");

                entity.Property(e => e.RegistrationDateStestddl).HasColumnName("RegistrationDate_stestddl");

                entity.Property(e => e.RegistrationStatusStestddl).HasColumnName("RegistrationStatus_stestddl");

                entity.Property(e => e.RegistrationTimeStestddl).HasColumnName("RegistrationTime_stestddl");

                entity.Property(e => e.Txtc).HasColumnName("txtc");

                entity.Property(e => e.Txtd).HasColumnName("txtd");

                entity.Property(e => e.Txte).HasColumnName("txte");
            });

            modelBuilder.Entity<StoreInAnotherDbs>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StoreInAnotherDbs)
                    .HasForeignKey<StoreInAnotherDbs>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.StoreInAnotherDbs_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<SubEditItemUpload>(entity =>
            {
                entity.ToTable("sub_editItemUpload");

                entity.Property(e => e.AuditStatusSubEditItemUpload).HasColumnName("AuditStatus_sub_editItemUpload");

                entity.Property(e => e.CreatorSubEditItemUpload).HasColumnName("Creator_sub_editItemUpload");

                entity.Property(e => e.InstanceIdSubEditItemUpload).HasColumnName("InstanceId_sub_editItemUpload");

                entity.Property(e => e.InstanceSridSubEditItemUpload).HasColumnName("InstanceSRId_sub_editItemUpload");

                entity.Property(e => e.IpSubEditItemUpload).HasColumnName("IP_sub_editItemUpload");

                entity.Property(e => e.RegistrationDateSubEditItemUpload).HasColumnName("RegistrationDate_sub_editItemUpload");

                entity.Property(e => e.RegistrationStatusSubEditItemUpload).HasColumnName("RegistrationStatus_sub_editItemUpload");

                entity.Property(e => e.RegistrationTimeSubEditItemUpload).HasColumnName("RegistrationTime_sub_editItemUpload");

                entity.Property(e => e.Uplfilms).HasColumnName("UPLFILMS");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.SubEditItemUpload)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_editItemUpload_sub_editItemUpload");
            });

            modelBuilder.Entity<SubFormGamerSeenContent>(entity =>
            {
                entity.ToTable("subForm_GamerSeenContent");

                entity.Property(e => e.AuditStatusSubFormGamerSeenContent).HasColumnName("AuditStatus_subForm_GamerSeenContent");

                entity.Property(e => e.CreatorSubFormGamerSeenContent).HasColumnName("Creator_subForm_GamerSeenContent");

                entity.Property(e => e.DdlType).HasColumnName("ddlType");

                entity.Property(e => e.InstanceIdSubFormGamerSeenContent).HasColumnName("InstanceId_subForm_GamerSeenContent");

                entity.Property(e => e.InstanceSridSubFormGamerSeenContent).HasColumnName("InstanceSRId_subForm_GamerSeenContent");

                entity.Property(e => e.IpSubFormGamerSeenContent).HasColumnName("IP_subForm_GamerSeenContent");

                entity.Property(e => e.RegistrationDateSubFormGamerSeenContent).HasColumnName("RegistrationDate_subForm_GamerSeenContent");

                entity.Property(e => e.RegistrationStatusSubFormGamerSeenContent).HasColumnName("RegistrationStatus_subForm_GamerSeenContent");

                entity.Property(e => e.RegistrationTimeSubFormGamerSeenContent).HasColumnName("RegistrationTime_subForm_GamerSeenContent");

                entity.Property(e => e.TxaDesc).HasColumnName("txaDesc");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");

                entity.Property(e => e.UplSubjectMovie).HasColumnName("uplSubjectMovie");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.SubFormGamerSeenContent)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_GamerSeenContent_subForm_GamerSeenContent");
            });

            modelBuilder.Entity<SubForms>(entity =>
            {
                entity.Property(e => e.MinSubmit).HasDefaultValueSql("((0))");

                entity.Property(e => e.RowCount).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SubHoghughiTozih>(entity =>
            {
                entity.ToTable("sub_HoghughiTozih");

                entity.Property(e => e.AuditStatusSubHoghughiTozih).HasColumnName("AuditStatus_sub_HoghughiTozih");

                entity.Property(e => e.CreatorSubHoghughiTozih).HasColumnName("Creator_sub_HoghughiTozih");

                entity.Property(e => e.InstanceIdSubHoghughiTozih).HasColumnName("InstanceId_sub_HoghughiTozih");

                entity.Property(e => e.InstanceSridSubHoghughiTozih).HasColumnName("InstanceSRId_sub_HoghughiTozih");

                entity.Property(e => e.IpSubHoghughiTozih).HasColumnName("IP_sub_HoghughiTozih");

                entity.Property(e => e.RegistrationDateSubHoghughiTozih).HasColumnName("RegistrationDate_sub_HoghughiTozih");

                entity.Property(e => e.RegistrationStatusSubHoghughiTozih).HasColumnName("RegistrationStatus_sub_HoghughiTozih");

                entity.Property(e => e.RegistrationTimeSubHoghughiTozih).HasColumnName("RegistrationTime_sub_HoghughiTozih");

                entity.Property(e => e.TxaSharh).HasColumnName("txaSharh");

                entity.Property(e => e.TxtDesc).HasColumnName("txtDesc");
            });

            modelBuilder.Entity<SubLevelAnalyze>(entity =>
            {
                entity.Property(e => e.AuditStatusSubLevelAnalyze).HasColumnName("AuditStatus_SubLevelAnalyze");

                entity.Property(e => e.CreatorSubLevelAnalyze).HasColumnName("Creator_SubLevelAnalyze");

                entity.Property(e => e.DdlLevel1).HasColumnName("ddlLevel1");

                entity.Property(e => e.InstanceIdSubLevelAnalyze).HasColumnName("InstanceId_SubLevelAnalyze");

                entity.Property(e => e.InstanceSridSubLevelAnalyze).HasColumnName("InstanceSRId_SubLevelAnalyze");

                entity.Property(e => e.IpSubLevelAnalyze).HasColumnName("IP_SubLevelAnalyze");

                entity.Property(e => e.RegistrationDateSubLevelAnalyze).HasColumnName("RegistrationDate_SubLevelAnalyze");

                entity.Property(e => e.RegistrationStatusSubLevelAnalyze).HasColumnName("RegistrationStatus_SubLevelAnalyze");

                entity.Property(e => e.RegistrationTimeSubLevelAnalyze).HasColumnName("RegistrationTime_SubLevelAnalyze");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxtContentSource).HasColumnName("txtContentSource");

                entity.Property(e => e.TxtFileName).HasColumnName("txtFileName");

                entity.Property(e => e.TxtImpact).HasColumnName("txtImpact");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.SubLevelAnalyze)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AnalyzerReport_SubLevelAnalyze");
            });

            modelBuilder.Entity<SubmitAgeRating>(entity =>
            {
                entity.Property(e => e.AuditStatusSubmitAgeRating).HasColumnName("AuditStatus_SubmitAgeRating");

                entity.Property(e => e.CreatorSubmitAgeRating).HasColumnName("Creator_SubmitAgeRating");

                entity.Property(e => e.InstanceIdSubmitAgeRating).HasColumnName("InstanceId_SubmitAgeRating");

                entity.Property(e => e.InstanceSridSubmitAgeRating).HasColumnName("InstanceSRId_SubmitAgeRating");

                entity.Property(e => e.IpSubmitAgeRating).HasColumnName("IP_SubmitAgeRating");

                entity.Property(e => e.RegistrationDateSubmitAgeRating).HasColumnName("RegistrationDate_SubmitAgeRating");

                entity.Property(e => e.RegistrationStatusSubmitAgeRating).HasColumnName("RegistrationStatus_SubmitAgeRating");

                entity.Property(e => e.RegistrationTimeSubmitAgeRating).HasColumnName("RegistrationTime_SubmitAgeRating");
            });

            modelBuilder.Entity<SubmitGameForCertificate>(entity =>
            {
                entity.Property(e => e.AuditStatusSubmitGameForCertificate).HasColumnName("AuditStatus_SubmitGameForCertificate");

                entity.Property(e => e.CreatorSubmitGameForCertificate).HasColumnName("Creator_SubmitGameForCertificate");

                entity.Property(e => e.InstanceIdSubmitGameForCertificate).HasColumnName("InstanceId_SubmitGameForCertificate");

                entity.Property(e => e.InstanceSridSubmitGameForCertificate).HasColumnName("InstanceSRId_SubmitGameForCertificate");

                entity.Property(e => e.IpSubmitGameForCertificate).HasColumnName("IP_SubmitGameForCertificate");

                entity.Property(e => e.RegistrationDateSubmitGameForCertificate).HasColumnName("RegistrationDate_SubmitGameForCertificate");

                entity.Property(e => e.RegistrationStatusSubmitGameForCertificate).HasColumnName("RegistrationStatus_SubmitGameForCertificate");

                entity.Property(e => e.RegistrationTimeSubmitGameForCertificate).HasColumnName("RegistrationTime_SubmitGameForCertificate");
            });

            modelBuilder.Entity<SubmitGameForCertificateNezaratExpert>(entity =>
            {
                entity.ToTable("SubmitGameForCertificate_NezaratExpert");

                entity.Property(e => e.AuditStatusSubmitGameForCertificateNezaratExpert).HasColumnName("AuditStatus_SubmitGameForCertificate_NezaratExpert");

                entity.Property(e => e.CreatorSubmitGameForCertificateNezaratExpert).HasColumnName("Creator_SubmitGameForCertificate_NezaratExpert");

                entity.Property(e => e.DdlCheckRequest).HasColumnName("ddlCheckRequest");

                entity.Property(e => e.InstanceIdSubmitGameForCertificateNezaratExpert).HasColumnName("InstanceId_SubmitGameForCertificate_NezaratExpert");

                entity.Property(e => e.InstanceSridSubmitGameForCertificateNezaratExpert).HasColumnName("InstanceSRId_SubmitGameForCertificate_NezaratExpert");

                entity.Property(e => e.IpSubmitGameForCertificateNezaratExpert).HasColumnName("IP_SubmitGameForCertificate_NezaratExpert");

                entity.Property(e => e.RegistrationDateSubmitGameForCertificateNezaratExpert).HasColumnName("RegistrationDate_SubmitGameForCertificate_NezaratExpert");

                entity.Property(e => e.RegistrationStatusSubmitGameForCertificateNezaratExpert).HasColumnName("RegistrationStatus_SubmitGameForCertificate_NezaratExpert");

                entity.Property(e => e.RegistrationTimeSubmitGameForCertificateNezaratExpert).HasColumnName("RegistrationTime_SubmitGameForCertificate_NezaratExpert");

                entity.Property(e => e.TxtDescription).HasColumnName("txtDescription");
            });

            modelBuilder.Entity<SubmitInquiries>(entity =>
            {
                entity.Property(e => e.AuditStatusSubmitInquiries).HasColumnName("AuditStatus_SubmitInquiries");

                entity.Property(e => e.CreatorSubmitInquiries).HasColumnName("Creator_SubmitInquiries");

                entity.Property(e => e.DdlHealthSletterResult).HasColumnName("ddlHealthSLetterResult");

                entity.Property(e => e.DdlPoliceSletterResult).HasColumnName("ddlPoliceSLetterResult");

                entity.Property(e => e.HealthSletter).HasColumnName("HealthSLetter");

                entity.Property(e => e.HealthSletterDate).HasColumnName("HealthSLetterDate");

                entity.Property(e => e.InstanceIdSubmitInquiries).HasColumnName("InstanceId_SubmitInquiries");

                entity.Property(e => e.InstanceSridSubmitInquiries).HasColumnName("InstanceSRId_SubmitInquiries");

                entity.Property(e => e.IpSubmitInquiries).HasColumnName("IP_SubmitInquiries");

                entity.Property(e => e.PoliceSletter).HasColumnName("PoliceSLetter");

                entity.Property(e => e.PoliceSletterDate).HasColumnName("PoliceSLetterDate");

                entity.Property(e => e.RegistrationDateSubmitInquiries).HasColumnName("RegistrationDate_SubmitInquiries");

                entity.Property(e => e.RegistrationStatusSubmitInquiries).HasColumnName("RegistrationStatus_SubmitInquiries");

                entity.Property(e => e.RegistrationTimeSubmitInquiries).HasColumnName("RegistrationTime_SubmitInquiries");
            });

            modelBuilder.Entity<SubmitSource>(entity =>
            {
                entity.Property(e => e.AuditStatusSubmitSource).HasColumnName("AuditStatus_SubmitSource");

                entity.Property(e => e.CreatorSubmitSource).HasColumnName("Creator_SubmitSource");

                entity.Property(e => e.DdlCompanyRepeat).HasColumnName("ddlCompanyRepeat");

                entity.Property(e => e.InstanceIdSubmitSource).HasColumnName("InstanceId_SubmitSource");

                entity.Property(e => e.InstanceSridSubmitSource).HasColumnName("InstanceSRId_SubmitSource");

                entity.Property(e => e.IpSubmitSource).HasColumnName("IP_SubmitSource");

                entity.Property(e => e.RegistrationDateSubmitSource).HasColumnName("RegistrationDate_SubmitSource");

                entity.Property(e => e.RegistrationStatusSubmitSource).HasColumnName("RegistrationStatus_SubmitSource");

                entity.Property(e => e.RegistrationTimeSubmitSource).HasColumnName("RegistrationTime_SubmitSource");

                entity.Property(e => e.TxtCn).HasColumnName("TxtCN");

                entity.Property(e => e.TxtVid).HasColumnName("TxtVID");
            });

            modelBuilder.Entity<SubWorkFlowExecutions>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.SubWorkFlowExecutions)
                    .HasForeignKey<SubWorkFlowExecutions>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.SubWorkFlowExecutions_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<SuportReplyForm>(entity =>
            {
                entity.ToTable("suportReplyForm");

                entity.Property(e => e.AuditStatusSuportReplyForm).HasColumnName("AuditStatus_suportReplyForm");

                entity.Property(e => e.CreatorSuportReplyForm).HasColumnName("Creator_suportReplyForm");

                entity.Property(e => e.FileUpl).HasColumnName("file_upl");

                entity.Property(e => e.InstanceIdSuportReplyForm).HasColumnName("InstanceId_suportReplyForm");

                entity.Property(e => e.InstanceSridSuportReplyForm).HasColumnName("InstanceSRId_suportReplyForm");

                entity.Property(e => e.IpSuportReplyForm).HasColumnName("IP_suportReplyForm");

                entity.Property(e => e.RegistrationDateSuportReplyForm).HasColumnName("RegistrationDate_suportReplyForm");

                entity.Property(e => e.RegistrationStatusSuportReplyForm).HasColumnName("RegistrationStatus_suportReplyForm");

                entity.Property(e => e.RegistrationTimeSuportReplyForm).HasColumnName("RegistrationTime_suportReplyForm");

                entity.Property(e => e.TxtPasokh).HasColumnName("txt_pasokh");
            });

            modelBuilder.Entity<SupportCategories>(entity =>
            {
                entity.ToTable("supportCategories");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SupportMgntCheck>(entity =>
            {
                entity.Property(e => e.AuditStatusSupportMgntCheck).HasColumnName("AuditStatus_SupportMgntCheck");

                entity.Property(e => e.CreatorSupportMgntCheck).HasColumnName("Creator_SupportMgntCheck");

                entity.Property(e => e.InstanceIdSupportMgntCheck).HasColumnName("InstanceId_SupportMgntCheck");

                entity.Property(e => e.InstanceSridSupportMgntCheck).HasColumnName("InstanceSRId_SupportMgntCheck");

                entity.Property(e => e.IpSupportMgntCheck).HasColumnName("IP_SupportMgntCheck");

                entity.Property(e => e.RegistrationDateSupportMgntCheck).HasColumnName("RegistrationDate_SupportMgntCheck");

                entity.Property(e => e.RegistrationStatusSupportMgntCheck).HasColumnName("RegistrationStatus_SupportMgntCheck");

                entity.Property(e => e.RegistrationTimeSupportMgntCheck).HasColumnName("RegistrationTime_SupportMgntCheck");
            });

            modelBuilder.Entity<SupportReplyRequestForm>(entity =>
            {
                entity.Property(e => e.AuditStatusSupportReplyRequestForm).HasColumnName("AuditStatus_SupportReplyRequestForm");

                entity.Property(e => e.CreatorSupportReplyRequestForm).HasColumnName("Creator_SupportReplyRequestForm");

                entity.Property(e => e.FileUpl).HasColumnName("file_upl");

                entity.Property(e => e.InstanceIdSupportReplyRequestForm).HasColumnName("InstanceId_SupportReplyRequestForm");

                entity.Property(e => e.InstanceSridSupportReplyRequestForm).HasColumnName("InstanceSRId_SupportReplyRequestForm");

                entity.Property(e => e.IpSupportReplyRequestForm).HasColumnName("IP_SupportReplyRequestForm");

                entity.Property(e => e.RegistrationDateSupportReplyRequestForm).HasColumnName("RegistrationDate_SupportReplyRequestForm");

                entity.Property(e => e.RegistrationStatusSupportReplyRequestForm).HasColumnName("RegistrationStatus_SupportReplyRequestForm");

                entity.Property(e => e.RegistrationTimeSupportReplyRequestForm).HasColumnName("RegistrationTime_SupportReplyRequestForm");

                entity.Property(e => e.TxtText).HasColumnName("txt_text");
            });

            modelBuilder.Entity<Sur030AskForBusinessGames>(entity =>
            {
                entity.ToTable("SUR_030_AskForBusinessGames");

                entity.Property(e => e.AuditStatusSur030AskForBusinessGames).HasColumnName("AuditStatus_SUR_030_AskForBusinessGames");

                entity.Property(e => e.CreatorSur030AskForBusinessGames).HasColumnName("Creator_SUR_030_AskForBusinessGames");

                entity.Property(e => e.InstanceIdSur030AskForBusinessGames).HasColumnName("InstanceId_SUR_030_AskForBusinessGames");

                entity.Property(e => e.InstanceSridSur030AskForBusinessGames).HasColumnName("InstanceSRId_SUR_030_AskForBusinessGames");

                entity.Property(e => e.IpSur030AskForBusinessGames).HasColumnName("IP_SUR_030_AskForBusinessGames");

                entity.Property(e => e.RegistrationDateSur030AskForBusinessGames).HasColumnName("RegistrationDate_SUR_030_AskForBusinessGames");

                entity.Property(e => e.RegistrationStatusSur030AskForBusinessGames).HasColumnName("RegistrationStatus_SUR_030_AskForBusinessGames");

                entity.Property(e => e.RegistrationTimeSur030AskForBusinessGames).HasColumnName("RegistrationTime_SUR_030_AskForBusinessGames");

                entity.Property(e => e.TxtIssueLicense).HasColumnName("txtIssueLicense");
            });

            modelBuilder.Entity<Sur030CheckContentRequest>(entity =>
            {
                entity.ToTable("SUR_030_CheckContentRequest");

                entity.Property(e => e.AuditStatusSur030CheckContentRequest).HasColumnName("AuditStatus_SUR_030_CheckContentRequest");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorSur030CheckContentRequest).HasColumnName("Creator_SUR_030_CheckContentRequest");

                entity.Property(e => e.DdlStatusReceivedForm).HasColumnName("ddlStatusReceivedForm");

                entity.Property(e => e.InstanceIdSur030CheckContentRequest).HasColumnName("InstanceId_SUR_030_CheckContentRequest");

                entity.Property(e => e.InstanceSridSur030CheckContentRequest).HasColumnName("InstanceSRId_SUR_030_CheckContentRequest");

                entity.Property(e => e.IpSur030CheckContentRequest).HasColumnName("IP_SUR_030_CheckContentRequest");

                entity.Property(e => e.RegistrationDateSur030CheckContentRequest).HasColumnName("RegistrationDate_SUR_030_CheckContentRequest");

                entity.Property(e => e.RegistrationStatusSur030CheckContentRequest).HasColumnName("RegistrationStatus_SUR_030_CheckContentRequest");

                entity.Property(e => e.RegistrationTimeSur030CheckContentRequest).HasColumnName("RegistrationTime_SUR_030_CheckContentRequest");
            });

            modelBuilder.Entity<Sur030CheckExistenceVersion>(entity =>
            {
                entity.ToTable("SUR_030_CheckExistenceVersion");

                entity.Property(e => e.AuditStatusSur030CheckExistenceVersion).HasColumnName("AuditStatus_SUR_030_CheckExistenceVersion");

                entity.Property(e => e.CreatorSur030CheckExistenceVersion).HasColumnName("Creator_SUR_030_CheckExistenceVersion");

                entity.Property(e => e.DdlIsThereResultAtBase).HasColumnName("ddlIsThereResultAtBase");

                entity.Property(e => e.InstanceIdSur030CheckExistenceVersion).HasColumnName("InstanceId_SUR_030_CheckExistenceVersion");

                entity.Property(e => e.InstanceSridSur030CheckExistenceVersion).HasColumnName("InstanceSRId_SUR_030_CheckExistenceVersion");

                entity.Property(e => e.IpSur030CheckExistenceVersion).HasColumnName("IP_SUR_030_CheckExistenceVersion");

                entity.Property(e => e.RegistrationDateSur030CheckExistenceVersion).HasColumnName("RegistrationDate_SUR_030_CheckExistenceVersion");

                entity.Property(e => e.RegistrationStatusSur030CheckExistenceVersion).HasColumnName("RegistrationStatus_SUR_030_CheckExistenceVersion");

                entity.Property(e => e.RegistrationTimeSur030CheckExistenceVersion).HasColumnName("RegistrationTime_SUR_030_CheckExistenceVersion");
            });

            modelBuilder.Entity<Sur030DataEntryBasicGame>(entity =>
            {
                entity.ToTable("SUR_030_DataEntryBasicGame");

                entity.Property(e => e.AuditStatusSur030DataEntryBasicGame).HasColumnName("AuditStatus_SUR_030_DataEntryBasicGame");

                entity.Property(e => e.CreatorSur030DataEntryBasicGame).HasColumnName("Creator_SUR_030_DataEntryBasicGame");

                entity.Property(e => e.DdlPlatformGame).HasColumnName("ddlPlatformGame");

                entity.Property(e => e.InstanceIdSur030DataEntryBasicGame).HasColumnName("InstanceId_SUR_030_DataEntryBasicGame");

                entity.Property(e => e.InstanceSridSur030DataEntryBasicGame).HasColumnName("InstanceSRId_SUR_030_DataEntryBasicGame");

                entity.Property(e => e.IpSur030DataEntryBasicGame).HasColumnName("IP_SUR_030_DataEntryBasicGame");

                entity.Property(e => e.RegistrationDateSur030DataEntryBasicGame).HasColumnName("RegistrationDate_SUR_030_DataEntryBasicGame");

                entity.Property(e => e.RegistrationStatusSur030DataEntryBasicGame).HasColumnName("RegistrationStatus_SUR_030_DataEntryBasicGame");

                entity.Property(e => e.RegistrationTimeSur030DataEntryBasicGame).HasColumnName("RegistrationTime_SUR_030_DataEntryBasicGame");

                entity.Property(e => e.TxtAccessLinkAndroid).HasColumnName("txtAccessLinkAndroid");

                entity.Property(e => e.TxtCategoryAccrued).HasColumnName("txtCategoryAccrued");

                entity.Property(e => e.TxtNameGame).HasColumnName("txtNameGame");

                entity.Property(e => e.TxtSecondNameGame).HasColumnName("txtSecondNameGame");

                entity.Property(e => e.TxtVersionCodeAndroid).HasColumnName("txtVersionCodeAndroid");

                entity.Property(e => e.UplGameIcons).HasColumnName("uplGameIcons");
            });

            modelBuilder.Entity<Sur030DistributionLicenseCode>(entity =>
            {
                entity.ToTable("SUR_030_DistributionLicenseCode");

                entity.Property(e => e.AuditStatusSur030DistributionLicenseCode).HasColumnName("AuditStatus_SUR_030_DistributionLicenseCode");

                entity.Property(e => e.CreatorSur030DistributionLicenseCode).HasColumnName("Creator_SUR_030_DistributionLicenseCode");

                entity.Property(e => e.InstanceIdSur030DistributionLicenseCode).HasColumnName("InstanceId_SUR_030_DistributionLicenseCode");

                entity.Property(e => e.InstanceSridSur030DistributionLicenseCode).HasColumnName("InstanceSRId_SUR_030_DistributionLicenseCode");

                entity.Property(e => e.IpSur030DistributionLicenseCode).HasColumnName("IP_SUR_030_DistributionLicenseCode");

                entity.Property(e => e.RegistrationDateSur030DistributionLicenseCode).HasColumnName("RegistrationDate_SUR_030_DistributionLicenseCode");

                entity.Property(e => e.RegistrationStatusSur030DistributionLicenseCode).HasColumnName("RegistrationStatus_SUR_030_DistributionLicenseCode");

                entity.Property(e => e.RegistrationTimeSur030DistributionLicenseCode).HasColumnName("RegistrationTime_SUR_030_DistributionLicenseCode");

                entity.Property(e => e.TxtRegisterlicensenumber).HasColumnName("txtRegisterlicensenumber");
            });

            modelBuilder.Entity<Sur030GameRatingControl>(entity =>
            {
                entity.ToTable("SUR_030_GameRatingControl");

                entity.Property(e => e.AuditStatusSur030GameRatingControl).HasColumnName("AuditStatus_SUR_030_GameRatingControl");

                entity.Property(e => e.CreatorSur030GameRatingControl).HasColumnName("Creator_SUR_030_GameRatingControl");

                entity.Property(e => e.DdlExist).HasColumnName("ddlExist");

                entity.Property(e => e.InstanceIdSur030GameRatingControl).HasColumnName("InstanceId_SUR_030_GameRatingControl");

                entity.Property(e => e.InstanceSridSur030GameRatingControl).HasColumnName("InstanceSRId_SUR_030_GameRatingControl");

                entity.Property(e => e.IpSur030GameRatingControl).HasColumnName("IP_SUR_030_GameRatingControl");

                entity.Property(e => e.RdcSelectAgeCategory).HasColumnName("rdcSelectAgeCategory");

                entity.Property(e => e.RegistrationDateSur030GameRatingControl).HasColumnName("RegistrationDate_SUR_030_GameRatingControl");

                entity.Property(e => e.RegistrationStatusSur030GameRatingControl).HasColumnName("RegistrationStatus_SUR_030_GameRatingControl");

                entity.Property(e => e.RegistrationTimeSur030GameRatingControl).HasColumnName("RegistrationTime_SUR_030_GameRatingControl");

                entity.Property(e => e.TxtPublisherName).HasColumnName("txtPublisherName");
            });

            modelBuilder.Entity<SurGameType>(entity =>
            {
                entity.ToTable("surGameType");

                entity.Property(e => e.AuditStatusSurGameType).HasColumnName("AuditStatus_surGameType");

                entity.Property(e => e.CreatorSurGameType).HasColumnName("Creator_surGameType");

                entity.Property(e => e.DdlGameType).HasColumnName("ddlGameType");

                entity.Property(e => e.InstanceIdSurGameType).HasColumnName("InstanceId_surGameType");

                entity.Property(e => e.InstanceSridSurGameType).HasColumnName("InstanceSRId_surGameType");

                entity.Property(e => e.IpSurGameType).HasColumnName("IP_surGameType");

                entity.Property(e => e.RegistrationDateSurGameType).HasColumnName("RegistrationDate_surGameType");

                entity.Property(e => e.RegistrationStatusSurGameType).HasColumnName("RegistrationStatus_surGameType");

                entity.Property(e => e.RegistrationTimeSurGameType).HasColumnName("RegistrationTime_surGameType");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");
            });

            modelBuilder.Entity<Swots>(entity =>
            {
                entity.ToTable("SWOTs");
            });

            modelBuilder.Entity<TableDetails>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Tsql).HasColumnName("TSql");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.TableDetails)
                    .HasForeignKey<TableDetails>(d => d.Id)
                    .HasConstraintName("FK_dbo.TableDetails_dbo.FormFields_Id");
            });

            modelBuilder.Entity<Targets>(entity =>
            {
                entity.HasIndex(e => e.BscId)
                    .HasName("IX_BSC_Id");

                entity.Property(e => e.BscId).HasColumnName("BSC_Id");

                entity.HasOne(d => d.Bsc)
                    .WithMany(p => p.Targets)
                    .HasForeignKey(d => d.BscId)
                    .HasConstraintName("FK_dbo.Targets_dbo.BSCs_BSC_Id");
            });

            modelBuilder.Entity<TblAccounts>(entity =>
            {
                entity.ToTable("tblAccounts");

                entity.HasOne(d => d.AccountType)
                    .WithMany(p => p.TblAccounts)
                    .HasForeignKey(d => d.AccountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserAccount_tblAccountType");
            });

            modelBuilder.Entity<TblAccountStates>(entity =>
            {
                entity.ToTable("tblAccountStates");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblAccountType>(entity =>
            {
                entity.ToTable("tblAccountType");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TblAccountTypeUnit>(entity =>
            {
                entity.ToTable("tblAccountTypeUnit");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblAnalizGamePart>(entity =>
            {
                entity.HasKey(e => new { e.IdVersionEsraStatusPictogram, e.IdGamePart });

                entity.ToTable("tblAnalizGamePart");

                entity.HasOne(d => d.IdGamePartNavigation)
                    .WithMany(p => p.TblAnalizGamePart)
                    .HasForeignKey(d => d.IdGamePart)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblEsraStatusGamePart_tblGamePart");

                entity.HasOne(d => d.IdVersionEsraStatusPictogramNavigation)
                    .WithMany(p => p.TblAnalizGamePart)
                    .HasForeignKey(d => d.IdVersionEsraStatusPictogram)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblEsraStatusGamePart_tblVersionEsraStatusPictogram");
            });

            modelBuilder.Entity<TblAreaActivity>(entity =>
            {
                entity.ToTable("tblAreaActivity");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblArticles>(entity =>
            {
                entity.ToTable("tblArticles");

                entity.Property(e => e.Authors).IsRequired();

                entity.Property(e => e.Title).IsRequired();
            });

            modelBuilder.Entity<TblArticlesType>(entity =>
            {
                entity.ToTable("tblArticlesType");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblAuction>(entity =>
            {
                entity.ToTable("tblAuction");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblAuctionItem>(entity =>
            {
                entity.ToTable("tblAuctionItem");

                entity.HasOne(d => d.IdAuctionNavigation)
                    .WithMany(p => p.TblAuctionItem)
                    .HasForeignKey(d => d.IdAuction)
                    .HasConstraintName("FK_tblAuctionItem_tblAuction");
            });

            modelBuilder.Entity<TblAuctionItemDisable>(entity =>
            {
                entity.ToTable("tblAuctionItemDisable");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblAuctionItemEnable>(entity =>
            {
                entity.ToTable("tblAuctionItemEnable");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblAuctionItemState>(entity =>
            {
                entity.ToTable("tblAuctionItemState");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblAuctionItemVersion>(entity =>
            {
                entity.HasKey(e => new { e.AuctionItemId, e.VersionId });

                entity.ToTable("tblAuctionItemVersion");
            });

            modelBuilder.Entity<TblAuctionParticipant>(entity =>
            {
                entity.HasKey(e => new { e.IdAuction, e.IdUser });

                entity.ToTable("tblAuctionParticipant");

                entity.HasOne(d => d.IdAuctionNavigation)
                    .WithMany(p => p.TblAuctionParticipant)
                    .HasForeignKey(d => d.IdAuction)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAuctionParticipant_tblAuction");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TblAuctionParticipant)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAuctionParticipant_tblProducerNExclusiveNUser");
            });

            modelBuilder.Entity<TblAuctionVote>(entity =>
            {
                entity.HasKey(e => new { e.IdAuction, e.IdUser, e.IdAuctionItem });

                entity.ToTable("tblAuctionVote");

                entity.HasOne(d => d.IdAuctionNavigation)
                    .WithMany(p => p.TblAuctionVote)
                    .HasForeignKey(d => d.IdAuction)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAuctionVote_tblAuction");

                entity.HasOne(d => d.IdAuctionItemNavigation)
                    .WithMany(p => p.TblAuctionVote)
                    .HasForeignKey(d => d.IdAuctionItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAuctionVote_tblAuctionItem");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TblAuctionVote)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAuctionVote_tblProducerNExclusiveNUser");
            });

            modelBuilder.Entity<TblAuctionWinner>(entity =>
            {
                entity.ToTable("tblAuctionWinner");

                entity.Property(e => e.Return).HasColumnName("return");

                entity.HasOne(d => d.IdAuctionItemNavigation)
                    .WithMany(p => p.TblAuctionWinner)
                    .HasForeignKey(d => d.IdAuctionItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAuctionWinner_tblAuctionItem");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TblAuctionWinner)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAuctionWinner_tblProducerNExclusiveNUser");
            });

            modelBuilder.Entity<TblAward>(entity =>
            {
                entity.ToTable("tblAward");
            });

            modelBuilder.Entity<TblCategory>(entity =>
            {
                entity.ToTable("tblCategory");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.IdCategoryTypeNavigation)
                    .WithMany(p => p.TblCategory)
                    .HasForeignKey(d => d.IdCategoryType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCategory_tblCategoryType");

                entity.HasOne(d => d.IdParentNavigation)
                    .WithMany(p => p.InverseIdParentNavigation)
                    .HasForeignKey(d => d.IdParent)
                    .HasConstraintName("FK_tblGenre_tblGenre");
            });

            modelBuilder.Entity<TblCategory1>(entity =>
            {
                entity.ToTable("tblCategory", "ipdbuser");

                entity.HasIndex(e => e.IdCategoryType);

                entity.HasIndex(e => e.IdParent);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.IdCategoryTypeNavigation)
                    .WithMany(p => p.TblCategory1)
                    .HasForeignKey(d => d.IdCategoryType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCategory_tblCategoryType");

                entity.HasOne(d => d.IdParentNavigation)
                    .WithMany(p => p.InverseIdParentNavigation)
                    .HasForeignKey(d => d.IdParent)
                    .HasConstraintName("FK_tblGenre_tblGenre");
            });

            modelBuilder.Entity<TblCategoryType>(entity =>
            {
                entity.ToTable("tblCategoryType", "ipdbuser");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblCategoryType1>(entity =>
            {
                entity.ToTable("tblCategoryType");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblCertificationVersion>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdPublishCertification });

                entity.ToTable("tblCertificationVersion");

                entity.HasOne(d => d.IdPublishCertificationNavigation)
                    .WithMany(p => p.TblCertificationVersion)
                    .HasForeignKey(d => d.IdPublishCertification)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificationVersion_tblPublishCertification");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TblCertificationVersion)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_tblCertificationVersion_tblProducerNExclusiveNUser");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblCertificationVersion)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificationVersion_tblVersion");
            });

            modelBuilder.Entity<TblCities>(entity =>
            {
                entity.ToTable("tblCities");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblCompanyAriaActivity>(entity =>
            {
                entity.HasKey(e => new { e.IdAriaActivity, e.IdOrganizationBonyad, e.InBonyad });

                entity.ToTable("tblCompanyAriaActivity");

                entity.HasOne(d => d.IdAriaActivityNavigation)
                    .WithMany(p => p.TblCompanyAriaActivity)
                    .HasForeignKey(d => d.IdAriaActivity)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCompanyAriaActivity_tblAreaActivity");

                entity.HasOne(d => d.IdOrganizationBonyadNavigation)
                    .WithMany(p => p.TblCompanyAriaActivity)
                    .HasForeignKey(d => d.IdOrganizationBonyad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCompanyAriaActivity_tblOrganizationBonyad");
            });

            modelBuilder.Entity<TblConsultation>(entity =>
            {
                entity.ToTable("tblConsultation");

                entity.Property(e => e.Answer).HasColumnType("ntext");

                entity.Property(e => e.AnswerDateTime).HasColumnType("datetime");

                entity.Property(e => e.Question).HasColumnType("ntext");

                entity.Property(e => e.QuestionDateTime).HasColumnType("datetime");

                entity.Property(e => e.QuestionerEmail).HasMaxLength(300);

                entity.Property(e => e.QuestionerNameNfamily)
                    .HasColumnName("QuestionerNameNFamily")
                    .HasMaxLength(500);

                entity.Property(e => e.TrackingCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdResponserNavigation)
                    .WithMany(p => p.TblConsultation)
                    .HasForeignKey(d => d.IdResponser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblConsultation_tblProducerNExclusiveNUser");
            });

            modelBuilder.Entity<TblCountry>(entity =>
            {
                entity.ToTable("tblCountry");

                entity.Property(e => e.LocalName).HasMaxLength(300);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.RegionalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblDeficiencyType>(entity =>
            {
                entity.ToTable("tblDeficiencyType");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<TblEditableType>(entity =>
            {
                entity.ToTable("tblEditableType");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblEditOffers>(entity =>
            {
                entity.ToTable("tblEditOffers");

                entity.Property(e => e.TimeOffer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.EditOfferStates)
                    .WithMany(p => p.TblEditOffers)
                    .HasForeignKey(d => d.EditOfferStatesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblEditOffers_tblEditOfferStates");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TblEditOffers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblEditOffers_tblProducerNExclusiveNUser");

                entity.HasOne(d => d.Version)
                    .WithMany(p => p.TblEditOffers)
                    .HasForeignKey(d => d.VersionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblEditOffers_tblVersion");
            });

            modelBuilder.Entity<TblEditOfferStates>(entity =>
            {
                entity.ToTable("tblEditOfferStates");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblEducationDegree>(entity =>
            {
                entity.ToTable("tblEducationDegree");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TblEsra>(entity =>
            {
                entity.ToTable("tblEsra", "ipdbuser");

                entity.HasIndex(e => e.IdHead);

                entity.Property(e => e.Age).HasMaxLength(50);

                entity.HasOne(d => d.IdHeadNavigation)
                    .WithMany(p => p.InverseIdHeadNavigation)
                    .HasForeignKey(d => d.IdHead)
                    .HasConstraintName("FK_tblEsra_tblEsra");
            });

            modelBuilder.Entity<TblEsra1>(entity =>
            {
                entity.ToTable("tblEsra");

                entity.Property(e => e.Age).HasMaxLength(50);

                entity.HasOne(d => d.IdHeadNavigation)
                    .WithMany(p => p.InverseIdHeadNavigation)
                    .HasForeignKey(d => d.IdHead)
                    .HasConstraintName("FK_tblEsra_tblEsra");
            });

            modelBuilder.Entity<TblEsraStatus>(entity =>
            {
                entity.ToTable("tblEsraStatus");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblEsraType>(entity =>
            {
                entity.ToTable("tblEsraType");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TblExclusiveType>(entity =>
            {
                entity.ToTable("tblExclusiveType");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblExclusiveVersions>(entity =>
            {
                entity.ToTable("tblExclusiveVersions");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblExhibition>(entity =>
            {
                entity.ToTable("tblExhibition");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.EventDate).IsRequired();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblExhibitionOther>(entity =>
            {
                entity.HasKey(e => e.ExhibitionId);

                entity.ToTable("tblExhibitionOther");

                entity.Property(e => e.ExhibitionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TblExhibitionPresent>(entity =>
            {
                entity.ToTable("tblExhibitionPresent");
            });

            modelBuilder.Entity<TblExhibitionType>(entity =>
            {
                entity.ToTable("tblExhibitionType");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblFestival>(entity =>
            {
                entity.ToTable("tblFestival");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblFestivalAward>(entity =>
            {
                entity.ToTable("tblFestivalAward");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblFestivalAwardOther>(entity =>
            {
                entity.HasKey(e => e.FestivalAwardId);

                entity.ToTable("tblFestivalAwardOther");

                entity.Property(e => e.FestivalAwardId).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblFile>(entity =>
            {
                entity.ToTable("tblFile", "ipdbuser");

                entity.Property(e => e.FileType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.UploadDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(2000);
            });

            modelBuilder.Entity<TblFile1>(entity =>
            {
                entity.ToTable("tblFile");

                entity.Property(e => e.FileType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.UploadDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(2000);
            });

            modelBuilder.Entity<TblFounderGroup>(entity =>
            {
                entity.HasKey(e => new { e.IdOrganizationBonyad, e.IdUser });

                entity.ToTable("tblFounderGroup");

                entity.HasOne(d => d.IdOrganizationBonyadNavigation)
                    .WithMany(p => p.TblFounderGroup)
                    .HasForeignKey(d => d.IdOrganizationBonyad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblFounderGroup_tblOrganizationBonyad");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TblFounderGroup)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblFounderGroup_tblProducerNExclusiveNUser");
            });

            modelBuilder.Entity<TblGame>(entity =>
            {
                entity.ToTable("tblGame", "ipdbuser");

                entity.HasIndex(e => e.IdProducer);

                entity.HasIndex(e => new { e.Id, e.Name })
                    .HasName("index_name");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PublishDateTime).HasColumnType("datetime");

                entity.Property(e => e.WebSite).HasMaxLength(2000);

                entity.HasOne(d => d.IdProducerNavigation)
                    .WithMany(p => p.TblGame)
                    .HasForeignKey(d => d.IdProducer)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblGame_tblOrganizationBonyad");
            });

            modelBuilder.Entity<TblGame1>(entity =>
            {
                entity.ToTable("tblGame");

                entity.HasIndex(e => new { e.Id, e.Name })
                    .HasName("index_name");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PublishDateTime).HasColumnType("datetime");

                entity.Property(e => e.WebSite).HasMaxLength(2000);

                entity.HasOne(d => d.IdProducerNavigation)
                    .WithMany(p => p.TblGame1)
                    .HasForeignKey(d => d.IdProducer)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblGame_tblOrganizationBonyad");
            });

            modelBuilder.Entity<TblGameCategory>(entity =>
            {
                entity.ToTable("tblGameCategory", "ipdbuser");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblGameCategory1>(entity =>
            {
                entity.ToTable("tblGameCategory");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblGameCreatorProjects>(entity =>
            {
                entity.ToTable("tblGameCreatorProjects");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaActivityComment).HasMaxLength(2000);

                entity.Property(e => e.Employer).HasMaxLength(100);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Responsibility).HasMaxLength(100);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Title).HasMaxLength(100);

                entity.HasOne(d => d.IdAreaActivityNavigation)
                    .WithMany(p => p.TblGameCreatorProjects)
                    .HasForeignKey(d => d.IdAreaActivity)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblGameCreatorProjects_tblAreaActivity");
            });

            modelBuilder.Entity<TblGamePart>(entity =>
            {
                entity.ToTable("tblGamePart");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TblGamerScreenShot>(entity =>
            {
                entity.HasKey(e => new { e.IdSourceMedia, e.IdFile });

                entity.ToTable("tblGamerScreenShot");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.TblGamerScreenShot)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblGamerScreenShot_tblFile");

                entity.HasOne(d => d.IdScreenShotTypeNavigation)
                    .WithMany(p => p.TblGamerScreenShot)
                    .HasForeignKey(d => d.IdScreenShotType)
                    .HasConstraintName("FK_tblGamerScreenShot_tblScreenshotType");

                entity.HasOne(d => d.IdSourceMediaNavigation)
                    .WithMany(p => p.TblGamerScreenShot)
                    .HasForeignKey(d => d.IdSourceMedia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblGamerScreenShot_tblSourceMedia");
            });

            modelBuilder.Entity<TblGamerScreenVideo>(entity =>
            {
                entity.HasKey(e => new { e.IdSourceMedia, e.IdFile });

                entity.ToTable("tblGamerScreenVideo");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.TblGamerScreenVideo)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblGamerScreenVideo_tblFile");

                entity.HasOne(d => d.IdPictogramFirstLevelNavigation)
                    .WithMany(p => p.TblGamerScreenVideo)
                    .HasForeignKey(d => d.IdPictogramFirstLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblGamerScreenVideo_tblPictogram");

                entity.HasOne(d => d.IdScreenShotTypeNavigation)
                    .WithMany(p => p.TblGamerScreenVideo)
                    .HasForeignKey(d => d.IdScreenShotType)
                    .HasConstraintName("FK_tblGamerScreenVideo_tblScreenshotType");

                entity.HasOne(d => d.IdSourceMediaNavigation)
                    .WithMany(p => p.TblGamerScreenVideo)
                    .HasForeignKey(d => d.IdSourceMedia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblGamerScreenVideo_tblSourceMedia");
            });

            modelBuilder.Entity<TblHologramInstallFail>(entity =>
            {
                entity.HasKey(e => new { e.IdhologramInstalition, e.IdFailReason });

                entity.ToTable("tblHologramInstallFail");

                entity.HasOne(d => d.IdFailReasonNavigation)
                    .WithMany(p => p.TblHologramInstallFail)
                    .HasForeignKey(d => d.IdFailReason)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblHologramInstallFail_tblDeficiencyType");

                entity.HasOne(d => d.IdhologramInstalitionNavigation)
                    .WithMany(p => p.TblHologramInstallFail)
                    .HasForeignKey(d => d.IdhologramInstalition)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblHologramInstallFail_tblHologramInstalltion");
            });

            modelBuilder.Entity<TblHologramInstalltion>(entity =>
            {
                entity.ToTable("tblHologramInstalltion");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.IsInstallOk).HasColumnName("IsInstallOK");

                entity.HasOne(d => d.IdAuctionItemNavigation)
                    .WithMany(p => p.TblHologramInstalltion)
                    .HasForeignKey(d => d.IdAuctionItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblHologramInstalltion_tblAuctionItem");
            });

            modelBuilder.Entity<TblHologramList>(entity =>
            {
                entity.ToTable("tblHologramList");

                entity.Property(e => e.InstallDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblHologramListItems>(entity =>
            {
                entity.ToTable("tblHologramListItems");

                entity.Property(e => e.Types).HasMaxLength(8);
            });

            modelBuilder.Entity<TblIdentificationType>(entity =>
            {
                entity.ToTable("tblIdentificationType");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TblIndependentGameCreatorFile>(entity =>
            {
                entity.HasKey(e => new { e.IdIndependentGameCreator, e.IdFile, e.IdIdentificationType });

                entity.ToTable("tblIndependentGameCreatorFile");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.TblIndependentGameCreatorFile)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblIndependentGameCreatorFile_tblFile");

                entity.HasOne(d => d.IdIdentificationTypeNavigation)
                    .WithMany(p => p.TblIndependentGameCreatorFile)
                    .HasForeignKey(d => d.IdIdentificationType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblIndependentGameCreatorFile_tblIdentificationType");
            });

            modelBuilder.Entity<TblIndicator>(entity =>
            {
                entity.ToTable("tblIndicator");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Prefix)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.InverseIdNavigation)
                    .HasForeignKey<TblIndicator>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblIndicator_tblIndicator");
            });

            modelBuilder.Entity<TblIranianPhysicalPublisherVersion>(entity =>
            {
                entity.HasKey(e => new { e.PhysicalUserId, e.VersionId });

                entity.ToTable("tblIranianPhysicalPublisherVersion");

                entity.HasOne(d => d.PhysicalUser)
                    .WithMany(p => p.TblIranianPhysicalPublisherVersion)
                    .HasForeignKey(d => d.PhysicalUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblIranianPhysicalPublisherVersion_tblProducerNExclusiveNUser");

                entity.HasOne(d => d.Version)
                    .WithMany(p => p.TblIranianPhysicalPublisherVersion)
                    .HasForeignKey(d => d.VersionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblIranianPhysicalPublisherVersion_tblVersion");
            });

            modelBuilder.Entity<TblItemVersions>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdAuctionItem });

                entity.ToTable("tblItemVersions");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdAddedUserNavigation)
                    .WithMany(p => p.TblItemVersions)
                    .HasForeignKey(d => d.IdAddedUser)
                    .HasConstraintName("FK_tblItemVersions_tblProducerNExclusiveNUser");

                entity.HasOne(d => d.IdAuctionItemNavigation)
                    .WithMany(p => p.TblItemVersions)
                    .HasForeignKey(d => d.IdAuctionItem)
                    .HasConstraintName("FK_tblItemVersions_tblAuctionItem");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblItemVersions)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblItemVersions_tblVersion");
            });

            modelBuilder.Entity<TblLanguage>(entity =>
            {
                entity.ToTable("tblLanguage");

                entity.Property(e => e.LocalName).HasMaxLength(300);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<TblLog>(entity =>
            {
                entity.ToTable("tblLog");
            });

            modelBuilder.Entity<TblMilitary>(entity =>
            {
                entity.ToTable("tblMilitary");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TblMobileDistributeLicense>(entity =>
            {
                entity.ToTable("tblMobileDistributeLicense");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<TblMobileDistributeLicenseStates>(entity =>
            {
                entity.ToTable("tblMobileDistributeLicenseStates");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblMobileDistributeLicenseTypes>(entity =>
            {
                entity.ToTable("tblMobileDistributeLicenseTypes");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblMobileDistributeLicenseVersions>(entity =>
            {
                entity.ToTable("tblMobileDistributeLicenseVersions");

                entity.Property(e => e.AddDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblMobilePublishLicenseTypes>(entity =>
            {
                entity.ToTable("tblMobilePublishLicenseTypes");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblMobilePublishLicenseVersions>(entity =>
            {
                entity.ToTable("tblMobilePublishLicenseVersions");

                entity.Property(e => e.AddDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblNezaratAuction>(entity =>
            {
                entity.ToTable("tblNezaratAuction");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.StartAuctionDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblNezaratAuctionActionItem>(entity =>
            {
                entity.HasKey(e => new { e.NezaratAuctionId, e.AuctionItemId });

                entity.ToTable("tblNezaratAuctionActionItem");
            });

            modelBuilder.Entity<TblNezaratAuctionResult>(entity =>
            {
                entity.ToTable("tblNezaratAuctionResult");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblNezaratAuctionState>(entity =>
            {
                entity.ToTable("tblNezaratAuctionState");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblNezaratAuctionUsers>(entity =>
            {
                entity.HasKey(e => new { e.NezaratAuctionId, e.UserId });

                entity.ToTable("tblNezaratAuctionUsers");
            });

            modelBuilder.Entity<TblOrganizationBonyad>(entity =>
            {
                entity.ToTable("tblOrganizationBonyad");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BusinessLicensesExpireDateTime).HasColumnType("datetime");

                entity.Property(e => e.EconomicCode).HasMaxLength(50);

                entity.Property(e => e.IdCeo).HasColumnName("IdCEO");

                entity.Property(e => e.LicenseNumber).HasMaxLength(100);

                entity.Property(e => e.LinkEmail).HasMaxLength(200);

                entity.Property(e => e.LinkPhone).HasMaxLength(50);

                entity.Property(e => e.ManagerPhone).HasMaxLength(50);

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasColumnType("char(10)");

                entity.Property(e => e.RegistrationDateTime).HasColumnType("datetime");

                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);

                entity.Property(e => e.Vasincoming).HasColumnName("VASIncoming");

                entity.HasOne(d => d.IdCeoNavigation)
                    .WithMany(p => p.TblOrganizationBonyad)
                    .HasForeignKey(d => d.IdCeo)
                    .HasConstraintName("FK_tblOrganizationBonyad_tblProducerNExclusiveNUser");

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.TblOrganizationBonyad)
                    .HasForeignKey(d => d.IdCountry)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblOrganizationBonyad_tblCountry");

                entity.HasOne(d => d.IdForeignPublisherNavigation)
                    .WithMany(p => p.InverseIdForeignPublisherNavigation)
                    .HasForeignKey(d => d.IdForeignPublisher)
                    .HasConstraintName("FK_tblOrganizationBonyad_tblOrganizationBonyad");

                entity.HasOne(d => d.TypeNavigation)
                    .WithMany(p => p.TblOrganizationBonyad)
                    .HasForeignKey(d => d.Type)
                    .HasConstraintName("FK_tblOrganizationBonyad_tblOrgType");
            });

            modelBuilder.Entity<TblOrganizationBonyad1>(entity =>
            {
                entity.ToTable("tblOrganizationBonyad", "ipdbuser");

                entity.HasIndex(e => e.IdForeignPublisher);

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BusinessLicensesExpireDateTime).HasColumnType("datetime");

                entity.Property(e => e.EconomicCode).HasMaxLength(50);

                entity.Property(e => e.IdCeo).HasColumnName("IdCEO");

                entity.Property(e => e.LicenseNumber).HasMaxLength(100);

                entity.Property(e => e.LinkEmail).HasMaxLength(200);

                entity.Property(e => e.LinkPhone).HasMaxLength(50);

                entity.Property(e => e.ManagerPhone).HasMaxLength(50);

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasColumnType("char(10)");

                entity.Property(e => e.RegistrationDateTime).HasColumnType("datetime");

                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);

                entity.HasOne(d => d.IdForeignPublisherNavigation)
                    .WithMany(p => p.InverseIdForeignPublisherNavigation)
                    .HasForeignKey(d => d.IdForeignPublisher)
                    .HasConstraintName("FK_tblOrganizationBonyad_tblOrganizationBonyad");
            });

            modelBuilder.Entity<TblOrganizationBonyadFile>(entity =>
            {
                entity.HasKey(e => new { e.IdOrganizationBonyad, e.IdFile });

                entity.ToTable("tblOrganizationBonyadFile");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.TblOrganizationBonyadFile)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblOrganizationBonyadFile_tblFile");

                entity.HasOne(d => d.IdIdentificationTypeNavigation)
                    .WithMany(p => p.TblOrganizationBonyadFile)
                    .HasForeignKey(d => d.IdIdentificationType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblOrganizationBonyadFile_tblIdentificationType");

                entity.HasOne(d => d.IdOrganizationBonyadNavigation)
                    .WithMany(p => p.TblOrganizationBonyadFile)
                    .HasForeignKey(d => d.IdOrganizationBonyad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblOrganizationBonyadFile_tblOrganizationBonyad");
            });

            modelBuilder.Entity<TblOrganizationBonyadFileType>(entity =>
            {
                entity.ToTable("tblOrganizationBonyadFileType");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<TblOrgType>(entity =>
            {
                entity.ToTable("tblOrgType");
            });

            modelBuilder.Entity<TblParticipant>(entity =>
            {
                entity.ToTable("tblParticipant");
            });

            modelBuilder.Entity<TblPersonBonyad>(entity =>
            {
                entity.ToTable("tblPersonBonyad");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("email")
                    .HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnName("lastName")
                    .HasMaxLength(100);

                entity.Property(e => e.MobileNumber)
                    .HasColumnName("mobileNumber")
                    .HasMaxLength(15);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(100);

                entity.Property(e => e.NationalId)
                    .IsRequired()
                    .HasColumnName("nationalId")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<TblPhysicalPublishLicense>(entity =>
            {
                entity.ToTable("tblPhysicalPublishLicense");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LicenseNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Price).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblPhysicalPublishLicenseStates>(entity =>
            {
                entity.ToTable("tblPhysicalPublishLicenseStates");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.InverseIdNavigation)
                    .HasForeignKey<TblPhysicalPublishLicenseStates>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPhysicalPublishLicenseStates_tblPhysicalPublishLicenseStates");
            });

            modelBuilder.Entity<TblPhysicalPublishLicenseVersions>(entity =>
            {
                entity.HasKey(e => new { e.VersionId, e.PhysicalPublishLicenseId });

                entity.ToTable("tblPhysicalPublishLicenseVersions");

                entity.HasOne(d => d.PhysicalPublishLicense)
                    .WithMany(p => p.TblPhysicalPublishLicenseVersions)
                    .HasForeignKey(d => d.PhysicalPublishLicenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPhysicalPublishLicenseVersions_tblPhysicalPublishLicense");

                entity.HasOne(d => d.Version)
                    .WithMany(p => p.TblPhysicalPublishLicenseVersions)
                    .HasForeignKey(d => d.VersionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPhysicalPublishLicenseVersions_tblVersion");
            });

            modelBuilder.Entity<TblPictogram>(entity =>
            {
                entity.ToTable("tblPictogram", "ipdbuser");

                entity.HasIndex(e => e.IdHead);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.IdHeadNavigation)
                    .WithMany(p => p.InverseIdHeadNavigation)
                    .HasForeignKey(d => d.IdHead)
                    .HasConstraintName("FK_tblPictogram_tblPictogram");
            });

            modelBuilder.Entity<TblPictogram1>(entity =>
            {
                entity.ToTable("tblPictogram");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.IdHeadNavigation)
                    .WithMany(p => p.InverseIdHeadNavigation)
                    .HasForeignKey(d => d.IdHead)
                    .HasConstraintName("FK_tblPictogram_tblPictogram");
            });

            modelBuilder.Entity<TblPlatform>(entity =>
            {
                entity.ToTable("tblPlatform", "ipdbuser");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblPlatform1>(entity =>
            {
                entity.ToTable("tblPlatform");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblProducerNexclusiveNuser>(entity =>
            {
                entity.ToTable("tblProducerNExclusiveNUser");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.Mobile).HasColumnType("char(11)");

                entity.Property(e => e.WebSite).HasMaxLength(1000);

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.TblProducerNexclusiveNuser)
                    .HasForeignKey(d => d.IdCountry)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProducer_tblCountry");

                entity.HasOne(d => d.IdNezamVazifeNavigation)
                    .WithMany(p => p.TblProducerNexclusiveNuser)
                    .HasForeignKey(d => d.IdNezamVazife)
                    .HasConstraintName("FK_tblProducerNExclusiveNUser_tblNezamVazife");

                entity.HasOne(d => d.IdOrganizationNavigation)
                    .WithMany(p => p.TblProducerNexclusiveNuser)
                    .HasForeignKey(d => d.IdOrganization)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProducerNExclusiveNUser_tblOrganizationBonyad");
            });

            modelBuilder.Entity<TblProvinces>(entity =>
            {
                entity.ToTable("tblProvinces");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblPublishCertification>(entity =>
            {
                entity.ToTable("tblPublishCertification");

                entity.Property(e => e.CertificationNumber)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ConfermDateTime).HasColumnType("datetime");

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.SignatureName).HasMaxLength(100);

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.IdApplicantUserNavigation)
                    .WithMany(p => p.TblPublishCertification)
                    .HasForeignKey(d => d.IdApplicantUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPublishCertification_tblProducerNExclusiveNUser");
            });

            modelBuilder.Entity<TblPublishCertificationValet>(entity =>
            {
                entity.HasKey(e => new { e.IdPublishCertification, e.IdFile, e.IdUserEsra, e.IdUserNezarat, e.IdScreenshotType });

                entity.ToTable("tblPublishCertificationValet");

                entity.Property(e => e.IdUserNezarat).HasColumnName("idUserNezarat");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.TblPublishCertificationValet)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPublishCertificationValet_tblFile");

                entity.HasOne(d => d.IdPublishCertificationNavigation)
                    .WithMany(p => p.TblPublishCertificationValet)
                    .HasForeignKey(d => d.IdPublishCertification)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPublishCertificationValet_tblPublishCertification");

                entity.HasOne(d => d.IdScreenshotTypeNavigation)
                    .WithMany(p => p.TblPublishCertificationValet)
                    .HasForeignKey(d => d.IdScreenshotType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPublishCertificationValet_tblScreenshotType");

                entity.HasOne(d => d.IdUserEsraNavigation)
                    .WithMany(p => p.TblPublishCertificationValetIdUserEsraNavigation)
                    .HasForeignKey(d => d.IdUserEsra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPublishCertificationValet_tblProducerNExclusiveNUser");

                entity.HasOne(d => d.IdUserNezaratNavigation)
                    .WithMany(p => p.TblPublishCertificationValetIdUserNezaratNavigation)
                    .HasForeignKey(d => d.IdUserNezarat)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPublishCertificationValet_tblProducerNExclusiveNUser1");
            });

            modelBuilder.Entity<TblPublishLicense>(entity =>
            {
                entity.ToTable("tblPublishLicense");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LicenseNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StratDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.InverseIdNavigation)
                    .HasForeignKey<TblPublishLicense>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPublishLicense_tblPublishLicense");
            });

            modelBuilder.Entity<TblQuality>(entity =>
            {
                entity.ToTable("tblQuality");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblRate>(entity =>
            {
                entity.ToTable("tblRate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdHead).HasColumnName("idHead");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TblRefundType>(entity =>
            {
                entity.ToTable("tblRefundType");
            });

            modelBuilder.Entity<TblRefundTypeOther>(entity =>
            {
                entity.HasKey(e => e.VersionDetailId);

                entity.ToTable("tblRefundTypeOther");

                entity.Property(e => e.VersionDetailId).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblScreenshotType>(entity =>
            {
                entity.ToTable("tblScreenshotType", "ipdbuser");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblScreenshotType1>(entity =>
            {
                entity.ToTable("tblScreenshotType");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblSkillType>(entity =>
            {
                entity.ToTable("tblSkillType");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TblSourceMedia>(entity =>
            {
                entity.ToTable("tblSourceMedia");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Location).HasMaxLength(2000);

                entity.HasOne(d => d.IdDeficiencyTypeNavigation)
                    .WithMany(p => p.TblSourceMedia)
                    .HasForeignKey(d => d.IdDeficiencyType)
                    .HasConstraintName("FK_tblSourceMedia_tblDeficiencyType");

                entity.HasOne(d => d.IdSourceMediaSentTypeNavigation)
                    .WithMany(p => p.TblSourceMedia)
                    .HasForeignKey(d => d.IdSourceMediaSentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSourceMedia_tblSourceMediaSentType");

                entity.HasOne(d => d.IdSourceMediaTypeNavigation)
                    .WithMany(p => p.TblSourceMedia)
                    .HasForeignKey(d => d.IdSourceMediaType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSourceMedia_tblSourceMediaType");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblSourceMedia)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSourceMedia_tblVersion");
            });

            modelBuilder.Entity<TblSourceMediaFile>(entity =>
            {
                entity.HasKey(e => new { e.IdSourceMedia, e.IdFile });

                entity.ToTable("tblSourceMediaFile");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.TblSourceMediaFile)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSourceMediaFile_tblFile");

                entity.HasOne(d => d.IdSourceMediaNavigation)
                    .WithMany(p => p.TblSourceMediaFile)
                    .HasForeignKey(d => d.IdSourceMedia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSourceMediaFile_tblSourceMedia");
            });

            modelBuilder.Entity<TblSourceMediaSentType>(entity =>
            {
                entity.ToTable("tblSourceMediaSentType");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblSourceMediaType>(entity =>
            {
                entity.ToTable("tblSourceMediaType");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblSourceType>(entity =>
            {
                entity.ToTable("tblSourceType", "ipdbuser");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblSourceType1>(entity =>
            {
                entity.ToTable("tblSourceType");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblStaticPage>(entity =>
            {
                entity.ToTable("tblStaticPage");

                entity.Property(e => e.Content).HasColumnType("ntext");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.Property(e => e.ReadMoreLink).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.TitlePictureUrl).HasMaxLength(1000);

                entity.HasOne(d => d.IdAuthorNavigation)
                    .WithMany(p => p.TblStaticPage)
                    .HasForeignKey(d => d.IdAuthor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblStaticPage_tblProducerNExclusiveNUser");
            });

            modelBuilder.Entity<TblStaticPageFile>(entity =>
            {
                entity.HasKey(e => new { e.IdStaticPage, e.IdFile });

                entity.ToTable("tblStaticPageFile");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.TblStaticPageFile)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblStaticPageFile_tblFile");

                entity.HasOne(d => d.IdStaticPageNavigation)
                    .WithMany(p => p.TblStaticPageFile)
                    .HasForeignKey(d => d.IdStaticPage)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblStaticPageFile_tblStaticPage");
            });

            modelBuilder.Entity<TblTag>(entity =>
            {
                entity.ToTable("tblTag");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.IdNewsNavigation)
                    .WithMany(p => p.TblTag)
                    .HasForeignKey(d => d.IdNews)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTag_tblStaticPage");
            });

            modelBuilder.Entity<TblTeams>(entity =>
            {
                entity.ToTable("tblTeams");

                entity.Property(e => e.IsOutcoming).HasColumnName("isOutcoming");

                entity.Property(e => e.IsVas).HasColumnName("isVAS");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(14);

                entity.Property(e => e.NumMember).HasColumnName("numMember");

                entity.Property(e => e.PhoneLink).HasMaxLength(14);

                entity.Property(e => e.Vas).HasColumnName("VAS");

                entity.Property(e => e.VasfileId).HasColumnName("VASFileId");
            });

            modelBuilder.Entity<TblTempData>(entity =>
            {
                entity.ToTable("tblTempData");
            });

            modelBuilder.Entity<TblTrainees>(entity =>
            {
                entity.ToTable("tblTrainees");

                entity.Property(e => e.EndDate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsEmployee).HasColumnName("isEmployee");

                entity.Property(e => e.KaraCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.StartDate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Task)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblTransaction>(entity =>
            {
                entity.ToTable("tblTransaction");

                entity.Property(e => e.Datetime).HasColumnType("datetime");

                entity.Property(e => e.IdProcessInBpms).HasColumnName("IdProcessInBPMS");

                entity.HasOne(d => d.IdTransactionTypeNavigation)
                    .WithMany(p => p.TblTransaction)
                    .HasForeignKey(d => d.IdTransactionType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTransaction_tblTransactionType");
            });

            modelBuilder.Entity<TblTransactionType>(entity =>
            {
                entity.ToTable("tblTransactionType");

                entity.Property(e => e.Abbreviation).HasColumnType("nchar(10)");

                entity.Property(e => e.IsIncrement).HasColumnName("isIncrement");
            });

            modelBuilder.Entity<TblUserDocumentFile>(entity =>
            {
                entity.HasKey(e => new { e.IdUser, e.IdFile, e.IdIdentificationType });

                entity.ToTable("tblUserDocumentFile");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.TblUserDocumentFile)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserDocumentFile_tblFile");

                entity.HasOne(d => d.IdIdentificationTypeNavigation)
                    .WithMany(p => p.TblUserDocumentFile)
                    .HasForeignKey(d => d.IdIdentificationType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserDocumentFile_tblIdentificationType");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TblUserDocumentFile)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserDocumentFile_tblProducerNExclusiveNUser");
            });

            modelBuilder.Entity<TblVersion>(entity =>
            {
                entity.ToTable("tblVersion", "ipdbuser");

                entity.HasIndex(e => e.IdGame);

                entity.HasIndex(e => e.IdProducer);

                entity.HasIndex(e => e.IdSourceType);

                entity.Property(e => e.AddDate)
                    .HasColumnName("addDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdBasket)
                    .HasColumnName("idBasket")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IntroductionMin).HasMaxLength(1000);

                entity.Property(e => e.OldId)
                    .HasColumnName("OldID")
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseDateTime).HasColumnType("datetime");

                entity.Property(e => e.VersionCode).HasMaxLength(50);

                entity.HasOne(d => d.IdGameNavigation)
                    .WithMany(p => p.TblVersion)
                    .HasForeignKey(d => d.IdGame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersion_tblGame");

                entity.HasOne(d => d.IdProducerNavigation)
                    .WithMany(p => p.TblVersion)
                    .HasForeignKey(d => d.IdProducer)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersion_tblOrganizationBonyad");

                entity.HasOne(d => d.IdSourceTypeNavigation)
                    .WithMany(p => p.TblVersion)
                    .HasForeignKey(d => d.IdSourceType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersion_tblSourceType");
            });

            modelBuilder.Entity<TblVersion1>(entity =>
            {
                entity.ToTable("tblVersion");

                entity.Property(e => e.AddDate)
                    .HasColumnName("addDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdBasket)
                    .HasColumnName("idBasket")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IntroductionMin).HasMaxLength(1000);

                entity.Property(e => e.OldId)
                    .HasColumnName("OldID")
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseDateTime).HasColumnType("datetime");

                entity.Property(e => e.VersionCode).HasMaxLength(50);

                entity.HasOne(d => d.IdAnalizorNavigation)
                    .WithMany(p => p.TblVersion1IdAnalizorNavigation)
                    .HasForeignKey(d => d.IdAnalizor)
                    .HasConstraintName("FK_tblVersion_tblProducerNExclusiveNUser3");

                entity.HasOne(d => d.IdEditableTypeNavigation)
                    .WithMany(p => p.TblVersion1)
                    .HasForeignKey(d => d.IdEditableType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersion_tblEditableType");

                entity.HasOne(d => d.IdGameNavigation)
                    .WithMany(p => p.TblVersion1)
                    .HasForeignKey(d => d.IdGame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersion_tblGame");

                entity.HasOne(d => d.IdGamerNavigation)
                    .WithMany(p => p.TblVersion1IdGamerNavigation)
                    .HasForeignKey(d => d.IdGamer)
                    .HasConstraintName("FK_tblVersion_tblProducerNExclusiveNUser2");

                entity.HasOne(d => d.IdLanguageNavigation)
                    .WithMany(p => p.TblVersion1)
                    .HasForeignKey(d => d.IdLanguage)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersion_tblLanguage");

                entity.HasOne(d => d.IdNarratorNavigation)
                    .WithMany(p => p.TblVersion1IdNarratorNavigation)
                    .HasForeignKey(d => d.IdNarrator)
                    .HasConstraintName("FK_tblVersion_tblProducerNExclusiveNUser1");

                entity.HasOne(d => d.IdProducerNavigation)
                    .WithMany(p => p.TblVersion1)
                    .HasForeignKey(d => d.IdProducer)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersion_tblOrganizationBonyad");

                entity.HasOne(d => d.IdQualityNavigation)
                    .WithMany(p => p.TblVersion1)
                    .HasForeignKey(d => d.IdQuality)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersion_tblQuality");

                entity.HasOne(d => d.IdSourceTypeNavigation)
                    .WithMany(p => p.TblVersion1)
                    .HasForeignKey(d => d.IdSourceType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersion_tblSourceType");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TblVersion1IdUserNavigation)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersion_tblProducerNExclusiveNUser");
            });

            modelBuilder.Entity<TblVersionAnaliz>(entity =>
            {
                entity.ToTable("tblVersionAnaliz");

                entity.Property(e => e.IdRate).HasColumnName("idRate");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.TblVersionAnaliz)
                    .HasForeignKey(d => d.IdFile)
                    .HasConstraintName("FK_tblVersionAnaliz_tblFile");

                entity.HasOne(d => d.IdGamePartNavigation)
                    .WithMany(p => p.TblVersionAnaliz)
                    .HasForeignKey(d => d.IdGamePart)
                    .HasConstraintName("FK_tblVersionAnaliz_tblGamePart");

                entity.HasOne(d => d.IdPictogramNavigation)
                    .WithMany(p => p.TblVersionAnaliz)
                    .HasForeignKey(d => d.IdPictogram)
                    .HasConstraintName("FK_tblVersionEsraStatusPictogram_tblPictogram");

                entity.HasOne(d => d.IdRateNavigation)
                    .WithMany(p => p.TblVersionAnaliz)
                    .HasForeignKey(d => d.IdRate)
                    .HasConstraintName("FK_tblVersionAnaliz_tblRate");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionAnaliz)
                    .HasForeignKey(d => d.IdVersion)
                    .HasConstraintName("FK_tblVersionAnaliz_tblVersion");
            });

            modelBuilder.Entity<TblVersionBasket>(entity =>
            {
                entity.ToTable("tblVersionBasket");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblVersionCategory>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdCategory });

                entity.ToTable("tblVersionCategory", "ipdbuser");

                entity.HasIndex(e => e.IdCategory);

                entity.HasOne(d => d.IdCategoryNavigation)
                    .WithMany(p => p.TblVersionCategory)
                    .HasForeignKey(d => d.IdCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionCategory_tblCategory");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionCategory)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionCategory_tblVersion");
            });

            modelBuilder.Entity<TblVersionCategory1>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdCategory });

                entity.ToTable("tblVersionCategory");

                entity.HasOne(d => d.IdCategoryNavigation)
                    .WithMany(p => p.TblVersionCategory1)
                    .HasForeignKey(d => d.IdCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionCategory_tblCategory");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionCategory1)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionCategory_tblVersion");
            });

            modelBuilder.Entity<TblVersionDetail>(entity =>
            {
                entity.ToTable("tblVersionDetail");

                entity.Property(e => e.GameState).HasMaxLength(100);

                entity.Property(e => e.IsPerformance).HasColumnName("isPerformance");
            });

            modelBuilder.Entity<TblVersionDetailGameType>(entity =>
            {
                entity.ToTable("tblVersionDetailGameType");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblVersionDetailOther>(entity =>
            {
                entity.HasKey(e => e.VersionDetailId);

                entity.ToTable("tblVersionDetailOther");

                entity.Property(e => e.VersionDetailId).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TblVersionEsra>(entity =>
            {
                entity.ToTable("tblVersionEsra", "ipdbuser");

                entity.HasIndex(e => e.IdEsra);

                entity.HasIndex(e => e.IdSystem);

                entity.HasIndex(e => e.IdVersion);

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.IdEsraNavigation)
                    .WithMany(p => p.TblVersionEsraIdEsraNavigation)
                    .HasForeignKey(d => d.IdEsra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionEsra_tblEsra");

                entity.HasOne(d => d.IdSystemNavigation)
                    .WithMany(p => p.TblVersionEsraIdSystemNavigation)
                    .HasForeignKey(d => d.IdSystem)
                    .HasConstraintName("FK_tblVersionEsra_tblEsra1");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionEsra)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionEsra_tblVersion");
            });

            modelBuilder.Entity<TblVersionEsra1>(entity =>
            {
                entity.ToTable("tblVersionEsra");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.IdEsraNavigation)
                    .WithMany(p => p.TblVersionEsra1IdEsraNavigation)
                    .HasForeignKey(d => d.IdEsra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionEsra_tblEsra");

                entity.HasOne(d => d.IdEsraStatusNavigation)
                    .WithMany(p => p.TblVersionEsra1)
                    .HasForeignKey(d => d.IdEsraStatus)
                    .HasConstraintName("FK_tblVersionEsra_tblEsraStatus");

                entity.HasOne(d => d.IdEsraTypeNavigation)
                    .WithMany(p => p.TblVersionEsra1)
                    .HasForeignKey(d => d.IdEsraType)
                    .HasConstraintName("FK_tblVersionEsra_TblEsraType");

                entity.HasOne(d => d.IdSystemNavigation)
                    .WithMany(p => p.TblVersionEsra1IdSystemNavigation)
                    .HasForeignKey(d => d.IdSystem)
                    .HasConstraintName("FK_tblVersionEsra_tblEsra1");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TblVersionEsra1)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionEsra");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionEsra1)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionEsra_tblVersion");
            });

            modelBuilder.Entity<TblVersionExclusive>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdExclusive });

                entity.ToTable("tblVersionExclusive");

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.IdExclusiveNavigation)
                    .WithMany(p => p.TblVersionExclusive)
                    .HasForeignKey(d => d.IdExclusive)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionExclusive_tblProducerNExclusiveNUser");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionExclusive)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionExclusive_tblVersion");
            });

            modelBuilder.Entity<TblVersionGenre>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdGenre });

                entity.ToTable("tblVersionGenre", "ipdbuser");

                entity.HasIndex(e => e.IdGenre);

                entity.HasOne(d => d.IdGenreNavigation)
                    .WithMany(p => p.TblVersionGenre)
                    .HasForeignKey(d => d.IdGenre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionGenre_tblGenre");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionGenre)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionGenre_tblVersion");
            });

            modelBuilder.Entity<TblVersionGenre1>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdGenre });

                entity.ToTable("tblVersionGenre");

                entity.HasOne(d => d.IdGenreNavigation)
                    .WithMany(p => p.TblVersionGenre1)
                    .HasForeignKey(d => d.IdGenre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionGenre_tblGenre");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionGenre1)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionGenre_tblVersion");
            });

            modelBuilder.Entity<TblVersionNarrat>(entity =>
            {
                entity.HasKey(e => e.IdVersion);

                entity.ToTable("tblVersionNarrat");

                entity.Property(e => e.IdVersion).ValueGeneratedNever();

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithOne(p => p.TblVersionNarrat)
                    .HasForeignKey<TblVersionNarrat>(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionNarrat_tblVersion");
            });

            modelBuilder.Entity<TblVersionPictogram>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdPictogram, e.IdUser });

                entity.ToTable("tblVersionPictogram");

                entity.Property(e => e.IsSuggestion).HasColumnName("isSuggestion");

                entity.HasOne(d => d.IdPictogramNavigation)
                    .WithMany(p => p.TblVersionPictogram)
                    .HasForeignKey(d => d.IdPictogram)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionPictogram_tblPictogram");

                entity.HasOne(d => d.IdRateNavigation)
                    .WithMany(p => p.TblVersionPictogram)
                    .HasForeignKey(d => d.IdRate)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionPictogram_tblRate");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TblVersionPictogram)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionPictogram_tblProducerNExclusiveNUser");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionPictogram)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionPictogram_tblVersion");
            });

            modelBuilder.Entity<TblVersionPictogram1>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdPictogram, e.IdUser });

                entity.ToTable("tblVersionPictogram", "ipdbuser");

                entity.HasIndex(e => e.IdPictogram);

                entity.Property(e => e.IsSuggestion).HasColumnName("isSuggestion");

                entity.HasOne(d => d.IdPictogramNavigation)
                    .WithMany(p => p.TblVersionPictogram1)
                    .HasForeignKey(d => d.IdPictogram)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionPictogram_tblPictogram");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionPictogram1)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionPictogram_tblVersion");
            });

            modelBuilder.Entity<TblVersionPublisherProducers>(entity =>
            {
                entity.HasKey(e => new { e.VersionId, e.ObjectId, e.Type });

                entity.ToTable("tblVersionPublisherProducers");

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<TblVersionScreenshot>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdFile });

                entity.ToTable("tblVersionScreenshot", "ipdbuser");

                entity.HasIndex(e => e.IdScreenshotType);

                entity.HasOne(d => d.IdScreenshotTypeNavigation)
                    .WithMany(p => p.TblVersionScreenshot)
                    .HasForeignKey(d => d.IdScreenshotType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionScreenshot_tblScreenshotType");
            });

            modelBuilder.Entity<TblVersionScreenshot1>(entity =>
            {
                entity.HasKey(e => new { e.IdVersion, e.IdFile });

                entity.ToTable("tblVersionScreenshot");

                entity.HasOne(d => d.IdScreenshotTypeNavigation)
                    .WithMany(p => p.TblVersionScreenshot1)
                    .HasForeignKey(d => d.IdScreenshotType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionScreenshot_tblScreenshotType");
            });

            modelBuilder.Entity<TblVersionSkill>(entity =>
            {
                entity.HasKey(e => new { e.IdSkillType, e.IdVersion, e.IdUser });

                entity.ToTable("tblVersionSkill");

                entity.Property(e => e.IdSkillType).HasColumnName("idSkillType");

                entity.Property(e => e.IdVersion).HasColumnName("idVersion");

                entity.Property(e => e.IsSuggestion).HasColumnName("isSuggestion");

                entity.HasOne(d => d.IdSkillTypeNavigation)
                    .WithMany(p => p.TblVersionSkill)
                    .HasForeignKey(d => d.IdSkillType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionSkill_tblSkillType");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TblVersionSkill)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionSkill_tblProducerNExclusiveNUser");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionSkill)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionSkill_tblVersion");
            });

            modelBuilder.Entity<TblVersionViewAngle>(entity =>
            {
                entity.HasKey(e => new { e.IdViewAngleType, e.IdVersion });

                entity.ToTable("tblVersionViewAngle");

                entity.Property(e => e.IdViewAngleType).HasColumnName("idViewAngleType");

                entity.Property(e => e.IdVersion).HasColumnName("idVersion");

                entity.HasOne(d => d.IdVersionNavigation)
                    .WithMany(p => p.TblVersionViewAngle)
                    .HasForeignKey(d => d.IdVersion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionViewAngle_tblVersion");

                entity.HasOne(d => d.IdViewAngleTypeNavigation)
                    .WithMany(p => p.TblVersionViewAngle)
                    .HasForeignKey(d => d.IdViewAngleType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblVersionViewAngle_tblViewAngleType");
            });

            modelBuilder.Entity<TblViewAngleType>(entity =>
            {
                entity.ToTable("tblViewAngleType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TblVisitLogs>(entity =>
            {
                entity.ToTable("tblVisitLogs");

                entity.Property(e => e.Time).HasColumnType("datetime");

                entity.Property(e => e.Url).HasColumnName("URL");

                entity.Property(e => e.UserAgent).HasMaxLength(200);

                entity.Property(e => e.UserIp)
                    .HasColumnName("UserIP")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Test>(entity =>
            {
                entity.ToTable("test");

                entity.Property(e => e.AuditStatusTest).HasColumnName("AuditStatus_test");

                entity.Property(e => e.CreatorTest).HasColumnName("Creator_test");

                entity.Property(e => e.InstanceIdTest).HasColumnName("InstanceId_test");

                entity.Property(e => e.InstanceSridTest).HasColumnName("InstanceSRId_test");

                entity.Property(e => e.IpTest).HasColumnName("IP_test");

                entity.Property(e => e.RegistrationDateTest).HasColumnName("RegistrationDate_test");

                entity.Property(e => e.RegistrationStatusTest).HasColumnName("RegistrationStatus_test");

                entity.Property(e => e.RegistrationTimeTest).HasColumnName("RegistrationTime_test");
            });

            modelBuilder.Entity<Test001>(entity =>
            {
                entity.ToTable("test001");

                entity.Property(e => e.Asdasd).HasColumnName("asdasd");

                entity.Property(e => e.AuditStatusTest001).HasColumnName("AuditStatus_test001");

                entity.Property(e => e.CreatorTest001).HasColumnName("Creator_test001");

                entity.Property(e => e.InstanceIdTest001).HasColumnName("InstanceId_test001");

                entity.Property(e => e.InstanceSridTest001).HasColumnName("InstanceSRId_test001");

                entity.Property(e => e.IpTest001).HasColumnName("IP_test001");

                entity.Property(e => e.RegistrationDateTest001).HasColumnName("RegistrationDate_test001");

                entity.Property(e => e.RegistrationStatusTest001).HasColumnName("RegistrationStatus_test001");

                entity.Property(e => e.RegistrationTimeTest001).HasColumnName("RegistrationTime_test001");
            });

            modelBuilder.Entity<Test2>(entity =>
            {
                entity.ToTable("test2");

                entity.Property(e => e.AuditStatusTest2).HasColumnName("AuditStatus_test2");

                entity.Property(e => e.CreatorTest2).HasColumnName("Creator_test2");

                entity.Property(e => e.DdlA).HasColumnName("ddlA");

                entity.Property(e => e.DdlB).HasColumnName("ddlB");

                entity.Property(e => e.Ddlruls).HasColumnName("ddlruls");

                entity.Property(e => e.InstanceIdTest2).HasColumnName("InstanceId_test2");

                entity.Property(e => e.InstanceSridTest2).HasColumnName("InstanceSRId_test2");

                entity.Property(e => e.IpTest2).HasColumnName("IP_test2");

                entity.Property(e => e.RegistrationDateTest2).HasColumnName("RegistrationDate_test2");

                entity.Property(e => e.RegistrationStatusTest2).HasColumnName("RegistrationStatus_test2");

                entity.Property(e => e.RegistrationTimeTest2).HasColumnName("RegistrationTime_test2");

                entity.Property(e => e.TxtC).HasColumnName("txtC");
            });

            modelBuilder.Entity<Test201808012>(entity =>
            {
                entity.ToTable("Test_20180801_2");

                entity.Property(e => e.AuditStatusTest201808012).HasColumnName("AuditStatus_Test_20180801_2");

                entity.Property(e => e.CreatorTest201808012).HasColumnName("Creator_Test_20180801_2");

                entity.Property(e => e.Ddl2).HasColumnName("ddl2");

                entity.Property(e => e.InstanceIdTest201808012).HasColumnName("InstanceId_Test_20180801_2");

                entity.Property(e => e.InstanceSridTest201808012).HasColumnName("InstanceSRId_Test_20180801_2");

                entity.Property(e => e.IpTest201808012).HasColumnName("IP_Test_20180801_2");

                entity.Property(e => e.RegistrationDateTest201808012).HasColumnName("RegistrationDate_Test_20180801_2");

                entity.Property(e => e.RegistrationStatusTest201808012).HasColumnName("RegistrationStatus_Test_20180801_2");

                entity.Property(e => e.RegistrationTimeTest201808012).HasColumnName("RegistrationTime_Test_20180801_2");

                entity.Property(e => e.Txt1).HasColumnName("txt1");

                entity.Property(e => e.Txt3).HasColumnName("txt3");
            });

            modelBuilder.Entity<Test201808013>(entity =>
            {
                entity.ToTable("Test_20180801_3");

                entity.Property(e => e.AuditStatusTest201808013).HasColumnName("AuditStatus_Test_20180801_3");

                entity.Property(e => e.CreatorTest201808013).HasColumnName("Creator_Test_20180801_3");

                entity.Property(e => e.InstanceIdTest201808013).HasColumnName("InstanceId_Test_20180801_3");

                entity.Property(e => e.InstanceSridTest201808013).HasColumnName("InstanceSRId_Test_20180801_3");

                entity.Property(e => e.IpTest201808013).HasColumnName("IP_Test_20180801_3");

                entity.Property(e => e.RegistrationDateTest201808013).HasColumnName("RegistrationDate_Test_20180801_3");

                entity.Property(e => e.RegistrationStatusTest201808013).HasColumnName("RegistrationStatus_Test_20180801_3");

                entity.Property(e => e.RegistrationTimeTest201808013).HasColumnName("RegistrationTime_Test_20180801_3");

                entity.Property(e => e.Rtb1).HasColumnName("rtb1");

                entity.Property(e => e.Txt1).HasColumnName("txt1");
            });

            modelBuilder.Entity<Test3>(entity =>
            {
                entity.ToTable("test3");

                entity.Property(e => e.AuditStatusTest3).HasColumnName("AuditStatus_test3");

                entity.Property(e => e.CreatorTest3).HasColumnName("Creator_test3");

                entity.Property(e => e.DrpA).HasColumnName("drpA");

                entity.Property(e => e.DrpB).HasColumnName("drpB");

                entity.Property(e => e.DrpRules).HasColumnName("drpRules");

                entity.Property(e => e.InstanceIdTest3).HasColumnName("InstanceId_test3");

                entity.Property(e => e.InstanceSridTest3).HasColumnName("InstanceSRId_test3");

                entity.Property(e => e.IpTest3).HasColumnName("IP_test3");

                entity.Property(e => e.RegistrationDateTest3).HasColumnName("RegistrationDate_test3");

                entity.Property(e => e.RegistrationStatusTest3).HasColumnName("RegistrationStatus_test3");

                entity.Property(e => e.RegistrationTimeTest3).HasColumnName("RegistrationTime_test3");

                entity.Property(e => e.TxtC).HasColumnName("txtC");
            });

            modelBuilder.Entity<TestForm>(entity =>
            {
                entity.Property(e => e.AuditStatusTestForm).HasColumnName("AuditStatus_TestForm");

                entity.Property(e => e.CreatorTestForm).HasColumnName("Creator_TestForm");

                entity.Property(e => e.InstanceIdTestForm).HasColumnName("InstanceId_TestForm");

                entity.Property(e => e.InstanceSridTestForm).HasColumnName("InstanceSRId_TestForm");

                entity.Property(e => e.IpTestForm).HasColumnName("IP_TestForm");

                entity.Property(e => e.RegistrationDateTestForm).HasColumnName("RegistrationDate_TestForm");

                entity.Property(e => e.RegistrationStatusTestForm).HasColumnName("RegistrationStatus_TestForm");

                entity.Property(e => e.RegistrationTimeTestForm).HasColumnName("RegistrationTime_TestForm");

                entity.Property(e => e.Txta).HasColumnName("txta");
            });

            modelBuilder.Entity<TestP001>(entity =>
            {
                entity.Property(e => e.AuditStatusTestP001).HasColumnName("AuditStatus_TestP001");

                entity.Property(e => e.CreatorTestP001).HasColumnName("Creator_TestP001");

                entity.Property(e => e.DrpChoose).HasColumnName("drpChoose");

                entity.Property(e => e.InstanceIdTestP001).HasColumnName("InstanceId_TestP001");

                entity.Property(e => e.InstanceSridTestP001).HasColumnName("InstanceSRId_TestP001");

                entity.Property(e => e.IpTestP001).HasColumnName("IP_TestP001");

                entity.Property(e => e.RegistrationDateTestP001).HasColumnName("RegistrationDate_TestP001");

                entity.Property(e => e.RegistrationStatusTestP001).HasColumnName("RegistrationStatus_TestP001");

                entity.Property(e => e.RegistrationTimeTestP001).HasColumnName("RegistrationTime_TestP001");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");

                entity.Property(e => e.TxtTitle2).HasColumnName("txtTitle2");
            });

            modelBuilder.Entity<TestP002>(entity =>
            {
                entity.Property(e => e.AuditStatusTestP002).HasColumnName("AuditStatus_TestP002");

                entity.Property(e => e.CreatorTestP002).HasColumnName("Creator_TestP002");

                entity.Property(e => e.DrpDropDown).HasColumnName("drpDropDown");

                entity.Property(e => e.InstanceIdTestP002).HasColumnName("InstanceId_TestP002");

                entity.Property(e => e.InstanceSridTestP002).HasColumnName("InstanceSRId_TestP002");

                entity.Property(e => e.IpTestP002).HasColumnName("IP_TestP002");

                entity.Property(e => e.RegistrationDateTestP002).HasColumnName("RegistrationDate_TestP002");

                entity.Property(e => e.RegistrationStatusTestP002).HasColumnName("RegistrationStatus_TestP002");

                entity.Property(e => e.RegistrationTimeTestP002).HasColumnName("RegistrationTime_TestP002");

                entity.Property(e => e.Txttext).HasColumnName("txttext");
            });

            modelBuilder.Entity<TestP002Sub1>(entity =>
            {
                entity.ToTable("TestP002_sub1");

                entity.Property(e => e.AuditStatusTestP002Sub1).HasColumnName("AuditStatus_TestP002_sub1");

                entity.Property(e => e.CreatorTestP002Sub1).HasColumnName("Creator_TestP002_sub1");

                entity.Property(e => e.InstanceIdTestP002Sub1).HasColumnName("InstanceId_TestP002_sub1");

                entity.Property(e => e.InstanceSridTestP002Sub1).HasColumnName("InstanceSRId_TestP002_sub1");

                entity.Property(e => e.IpTestP002Sub1).HasColumnName("IP_TestP002_sub1");

                entity.Property(e => e.RegistrationDateTestP002Sub1).HasColumnName("RegistrationDate_TestP002_sub1");

                entity.Property(e => e.RegistrationStatusTestP002Sub1).HasColumnName("RegistrationStatus_TestP002_sub1");

                entity.Property(e => e.RegistrationTimeTestP002Sub1).HasColumnName("RegistrationTime_TestP002_sub1");

                entity.Property(e => e.TxtText).HasColumnName("txtText");
            });

            modelBuilder.Entity<TestP002Sub2>(entity =>
            {
                entity.ToTable("TestP002_sub2");

                entity.Property(e => e.AuditStatusTestP002Sub2).HasColumnName("AuditStatus_TestP002_sub2");

                entity.Property(e => e.CreatorTestP002Sub2).HasColumnName("Creator_TestP002_sub2");

                entity.Property(e => e.InstanceIdTestP002Sub2).HasColumnName("InstanceId_TestP002_sub2");

                entity.Property(e => e.InstanceSridTestP002Sub2).HasColumnName("InstanceSRId_TestP002_sub2");

                entity.Property(e => e.IpTestP002Sub2).HasColumnName("IP_TestP002_sub2");

                entity.Property(e => e.RegistrationDateTestP002Sub2).HasColumnName("RegistrationDate_TestP002_sub2");

                entity.Property(e => e.RegistrationStatusTestP002Sub2).HasColumnName("RegistrationStatus_TestP002_sub2");

                entity.Property(e => e.RegistrationTimeTestP002Sub2).HasColumnName("RegistrationTime_TestP002_sub2");
            });

            modelBuilder.Entity<TestP00f2>(entity =>
            {
                entity.ToTable("TestP00F2");

                entity.Property(e => e.AuditStatusTestP00f2).HasColumnName("AuditStatus_TestP00F2");

                entity.Property(e => e.CreatorTestP00f2).HasColumnName("Creator_TestP00F2");

                entity.Property(e => e.InstanceIdTestP00f2).HasColumnName("InstanceId_TestP00F2");

                entity.Property(e => e.InstanceSridTestP00f2).HasColumnName("InstanceSRId_TestP00F2");

                entity.Property(e => e.IpTestP00f2).HasColumnName("IP_TestP00F2");

                entity.Property(e => e.RegistrationDateTestP00f2).HasColumnName("RegistrationDate_TestP00F2");

                entity.Property(e => e.RegistrationStatusTestP00f2).HasColumnName("RegistrationStatus_TestP00F2");

                entity.Property(e => e.RegistrationTimeTestP00f2).HasColumnName("RegistrationTime_TestP00F2");
            });

            modelBuilder.Entity<TestP00f3>(entity =>
            {
                entity.ToTable("TestP00F3");

                entity.Property(e => e.AuditStatusTestP00f3).HasColumnName("AuditStatus_TestP00F3");

                entity.Property(e => e.CreatorTestP00f3).HasColumnName("Creator_TestP00F3");

                entity.Property(e => e.InstanceIdTestP00f3).HasColumnName("InstanceId_TestP00F3");

                entity.Property(e => e.InstanceSridTestP00f3).HasColumnName("InstanceSRId_TestP00F3");

                entity.Property(e => e.IpTestP00f3).HasColumnName("IP_TestP00F3");

                entity.Property(e => e.PdtDate).HasColumnName("pdtDate");

                entity.Property(e => e.PdtDateGregorian)
                    .HasColumnName("pdtDate_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateTestP00f3).HasColumnName("RegistrationDate_TestP00F3");

                entity.Property(e => e.RegistrationStatusTestP00f3).HasColumnName("RegistrationStatus_TestP00F3");

                entity.Property(e => e.RegistrationTimeTestP00f3).HasColumnName("RegistrationTime_TestP00F3");
            });

            modelBuilder.Entity<Testtx>(entity =>
            {
                entity.ToTable("testtx");

                entity.Property(e => e.AuditStatusTesttx).HasColumnName("AuditStatus_testtx");

                entity.Property(e => e.Cbla).HasColumnName("cbla");

                entity.Property(e => e.CreatorTesttx).HasColumnName("Creator_testtx");

                entity.Property(e => e.InstanceIdTesttx).HasColumnName("InstanceId_testtx");

                entity.Property(e => e.InstanceSridTesttx).HasColumnName("InstanceSRId_testtx");

                entity.Property(e => e.IpTesttx).HasColumnName("IP_testtx");

                entity.Property(e => e.RegistrationDateTesttx).HasColumnName("RegistrationDate_testtx");

                entity.Property(e => e.RegistrationStatusTesttx).HasColumnName("RegistrationStatus_testtx");

                entity.Property(e => e.RegistrationTimeTesttx).HasColumnName("RegistrationTime_testtx");

                entity.Property(e => e.Txtb).HasColumnName("txtb");
            });

            modelBuilder.Entity<TrackChanges>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ChangeType).HasDefaultValueSql("((0))");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Ip).HasColumnName("IP");
            });

            modelBuilder.Entity<TransferPointsApplyingInternalSoftwareChanges>(entity =>
            {
                entity.ToTable("TransferPoints_ApplyingInternalSoftwareChanges");

                entity.Property(e => e.AuditStatusTransferPointsApplyingInternalSoftwareChanges).HasColumnName("AuditStatus_TransferPoints_ApplyingInternalSoftwareChanges");

                entity.Property(e => e.AxtDefectDescription).HasColumnName("axtDefectDescription");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorTransferPointsApplyingInternalSoftwareChanges).HasColumnName("Creator_TransferPoints_ApplyingInternalSoftwareChanges");

                entity.Property(e => e.DdlDocumentationVerification).HasColumnName("ddlDocumentationVerification");

                entity.Property(e => e.InstanceIdTransferPointsApplyingInternalSoftwareChanges).HasColumnName("InstanceId_TransferPoints_ApplyingInternalSoftwareChanges");

                entity.Property(e => e.InstanceSridTransferPointsApplyingInternalSoftwareChanges).HasColumnName("InstanceSRId_TransferPoints_ApplyingInternalSoftwareChanges");

                entity.Property(e => e.IpTransferPointsApplyingInternalSoftwareChanges).HasColumnName("IP_TransferPoints_ApplyingInternalSoftwareChanges");

                entity.Property(e => e.RegistrationDateTransferPointsApplyingInternalSoftwareChanges).HasColumnName("RegistrationDate_TransferPoints_ApplyingInternalSoftwareChanges");

                entity.Property(e => e.RegistrationStatusTransferPointsApplyingInternalSoftwareChanges).HasColumnName("RegistrationStatus_TransferPoints_ApplyingInternalSoftwareChanges");

                entity.Property(e => e.RegistrationTimeTransferPointsApplyingInternalSoftwareChanges).HasColumnName("RegistrationTime_TransferPoints_ApplyingInternalSoftwareChanges");

                entity.Property(e => e.UplUploadDocumentation).HasColumnName("uplUploadDocumentation");
            });

            modelBuilder.Entity<TransferPointsFinalExaminationRequest>(entity =>
            {
                entity.ToTable("TransferPoints_FinalExaminationRequest");

                entity.Property(e => e.AuditStatusTransferPointsFinalExaminationRequest).HasColumnName("AuditStatus_TransferPoints_FinalExaminationRequest");

                entity.Property(e => e.AxtOrderActionsInternalSoftware).HasColumnName("axtOrderActionsInternalSoftware");

                entity.Property(e => e.AxtOrderFinancialActions).HasColumnName("axtOrderFinancialActions");

                entity.Property(e => e.AxtRefusedRequests).HasColumnName("axtRefusedRequests");

                entity.Property(e => e.CreatorTransferPointsFinalExaminationRequest).HasColumnName("Creator_TransferPoints_FinalExaminationRequest");

                entity.Property(e => e.DdlResultReview).HasColumnName("ddlResultReview");

                entity.Property(e => e.InstanceIdTransferPointsFinalExaminationRequest).HasColumnName("InstanceId_TransferPoints_FinalExaminationRequest");

                entity.Property(e => e.InstanceSridTransferPointsFinalExaminationRequest).HasColumnName("InstanceSRId_TransferPoints_FinalExaminationRequest");

                entity.Property(e => e.IpTransferPointsFinalExaminationRequest).HasColumnName("IP_TransferPoints_FinalExaminationRequest");

                entity.Property(e => e.RegistrationDateTransferPointsFinalExaminationRequest).HasColumnName("RegistrationDate_TransferPoints_FinalExaminationRequest");

                entity.Property(e => e.RegistrationStatusTransferPointsFinalExaminationRequest).HasColumnName("RegistrationStatus_TransferPoints_FinalExaminationRequest");

                entity.Property(e => e.RegistrationTimeTransferPointsFinalExaminationRequest).HasColumnName("RegistrationTime_TransferPoints_FinalExaminationRequest");
            });

            modelBuilder.Entity<TransferPointsFinancialReviews>(entity =>
            {
                entity.ToTable("TransferPoints_FinancialReviews");

                entity.Property(e => e.AuditStatusTransferPointsFinancialReviews).HasColumnName("AuditStatus_TransferPoints_FinancialReviews");

                entity.Property(e => e.CreatorTransferPointsFinancialReviews).HasColumnName("Creator_TransferPoints_FinancialReviews");

                entity.Property(e => e.GtblSubmitComment).HasColumnName("gtblSubmitComment");

                entity.Property(e => e.InstanceIdTransferPointsFinancialReviews).HasColumnName("InstanceId_TransferPoints_FinancialReviews");

                entity.Property(e => e.InstanceSridTransferPointsFinancialReviews).HasColumnName("InstanceSRId_TransferPoints_FinancialReviews");

                entity.Property(e => e.IpTransferPointsFinancialReviews).HasColumnName("IP_TransferPoints_FinancialReviews");

                entity.Property(e => e.RegistrationDateTransferPointsFinancialReviews).HasColumnName("RegistrationDate_TransferPoints_FinancialReviews");

                entity.Property(e => e.RegistrationStatusTransferPointsFinancialReviews).HasColumnName("RegistrationStatus_TransferPoints_FinancialReviews");

                entity.Property(e => e.RegistrationTimeTransferPointsFinancialReviews).HasColumnName("RegistrationTime_TransferPoints_FinancialReviews");

                entity.Property(e => e.UplUploadDocumentation).HasColumnName("uplUploadDocumentation");
            });

            modelBuilder.Entity<TransferPointsInitialReviewRequest>(entity =>
            {
                entity.ToTable("TransferPoints_InitialReviewRequest");

                entity.Property(e => e.AuditStatusTransferPointsInitialReviewRequest).HasColumnName("AuditStatus_TransferPoints_InitialReviewRequest");

                entity.Property(e => e.AxtFinancialManagerReview).HasColumnName("axtFinancialManagerReview");

                entity.Property(e => e.AxtInternalSoftwareReviews).HasColumnName("axtInternalSoftwareReviews");

                entity.Property(e => e.AxtLegalAdvisorReview).HasColumnName("axtLegalAdvisorReview");

                entity.Property(e => e.AxtRefusedRequests).HasColumnName("axtRefusedRequests");

                entity.Property(e => e.AxtReviewDeputySupervisor).HasColumnName("axtReviewDeputySupervisor");

                entity.Property(e => e.CreatorTransferPointsInitialReviewRequest).HasColumnName("Creator_TransferPoints_InitialReviewRequest");

                entity.Property(e => e.DdlPreliminaryReview).HasColumnName("ddlPreliminaryReview");

                entity.Property(e => e.InstanceIdTransferPointsInitialReviewRequest).HasColumnName("InstanceId_TransferPoints_InitialReviewRequest");

                entity.Property(e => e.InstanceSridTransferPointsInitialReviewRequest).HasColumnName("InstanceSRId_TransferPoints_InitialReviewRequest");

                entity.Property(e => e.IpTransferPointsInitialReviewRequest).HasColumnName("IP_TransferPoints_InitialReviewRequest");

                entity.Property(e => e.RegistrationDateTransferPointsInitialReviewRequest).HasColumnName("RegistrationDate_TransferPoints_InitialReviewRequest");

                entity.Property(e => e.RegistrationStatusTransferPointsInitialReviewRequest).HasColumnName("RegistrationStatus_TransferPoints_InitialReviewRequest");

                entity.Property(e => e.RegistrationTimeTransferPointsInitialReviewRequest).HasColumnName("RegistrationTime_TransferPoints_InitialReviewRequest");
            });

            modelBuilder.Entity<TransferPointsInternalSoftwareReviews>(entity =>
            {
                entity.ToTable("TransferPoints_InternalSoftwareReviews");

                entity.Property(e => e.AuditStatusTransferPointsInternalSoftwareReviews).HasColumnName("AuditStatus_TransferPoints_InternalSoftwareReviews");

                entity.Property(e => e.AxtInternalSoftwareReviews).HasColumnName("axtInternalSoftwareReviews");

                entity.Property(e => e.CreatorTransferPointsInternalSoftwareReviews).HasColumnName("Creator_TransferPoints_InternalSoftwareReviews");

                entity.Property(e => e.InstanceIdTransferPointsInternalSoftwareReviews).HasColumnName("InstanceId_TransferPoints_InternalSoftwareReviews");

                entity.Property(e => e.InstanceSridTransferPointsInternalSoftwareReviews).HasColumnName("InstanceSRId_TransferPoints_InternalSoftwareReviews");

                entity.Property(e => e.IpTransferPointsInternalSoftwareReviews).HasColumnName("IP_TransferPoints_InternalSoftwareReviews");

                entity.Property(e => e.RegistrationDateTransferPointsInternalSoftwareReviews).HasColumnName("RegistrationDate_TransferPoints_InternalSoftwareReviews");

                entity.Property(e => e.RegistrationStatusTransferPointsInternalSoftwareReviews).HasColumnName("RegistrationStatus_TransferPoints_InternalSoftwareReviews");

                entity.Property(e => e.RegistrationTimeTransferPointsInternalSoftwareReviews).HasColumnName("RegistrationTime_TransferPoints_InternalSoftwareReviews");

                entity.Property(e => e.UplUploadDocumentation).HasColumnName("uplUploadDocumentation");
            });

            modelBuilder.Entity<TransferPointsLawyerReviews>(entity =>
            {
                entity.ToTable("TransferPoints_LawyerReviews");

                entity.Property(e => e.AuditStatusTransferPointsLawyerReviews).HasColumnName("AuditStatus_TransferPoints_LawyerReviews");

                entity.Property(e => e.AxtSubmitComment).HasColumnName("axtSubmitComment");

                entity.Property(e => e.CreatorTransferPointsLawyerReviews).HasColumnName("Creator_TransferPoints_LawyerReviews");

                entity.Property(e => e.InstanceIdTransferPointsLawyerReviews).HasColumnName("InstanceId_TransferPoints_LawyerReviews");

                entity.Property(e => e.InstanceSridTransferPointsLawyerReviews).HasColumnName("InstanceSRId_TransferPoints_LawyerReviews");

                entity.Property(e => e.IpTransferPointsLawyerReviews).HasColumnName("IP_TransferPoints_LawyerReviews");

                entity.Property(e => e.RegistrationDateTransferPointsLawyerReviews).HasColumnName("RegistrationDate_TransferPoints_LawyerReviews");

                entity.Property(e => e.RegistrationStatusTransferPointsLawyerReviews).HasColumnName("RegistrationStatus_TransferPoints_LawyerReviews");

                entity.Property(e => e.RegistrationTimeTransferPointsLawyerReviews).HasColumnName("RegistrationTime_TransferPoints_LawyerReviews");

                entity.Property(e => e.UplUploadDocumentation).HasColumnName("uplUploadDocumentation");
            });

            modelBuilder.Entity<TransferPointsSubmitRatingTransfer>(entity =>
            {
                entity.ToTable("TransferPoints_SubmitRatingTransfer");

                entity.Property(e => e.AuditStatusTransferPointsSubmitRatingTransfer).HasColumnName("AuditStatus_TransferPoints_SubmitRatingTransfer");

                entity.Property(e => e.AxtRequestDescription).HasColumnName("axtRequestDescription");

                entity.Property(e => e.CreatorTransferPointsSubmitRatingTransfer).HasColumnName("Creator_TransferPoints_SubmitRatingTransfer");

                entity.Property(e => e.InstanceIdTransferPointsSubmitRatingTransfer).HasColumnName("InstanceId_TransferPoints_SubmitRatingTransfer");

                entity.Property(e => e.InstanceSridTransferPointsSubmitRatingTransfer).HasColumnName("InstanceSRId_TransferPoints_SubmitRatingTransfer");

                entity.Property(e => e.IpTransferPointsSubmitRatingTransfer).HasColumnName("IP_TransferPoints_SubmitRatingTransfer");

                entity.Property(e => e.RegistrationDateTransferPointsSubmitRatingTransfer).HasColumnName("RegistrationDate_TransferPoints_SubmitRatingTransfer");

                entity.Property(e => e.RegistrationStatusTransferPointsSubmitRatingTransfer).HasColumnName("RegistrationStatus_TransferPoints_SubmitRatingTransfer");

                entity.Property(e => e.RegistrationTimeTransferPointsSubmitRatingTransfer).HasColumnName("RegistrationTime_TransferPoints_SubmitRatingTransfer");

                entity.Property(e => e.UplUploadDocumentation).HasColumnName("uplUploadDocumentation");
            });

            modelBuilder.Entity<TransferPointsSupervisoryReviews>(entity =>
            {
                entity.ToTable("TransferPoints_SupervisoryReviews");

                entity.Property(e => e.AuditStatusTransferPointsSupervisoryReviews).HasColumnName("AuditStatus_TransferPoints_SupervisoryReviews");

                entity.Property(e => e.AxtSubmitComment).HasColumnName("axtSubmitComment");

                entity.Property(e => e.CreatorTransferPointsSupervisoryReviews).HasColumnName("Creator_TransferPoints_SupervisoryReviews");

                entity.Property(e => e.InstanceIdTransferPointsSupervisoryReviews).HasColumnName("InstanceId_TransferPoints_SupervisoryReviews");

                entity.Property(e => e.InstanceSridTransferPointsSupervisoryReviews).HasColumnName("InstanceSRId_TransferPoints_SupervisoryReviews");

                entity.Property(e => e.IpTransferPointsSupervisoryReviews).HasColumnName("IP_TransferPoints_SupervisoryReviews");

                entity.Property(e => e.RegistrationDateTransferPointsSupervisoryReviews).HasColumnName("RegistrationDate_TransferPoints_SupervisoryReviews");

                entity.Property(e => e.RegistrationStatusTransferPointsSupervisoryReviews).HasColumnName("RegistrationStatus_TransferPoints_SupervisoryReviews");

                entity.Property(e => e.RegistrationTimeTransferPointsSupervisoryReviews).HasColumnName("RegistrationTime_TransferPoints_SupervisoryReviews");

                entity.Property(e => e.UplUploadDocumentation).HasColumnName("uplUploadDocumentation");
            });

            modelBuilder.Entity<UnCategorizedContentForm>(entity =>
            {
                entity.ToTable("unCategorizedContentForm");

                entity.Property(e => e.AuditStatusUnCategorizedContentForm).HasColumnName("AuditStatus_unCategorizedContentForm");

                entity.Property(e => e.CreatorUnCategorizedContentForm).HasColumnName("Creator_unCategorizedContentForm");

                entity.Property(e => e.DdlSath).HasColumnName("ddlSath");

                entity.Property(e => e.DdlSource).HasColumnName("ddlSource");

                entity.Property(e => e.InstanceIdUnCategorizedContentForm).HasColumnName("InstanceId_unCategorizedContentForm");

                entity.Property(e => e.InstanceSridUnCategorizedContentForm).HasColumnName("InstanceSRId_unCategorizedContentForm");

                entity.Property(e => e.IpUnCategorizedContentForm).HasColumnName("IP_unCategorizedContentForm");

                entity.Property(e => e.RegistrationDateUnCategorizedContentForm).HasColumnName("RegistrationDate_unCategorizedContentForm");

                entity.Property(e => e.RegistrationStatusUnCategorizedContentForm).HasColumnName("RegistrationStatus_unCategorizedContentForm");

                entity.Property(e => e.RegistrationTimeUnCategorizedContentForm).HasColumnName("RegistrationTime_unCategorizedContentForm");

                entity.Property(e => e.TxaTozihat).HasColumnName("txaTozihat");

                entity.Property(e => e.TxtFileName).HasColumnName("txtFileName");

                entity.Property(e => e.TxtTime).HasColumnName("txtTime");

                entity.Property(e => e.UplFilm).HasColumnName("uplFilm");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.UnCategorizedContentForm)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AnalyzeReportForm_unCategorizedContentForm");
            });

            modelBuilder.Entity<UnclassifiedContent>(entity =>
            {
                entity.Property(e => e.AuditStatusUnclassifiedContent).HasColumnName("AuditStatus_UnclassifiedContent");

                entity.Property(e => e.CreatorUnclassifiedContent).HasColumnName("Creator_UnclassifiedContent");

                entity.Property(e => e.InstanceIdUnclassifiedContent).HasColumnName("InstanceId_UnclassifiedContent");

                entity.Property(e => e.InstanceSridUnclassifiedContent).HasColumnName("InstanceSRId_UnclassifiedContent");

                entity.Property(e => e.IpUnclassifiedContent).HasColumnName("IP_UnclassifiedContent");

                entity.Property(e => e.Iuygveirtyreiutyiervbteritbyrrvtyutyuntyuntyuyt).HasColumnName("iuygveirtyreiutyiervbteritbyrrvtyutyuntyuntyuyt");

                entity.Property(e => e.RegistrationDateUnclassifiedContent).HasColumnName("RegistrationDate_UnclassifiedContent");

                entity.Property(e => e.RegistrationStatusUnclassifiedContent).HasColumnName("RegistrationStatus_UnclassifiedContent");

                entity.Property(e => e.RegistrationTimeUnclassifiedContent).HasColumnName("RegistrationTime_UnclassifiedContent");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxtContentSource).HasColumnName("txtContentSource");

                entity.Property(e => e.TxtFileName).HasColumnName("txtFileName");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.UnclassifiedContent)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AnalyzerReport_UnclassifiedContent");
            });

            modelBuilder.Entity<UnitMainActivity>(entity =>
            {
                entity.Property(e => e.AuditStatusUnitMainActivity).HasColumnName("AuditStatus_UnitMainActivity");

                entity.Property(e => e.CreatorUnitMainActivity).HasColumnName("Creator_UnitMainActivity");

                entity.Property(e => e.DdlUnit).HasColumnName("ddlUnit");

                entity.Property(e => e.InstanceIdUnitMainActivity).HasColumnName("InstanceId_UnitMainActivity");

                entity.Property(e => e.InstanceSridUnitMainActivity).HasColumnName("InstanceSRId_UnitMainActivity");

                entity.Property(e => e.IpUnitMainActivity).HasColumnName("IP_UnitMainActivity");

                entity.Property(e => e.RegistrationDateUnitMainActivity).HasColumnName("RegistrationDate_UnitMainActivity");

                entity.Property(e => e.RegistrationStatusUnitMainActivity).HasColumnName("RegistrationStatus_UnitMainActivity");

                entity.Property(e => e.RegistrationTimeUnitMainActivity).HasColumnName("RegistrationTime_UnitMainActivity");

                entity.Property(e => e.TxtMainActivity).HasColumnName("txtMainActivity");
            });

            modelBuilder.Entity<Units>(entity =>
            {
                entity.HasIndex(e => e.OrganizationId)
                    .HasName("IX_OrganizationId");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Units)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("FK_dbo.Units_dbo.Organizations_OrganizationId");
            });

            modelBuilder.Entity<UnitSubActivity>(entity =>
            {
                entity.Property(e => e.AuditStatusUnitSubActivity).HasColumnName("AuditStatus_UnitSubActivity");

                entity.Property(e => e.CreatorUnitSubActivity).HasColumnName("Creator_UnitSubActivity");

                entity.Property(e => e.DdlMainActivity).HasColumnName("ddlMainActivity");

                entity.Property(e => e.InstanceIdUnitSubActivity).HasColumnName("InstanceId_UnitSubActivity");

                entity.Property(e => e.InstanceSridUnitSubActivity).HasColumnName("InstanceSRId_UnitSubActivity");

                entity.Property(e => e.IpUnitSubActivity).HasColumnName("IP_UnitSubActivity");

                entity.Property(e => e.RegistrationDateUnitSubActivity).HasColumnName("RegistrationDate_UnitSubActivity");

                entity.Property(e => e.RegistrationStatusUnitSubActivity).HasColumnName("RegistrationStatus_UnitSubActivity");

                entity.Property(e => e.RegistrationTimeUnitSubActivity).HasColumnName("RegistrationTime_UnitSubActivity");

                entity.Property(e => e.TxtSubActivity).HasColumnName("txtSubActivity");
            });

            modelBuilder.Entity<UploadFullGameVideo>(entity =>
            {
                entity.Property(e => e.AuditStatusUploadFullGameVideo).HasColumnName("AuditStatus_UploadFullGameVideo");

                entity.Property(e => e.CreatorUploadFullGameVideo).HasColumnName("Creator_UploadFullGameVideo");

                entity.Property(e => e.InstanceIdUploadFullGameVideo).HasColumnName("InstanceId_UploadFullGameVideo");

                entity.Property(e => e.InstanceSridUploadFullGameVideo).HasColumnName("InstanceSRId_UploadFullGameVideo");

                entity.Property(e => e.IpUploadFullGameVideo).HasColumnName("IP_UploadFullGameVideo");

                entity.Property(e => e.RegistrationDateUploadFullGameVideo).HasColumnName("RegistrationDate_UploadFullGameVideo");

                entity.Property(e => e.RegistrationStatusUploadFullGameVideo).HasColumnName("RegistrationStatus_UploadFullGameVideo");

                entity.Property(e => e.RegistrationTimeUploadFullGameVideo).HasColumnName("RegistrationTime_UploadFullGameVideo");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.UploadFullGameVideo)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_GamerVideo_UploadFullGameVideo");
            });

            modelBuilder.Entity<UpstreamDocuments>(entity =>
            {
                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<UserIdeditorDescriptionRejection>(entity =>
            {
                entity.ToTable("UserIDEditor_DescriptionRejection");

                entity.Property(e => e.AuditStatusUserIdeditorDescriptionRejection).HasColumnName("AuditStatus_UserIDEditor_DescriptionRejection");

                entity.Property(e => e.AxtRejectionApplying).HasColumnName("axtRejectionApplying");

                entity.Property(e => e.CreatorUserIdeditorDescriptionRejection).HasColumnName("Creator_UserIDEditor_DescriptionRejection");

                entity.Property(e => e.InstanceIdUserIdeditorDescriptionRejection).HasColumnName("InstanceId_UserIDEditor_DescriptionRejection");

                entity.Property(e => e.InstanceSridUserIdeditorDescriptionRejection).HasColumnName("InstanceSRId_UserIDEditor_DescriptionRejection");

                entity.Property(e => e.IpUserIdeditorDescriptionRejection).HasColumnName("IP_UserIDEditor_DescriptionRejection");

                entity.Property(e => e.RegistrationDateUserIdeditorDescriptionRejection).HasColumnName("RegistrationDate_UserIDEditor_DescriptionRejection");

                entity.Property(e => e.RegistrationStatusUserIdeditorDescriptionRejection).HasColumnName("RegistrationStatus_UserIDEditor_DescriptionRejection");

                entity.Property(e => e.RegistrationTimeUserIdeditorDescriptionRejection).HasColumnName("RegistrationTime_UserIDEditor_DescriptionRejection");
            });

            modelBuilder.Entity<UserIdeditorFinalInformation>(entity =>
            {
                entity.ToTable("UserIDEditor_FinalInformation");

                entity.Property(e => e.AuditStatusUserIdeditorFinalInformation).HasColumnName("AuditStatus_UserIDEditor_FinalInformation");

                entity.Property(e => e.AxtDescription).HasColumnName("axtDescription");

                entity.Property(e => e.CreatorUserIdeditorFinalInformation).HasColumnName("Creator_UserIDEditor_FinalInformation");

                entity.Property(e => e.DdlApplicantType).HasColumnName("ddlApplicantType");

                entity.Property(e => e.DdlKind).HasColumnName("ddlKind");

                entity.Property(e => e.InstanceIdUserIdeditorFinalInformation).HasColumnName("InstanceId_UserIDEditor_FinalInformation");

                entity.Property(e => e.InstanceSridUserIdeditorFinalInformation).HasColumnName("InstanceSRId_UserIDEditor_FinalInformation");

                entity.Property(e => e.IpUserIdeditorFinalInformation).HasColumnName("IP_UserIDEditor_FinalInformation");

                entity.Property(e => e.NumEconomicCode).HasColumnName("numEconomicCode");

                entity.Property(e => e.NumNationalCodeCeo).HasColumnName("numNationalCodeCEO");

                entity.Property(e => e.NumPostalCode).HasColumnName("numPostalCode");

                entity.Property(e => e.NumRegistrationNumber).HasColumnName("numRegistrationNumber");

                entity.Property(e => e.PdateDateRegistration).HasColumnName("pdateDateRegistration");

                entity.Property(e => e.PdateDateRegistrationGregorian)
                    .HasColumnName("pdateDateRegistration_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegistrationDateUserIdeditorFinalInformation).HasColumnName("RegistrationDate_UserIDEditor_FinalInformation");

                entity.Property(e => e.RegistrationStatusUserIdeditorFinalInformation).HasColumnName("RegistrationStatus_UserIDEditor_FinalInformation");

                entity.Property(e => e.RegistrationTimeUserIdeditorFinalInformation).HasColumnName("RegistrationTime_UserIDEditor_FinalInformation");

                entity.Property(e => e.TxtNameCeo).HasColumnName("txtNameCEO");

                entity.Property(e => e.TxtNameCompany).HasColumnName("txtNameCompany");

                entity.Property(e => e.TxtSurnameCeo).HasColumnName("txtSurnameCEO");

                entity.Property(e => e.UplDocumentation).HasColumnName("uplDocumentation");
            });

            modelBuilder.Entity<UserIdeditorPrimaryInformation>(entity =>
            {
                entity.ToTable("UserIDEditor_PrimaryInformation");

                entity.Property(e => e.AuditStatusUserIdeditorPrimaryInformation).HasColumnName("AuditStatus_UserIDEditor_PrimaryInformation");

                entity.Property(e => e.CreatorUserIdeditorPrimaryInformation).HasColumnName("Creator_UserIDEditor_PrimaryInformation");

                entity.Property(e => e.InstanceIdUserIdeditorPrimaryInformation).HasColumnName("InstanceId_UserIDEditor_PrimaryInformation");

                entity.Property(e => e.InstanceSridUserIdeditorPrimaryInformation).HasColumnName("InstanceSRId_UserIDEditor_PrimaryInformation");

                entity.Property(e => e.IpUserIdeditorPrimaryInformation).HasColumnName("IP_UserIDEditor_PrimaryInformation");

                entity.Property(e => e.MailEmail).HasColumnName("mailEMail");

                entity.Property(e => e.NumFixedPhoneNumber).HasColumnName("numFixedPhoneNumber");

                entity.Property(e => e.NumMobilePhoneNumber).HasColumnName("numMobilePhoneNumber");

                entity.Property(e => e.RegistrationDateUserIdeditorPrimaryInformation).HasColumnName("RegistrationDate_UserIDEditor_PrimaryInformation");

                entity.Property(e => e.RegistrationStatusUserIdeditorPrimaryInformation).HasColumnName("RegistrationStatus_UserIDEditor_PrimaryInformation");

                entity.Property(e => e.RegistrationTimeUserIdeditorPrimaryInformation).HasColumnName("RegistrationTime_UserIDEditor_PrimaryInformation");

                entity.Property(e => e.TxtLastName).HasColumnName("txtLastName");

                entity.Property(e => e.TxtName).HasColumnName("txtName");

                entity.Property(e => e.UplRequestDocumentationImage).HasColumnName("uplRequestDocumentationImage");
            });

            modelBuilder.Entity<UserIdeditorUserName>(entity =>
            {
                entity.ToTable("UserIDEditor_UserName");

                entity.Property(e => e.AuditStatusUserIdeditorUserName).HasColumnName("AuditStatus_UserIDEditor_UserName");

                entity.Property(e => e.CreatorUserIdeditorUserName).HasColumnName("Creator_UserIDEditor_UserName");

                entity.Property(e => e.DdlOrg).HasColumnName("ddlOrg");

                entity.Property(e => e.InstanceIdUserIdeditorUserName).HasColumnName("InstanceId_UserIDEditor_UserName");

                entity.Property(e => e.InstanceSridUserIdeditorUserName).HasColumnName("InstanceSRId_UserIDEditor_UserName");

                entity.Property(e => e.IpUserIdeditorUserName).HasColumnName("IP_UserIDEditor_UserName");

                entity.Property(e => e.RegistrationDateUserIdeditorUserName).HasColumnName("RegistrationDate_UserIDEditor_UserName");

                entity.Property(e => e.RegistrationStatusUserIdeditorUserName).HasColumnName("RegistrationStatus_UserIDEditor_UserName");

                entity.Property(e => e.RegistrationTimeUserIdeditorUserName).HasColumnName("RegistrationTime_UserIDEditor_UserName");

                entity.Property(e => e.TxtUserIdeditor).HasColumnName("txtUserIDEditor");

                entity.Property(e => e.Txtpassword).HasColumnName("txtpassword");
            });

            modelBuilder.Entity<UserMessages>(entity =>
            {
                entity.Property(e => e.InstanceIs).HasDefaultValueSql("((0))");

                entity.Property(e => e.SmailId)
                    .HasColumnName("SMailId")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<UserRoles>(entity =>
            {
                entity.HasKey(e => e.UserRoleId);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.HasIndex(e => e.UserName)
                    .HasName("IX_UserName")
                    .IsUnique();

                entity.Property(e => e.UserName).HasMaxLength(200);
            });

            modelBuilder.Entity<ValetChecking>(entity =>
            {
                entity.Property(e => e.AuditStatusValetChecking).HasColumnName("AuditStatus_ValetChecking");

                entity.Property(e => e.CreatorValetChecking).HasColumnName("Creator_ValetChecking");

                entity.Property(e => e.InstanceIdValetChecking).HasColumnName("InstanceId_ValetChecking");

                entity.Property(e => e.InstanceSridValetChecking).HasColumnName("InstanceSRId_ValetChecking");

                entity.Property(e => e.IpValetChecking).HasColumnName("IP_ValetChecking");

                entity.Property(e => e.RegistrationDateValetChecking).HasColumnName("RegistrationDate_ValetChecking");

                entity.Property(e => e.RegistrationStatusValetChecking).HasColumnName("RegistrationStatus_ValetChecking");

                entity.Property(e => e.RegistrationTimeValetChecking).HasColumnName("RegistrationTime_ValetChecking");
            });

            modelBuilder.Entity<ValetUploads>(entity =>
            {
                entity.Property(e => e.AuditStatusValetUploads).HasColumnName("AuditStatus_ValetUploads");

                entity.Property(e => e.CreatorValetUploads).HasColumnName("Creator_ValetUploads");

                entity.Property(e => e.InstanceIdValetUploads).HasColumnName("InstanceId_ValetUploads");

                entity.Property(e => e.InstanceSridValetUploads).HasColumnName("InstanceSRId_ValetUploads");

                entity.Property(e => e.IpValetUploads).HasColumnName("IP_ValetUploads");

                entity.Property(e => e.RegistrationDateValetUploads).HasColumnName("RegistrationDate_ValetUploads");

                entity.Property(e => e.RegistrationStatusValetUploads).HasColumnName("RegistrationStatus_ValetUploads");

                entity.Property(e => e.RegistrationTimeValetUploads).HasColumnName("RegistrationTime_ValetUploads");

                entity.Property(e => e.ValetUploads1).HasColumnName("ValetUploads");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.ValetUploads)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_IssuingPublishCertificate_ValetUploads");
            });

            modelBuilder.Entity<VersionInsertDecide>(entity =>
            {
                entity.ToTable("versionInsertDecide");

                entity.Property(e => e.AuditStatusVersionInsertDecide).HasColumnName("AuditStatus_versionInsertDecide");

                entity.Property(e => e.CreatorVersionInsertDecide).HasColumnName("Creator_versionInsertDecide");

                entity.Property(e => e.DdlOrgDecide).HasColumnName("ddlOrgDecide");

                entity.Property(e => e.InstanceIdVersionInsertDecide).HasColumnName("InstanceId_versionInsertDecide");

                entity.Property(e => e.InstanceSridVersionInsertDecide).HasColumnName("InstanceSRId_versionInsertDecide");

                entity.Property(e => e.IpVersionInsertDecide).HasColumnName("IP_versionInsertDecide");

                entity.Property(e => e.RegistrationDateVersionInsertDecide).HasColumnName("RegistrationDate_versionInsertDecide");

                entity.Property(e => e.RegistrationStatusVersionInsertDecide).HasColumnName("RegistrationStatus_versionInsertDecide");

                entity.Property(e => e.RegistrationTimeVersionInsertDecide).HasColumnName("RegistrationTime_versionInsertDecide");

                entity.Property(e => e.TxtCompanyName).HasColumnName("txtCompanyName");
            });

            modelBuilder.Entity<VgPrimaryInsertion>(entity =>
            {
                entity.ToTable("VG_PrimaryInsertion");

                entity.Property(e => e.AuditStatusVgPrimaryInsertion).HasColumnName("AuditStatus_VG_PrimaryInsertion");

                entity.Property(e => e.CreatorVgPrimaryInsertion).HasColumnName("Creator_VG_PrimaryInsertion");

                entity.Property(e => e.DateFirstPublish).HasColumnName("date_firstPublish");

                entity.Property(e => e.DateFirstPublishGregorian)
                    .HasColumnName("date_firstPublish_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.InstanceIdVgPrimaryInsertion).HasColumnName("InstanceId_VG_PrimaryInsertion");

                entity.Property(e => e.InstanceSridVgPrimaryInsertion).HasColumnName("InstanceSRId_VG_PrimaryInsertion");

                entity.Property(e => e.IpVgPrimaryInsertion).HasColumnName("IP_VG_PrimaryInsertion");

                entity.Property(e => e.RegistrationDateVgPrimaryInsertion).HasColumnName("RegistrationDate_VG_PrimaryInsertion");

                entity.Property(e => e.RegistrationStatusVgPrimaryInsertion).HasColumnName("RegistrationStatus_VG_PrimaryInsertion");

                entity.Property(e => e.RegistrationTimeVgPrimaryInsertion).HasColumnName("RegistrationTime_VG_PrimaryInsertion");

                entity.Property(e => e.TxtName).HasColumnName("txt_name");

                entity.Property(e => e.TxtProducer).HasColumnName("txt_producer");

                entity.Property(e => e.TxtSecondName).HasColumnName("txt_secondName");
            });

            modelBuilder.Entity<VideoUpload>(entity =>
            {
                entity.Property(e => e.AuditStatusVideoUpload).HasColumnName("AuditStatus_VideoUpload");

                entity.Property(e => e.CreatorVideoUpload).HasColumnName("Creator_VideoUpload");

                entity.Property(e => e.InstanceIdVideoUpload).HasColumnName("InstanceId_VideoUpload");

                entity.Property(e => e.InstanceSridVideoUpload).HasColumnName("InstanceSRId_VideoUpload");

                entity.Property(e => e.IpVideoUpload).HasColumnName("IP_VideoUpload");

                entity.Property(e => e.RegistrationDateVideoUpload).HasColumnName("RegistrationDate_VideoUpload");

                entity.Property(e => e.RegistrationStatusVideoUpload).HasColumnName("RegistrationStatus_VideoUpload");

                entity.Property(e => e.RegistrationTimeVideoUpload).HasColumnName("RegistrationTime_VideoUpload");

                entity.Property(e => e.TxaComment).HasColumnName("txaComment");

                entity.Property(e => e.TxtTitle).HasColumnName("txtTitle");

                entity.Property(e => e.VideoUpload1).HasColumnName("VideoUpload");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.VideoUpload)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_GamerVideo_VideoUpload");
            });

            modelBuilder.Entity<WebServices>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.WebServices)
                    .HasForeignKey<WebServices>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.WebServices_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<WfiOveralReport>(entity =>
            {
                entity.ToTable("WFI_OVERAL_REPORT");

                entity.Property(e => e.AuditStatusWfiOveralReport).HasColumnName("AuditStatus_WFI_OVERAL_REPORT");

                entity.Property(e => e.CkReport).HasColumnName("ckReport");

                entity.Property(e => e.CreatorWfiOveralReport).HasColumnName("Creator_WFI_OVERAL_REPORT");

                entity.Property(e => e.DdlOwner).HasColumnName("ddlOwner");

                entity.Property(e => e.InstanceIdWfiOveralReport).HasColumnName("InstanceId_WFI_OVERAL_REPORT");

                entity.Property(e => e.InstanceSridWfiOveralReport).HasColumnName("InstanceSRId_WFI_OVERAL_REPORT");

                entity.Property(e => e.IpWfiOveralReport).HasColumnName("IP_WFI_OVERAL_REPORT");

                entity.Property(e => e.RegistrationDateWfiOveralReport).HasColumnName("RegistrationDate_WFI_OVERAL_REPORT");

                entity.Property(e => e.RegistrationStatusWfiOveralReport).HasColumnName("RegistrationStatus_WFI_OVERAL_REPORT");

                entity.Property(e => e.RegistrationTimeWfiOveralReport).HasColumnName("RegistrationTime_WFI_OVERAL_REPORT");
            });

            modelBuilder.Entity<WfProgressDetails>(entity =>
            {
                entity.HasIndex(e => e.WorkFlowProgressId)
                    .HasName("IX_WorkFlowProgress_Id");

                entity.Property(e => e.WorkFlowProgressId).HasColumnName("WorkFlowProgress_Id");

                entity.HasOne(d => d.WorkFlowProgress)
                    .WithMany(p => p.WfProgressDetails)
                    .HasForeignKey(d => d.WorkFlowProgressId)
                    .HasConstraintName("FK_dbo.WfProgressDetails_dbo.WorkFlowProgresses_WorkFlowProgress_Id");
            });

            modelBuilder.Entity<WfwCalculations>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.WfwCalculations)
                    .HasForeignKey<WfwCalculations>(d => d.Id)
                    .HasConstraintName("FK_dbo.WfwCalculations_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<WfwConditions>(entity =>
            {
                entity.HasIndex(e => e.OperationId)
                    .HasName("IX_OperationId");

                entity.Property(e => e.NodeConditionId).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.WfwConditions)
                    .HasForeignKey(d => d.OperationId)
                    .HasConstraintName("FK_dbo.WfwConditions_dbo.WfwOperations_OperationId");
            });

            modelBuilder.Entity<WfwDecisions>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.WfwDecisions)
                    .HasForeignKey<WfwDecisions>(d => d.Id)
                    .HasConstraintName("FK_dbo.WfwDecisions_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<WfwInstances>(entity =>
            {
                entity.HasIndex(e => e.WorkFlowDetailId)
                    .HasName("IX_WorkFlowDetailId");

                entity.Property(e => e.ProgressBarStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RegTime).HasColumnType("datetime");

                entity.HasOne(d => d.WorkFlowDetail)
                    .WithMany(p => p.WfwInstances)
                    .HasForeignKey(d => d.WorkFlowDetailId)
                    .HasConstraintName("FK_dbo.WfwInstances_dbo.WorkFlowDetails_WorkFlowDetailId");
            });

            modelBuilder.Entity<WfwInstanceStateReceivers>(entity =>
            {
                entity.HasIndex(e => e.WfwInstanceStateId)
                    .HasName("IX_WfwInstanceStateId");

                entity.Property(e => e.DoDate).HasColumnType("datetime");

                entity.Property(e => e.RegDate).HasColumnType("datetime");

                entity.Property(e => e.ViewDate).HasColumnType("datetime");

                entity.HasOne(d => d.WfwInstanceState)
                    .WithMany(p => p.WfwInstanceStateReceivers)
                    .HasForeignKey(d => d.WfwInstanceStateId)
                    .HasConstraintName("FK_dbo.WfwInstanceStateReceivers_dbo.WfwInstanceStates_WfwInstanceStateId");
            });

            modelBuilder.Entity<WfwInstanceStates>(entity =>
            {
                entity.HasIndex(e => e.WfwInstanceId)
                    .HasName("IX_WfwInstanceId");

                entity.Property(e => e.RegDate).HasColumnType("datetime");

                entity.HasOne(d => d.WfwInstance)
                    .WithMany(p => p.WfwInstanceStates)
                    .HasForeignKey(d => d.WfwInstanceId)
                    .HasConstraintName("FK_dbo.WfwInstanceStates_dbo.WfwInstances_WfwInstanceId");
            });

            modelBuilder.Entity<WfwOperations>(entity =>
            {
                entity.HasIndex(e => e.DesisionId)
                    .HasName("IX_DesisionId");

                entity.HasOne(d => d.Desision)
                    .WithMany(p => p.WfwOperations)
                    .HasForeignKey(d => d.DesisionId)
                    .HasConstraintName("FK_dbo.WfwOperations_dbo.WfwDecisions_DesisionId");
            });

            modelBuilder.Entity<WfwRecordStateReceiverResults>(entity =>
            {
                entity.HasIndex(e => e.WfwInstanceStateReceiverId)
                    .HasName("IX_WfwInstanceStateReceiverId");

                entity.HasOne(d => d.WfwInstanceStateReceiver)
                    .WithMany(p => p.WfwRecordStateReceiverResults)
                    .HasForeignKey(d => d.WfwInstanceStateReceiverId)
                    .HasConstraintName("FK_dbo.WfwRecordStateReceiverResults_dbo.WfwInstanceStateReceivers_WfwInstanceStateReceiverId");
            });

            modelBuilder.Entity<WiDataModelSession>(entity =>
            {
                entity.ToTable("WI_dataModelSession");

                entity.Property(e => e.AuditStatusWiDataModelSession).HasColumnName("AuditStatus_WI_dataModelSession");

                entity.Property(e => e.CreatorWiDataModelSession).HasColumnName("Creator_WI_dataModelSession");

                entity.Property(e => e.GdateSession).HasColumnName("gdateSession");

                entity.Property(e => e.GdateSessionGregorian)
                    .HasColumnName("gdateSession_gregorian")
                    .HasColumnType("datetime");

                entity.Property(e => e.InstanceIdWiDataModelSession).HasColumnName("InstanceId_WI_dataModelSession");

                entity.Property(e => e.InstanceSridWiDataModelSession).HasColumnName("InstanceSRId_WI_dataModelSession");

                entity.Property(e => e.IpWiDataModelSession).HasColumnName("IP_WI_dataModelSession");

                entity.Property(e => e.RegistrationDateWiDataModelSession).HasColumnName("RegistrationDate_WI_dataModelSession");

                entity.Property(e => e.RegistrationStatusWiDataModelSession).HasColumnName("RegistrationStatus_WI_dataModelSession");

                entity.Property(e => e.RegistrationTimeWiDataModelSession).HasColumnName("RegistrationTime_WI_dataModelSession");

                entity.Property(e => e.UplDoc).HasColumnName("uplDoc");
            });

            modelBuilder.Entity<WiRolesandaccess>(entity =>
            {
                entity.ToTable("WI_rolesandaccess");

                entity.Property(e => e.AuditStatusWiRolesandaccess).HasColumnName("AuditStatus_WI_rolesandaccess");

                entity.Property(e => e.CreatorWiRolesandaccess).HasColumnName("Creator_WI_rolesandaccess");

                entity.Property(e => e.InstanceIdWiRolesandaccess).HasColumnName("InstanceId_WI_rolesandaccess");

                entity.Property(e => e.InstanceSridWiRolesandaccess).HasColumnName("InstanceSRId_WI_rolesandaccess");

                entity.Property(e => e.IpWiRolesandaccess).HasColumnName("IP_WI_rolesandaccess");

                entity.Property(e => e.RegistrationDateWiRolesandaccess).HasColumnName("RegistrationDate_WI_rolesandaccess");

                entity.Property(e => e.RegistrationStatusWiRolesandaccess).HasColumnName("RegistrationStatus_WI_rolesandaccess");

                entity.Property(e => e.RegistrationTimeWiRolesandaccess).HasColumnName("RegistrationTime_WI_rolesandaccess");

                entity.Property(e => e.TxtAccessGroup).HasColumnName("txtAccessGroup");
            });

            modelBuilder.Entity<WorFromInsertSub>(entity =>
            {
                entity.ToTable("worFromInsertSub");

                entity.Property(e => e.AuditStatusWorFromInsertSub).HasColumnName("AuditStatus_worFromInsertSub");

                entity.Property(e => e.CreatorWorFromInsertSub).HasColumnName("Creator_worFromInsertSub");

                entity.Property(e => e.InstanceIdWorFromInsertSub).HasColumnName("InstanceId_worFromInsertSub");

                entity.Property(e => e.InstanceSridWorFromInsertSub).HasColumnName("InstanceSRId_worFromInsertSub");

                entity.Property(e => e.IpWorFromInsertSub).HasColumnName("IP_worFromInsertSub");

                entity.Property(e => e.RegistrationDateWorFromInsertSub).HasColumnName("RegistrationDate_worFromInsertSub");

                entity.Property(e => e.RegistrationStatusWorFromInsertSub).HasColumnName("RegistrationStatus_worFromInsertSub");

                entity.Property(e => e.RegistrationTimeWorFromInsertSub).HasColumnName("RegistrationTime_worFromInsertSub");

                entity.Property(e => e.TxtDbformName).HasColumnName("txtDBFormName");

                entity.Property(e => e.TxtDescription).HasColumnName("txtDescription");

                entity.Property(e => e.TxtFormName).HasColumnName("txtFormName");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.WorFromInsertSub)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_workFlowFormInsertion_worFromInsertSub");
            });

            modelBuilder.Entity<WorkExperience>(entity =>
            {
                entity.Property(e => e.AuditStatusWorkExperience).HasColumnName("AuditStatus_WorkExperience");

                entity.Property(e => e.CreatorWorkExperience).HasColumnName("Creator_WorkExperience");

                entity.Property(e => e.DdlServiceType).HasColumnName("ddlServiceType");

                entity.Property(e => e.InstanceIdWorkExperience).HasColumnName("InstanceId_WorkExperience");

                entity.Property(e => e.InstanceSridWorkExperience).HasColumnName("InstanceSRId_WorkExperience");

                entity.Property(e => e.IpWorkExperience).HasColumnName("IP_WorkExperience");

                entity.Property(e => e.RegistrationDateWorkExperience).HasColumnName("RegistrationDate_WorkExperience");

                entity.Property(e => e.RegistrationStatusWorkExperience).HasColumnName("RegistrationStatus_WorkExperience");

                entity.Property(e => e.RegistrationTimeWorkExperience).HasColumnName("RegistrationTime_WorkExperience");

                entity.Property(e => e.TxaDueToLeave).HasColumnName("txaDueToLeave");

                entity.Property(e => e.TxtActivityType).HasColumnName("txtActivityType");

                entity.Property(e => e.TxtPost).HasColumnName("txtPost");

                entity.Property(e => e.TxtWorkPlace).HasColumnName("txtWorkPlace");

                entity.HasOne(d => d.ParentRecord)
                    .WithMany(p => p.WorkExperience)
                    .HasForeignKey(d => d.ParentRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_InstitutionExecutivesProfile_WorkExperience");
            });

            modelBuilder.Entity<WorkflowAnalysePrimaryDocs>(entity =>
            {
                entity.ToTable("workflowAnalysePrimaryDocs");

                entity.Property(e => e.AuditStatusWorkflowAnalysePrimaryDocs).HasColumnName("AuditStatus_workflowAnalysePrimaryDocs");

                entity.Property(e => e.CreatorWorkflowAnalysePrimaryDocs).HasColumnName("Creator_workflowAnalysePrimaryDocs");

                entity.Property(e => e.InstanceIdWorkflowAnalysePrimaryDocs).HasColumnName("InstanceId_workflowAnalysePrimaryDocs");

                entity.Property(e => e.InstanceSridWorkflowAnalysePrimaryDocs).HasColumnName("InstanceSRId_workflowAnalysePrimaryDocs");

                entity.Property(e => e.IpWorkflowAnalysePrimaryDocs).HasColumnName("IP_workflowAnalysePrimaryDocs");

                entity.Property(e => e.RadPrority).HasColumnName("radPrority");

                entity.Property(e => e.RegistrationDateWorkflowAnalysePrimaryDocs).HasColumnName("RegistrationDate_workflowAnalysePrimaryDocs");

                entity.Property(e => e.RegistrationStatusWorkflowAnalysePrimaryDocs).HasColumnName("RegistrationStatus_workflowAnalysePrimaryDocs");

                entity.Property(e => e.RegistrationTimeWorkflowAnalysePrimaryDocs).HasColumnName("RegistrationTime_workflowAnalysePrimaryDocs");

                entity.Property(e => e.TxtCode).HasColumnName("txtCode");

                entity.Property(e => e.TxtName).HasColumnName("txtName");

                entity.Property(e => e.TxtOwner).HasColumnName("txtOwner");

                entity.Property(e => e.UplConfirmation).HasColumnName("uplConfirmation");

                entity.Property(e => e.UplDocs).HasColumnName("uplDocs");
            });

            modelBuilder.Entity<Workflowbugsreportme>(entity =>
            {
                entity.ToTable("workflowbugsreportme");

                entity.Property(e => e.AuditStatusWorkflowbugsreportme).HasColumnName("AuditStatus_workflowbugsreportme");

                entity.Property(e => e.CkWfreport).HasColumnName("ckWFReport");

                entity.Property(e => e.CreatorWorkflowbugsreportme).HasColumnName("Creator_workflowbugsreportme");

                entity.Property(e => e.InstanceIdWorkflowbugsreportme).HasColumnName("InstanceId_workflowbugsreportme");

                entity.Property(e => e.InstanceSridWorkflowbugsreportme).HasColumnName("InstanceSRId_workflowbugsreportme");

                entity.Property(e => e.IpWorkflowbugsreportme).HasColumnName("IP_workflowbugsreportme");

                entity.Property(e => e.RegistrationDateWorkflowbugsreportme).HasColumnName("RegistrationDate_workflowbugsreportme");

                entity.Property(e => e.RegistrationStatusWorkflowbugsreportme).HasColumnName("RegistrationStatus_workflowbugsreportme");

                entity.Property(e => e.RegistrationTimeWorkflowbugsreportme).HasColumnName("RegistrationTime_workflowbugsreportme");
            });

            modelBuilder.Entity<WorkFlowDetails>(entity =>
            {
                entity.HasIndex(e => e.WorkFlowProgressId)
                    .HasName("IX_WorkFlowProgress_Id");

                entity.Property(e => e.Json).HasColumnName("JSon");

                entity.Property(e => e.JsonBpmn).HasColumnName("JSonBpmn");

                entity.Property(e => e.SubUnitId).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitId).HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkFlowProgressId).HasColumnName("WorkFlowProgress_Id");

                entity.HasOne(d => d.WorkFlowProgress)
                    .WithMany(p => p.WorkFlowDetails)
                    .HasForeignKey(d => d.WorkFlowProgressId)
                    .HasConstraintName("FK_dbo.WorkFlowDetails_dbo.WorkFlowProgresses_WorkFlowProgress_Id");
            });

            modelBuilder.Entity<WorkflowFinalDocs>(entity =>
            {
                entity.ToTable("workflowFinalDocs");

                entity.Property(e => e.AuditStatusWorkflowFinalDocs).HasColumnName("AuditStatus_workflowFinalDocs");

                entity.Property(e => e.CreatorWorkflowFinalDocs).HasColumnName("Creator_workflowFinalDocs");

                entity.Property(e => e.InstanceIdWorkflowFinalDocs).HasColumnName("InstanceId_workflowFinalDocs");

                entity.Property(e => e.InstanceSridWorkflowFinalDocs).HasColumnName("InstanceSRId_workflowFinalDocs");

                entity.Property(e => e.IpWorkflowFinalDocs).HasColumnName("IP_workflowFinalDocs");

                entity.Property(e => e.RegistrationDateWorkflowFinalDocs).HasColumnName("RegistrationDate_workflowFinalDocs");

                entity.Property(e => e.RegistrationStatusWorkflowFinalDocs).HasColumnName("RegistrationStatus_workflowFinalDocs");

                entity.Property(e => e.RegistrationTimeWorkflowFinalDocs).HasColumnName("RegistrationTime_workflowFinalDocs");

                entity.Property(e => e.UplC1).HasColumnName("uplC1");

                entity.Property(e => e.UplC2).HasColumnName("uplC2");

                entity.Property(e => e.UplFinalDocs).HasColumnName("uplFinalDocs");
            });

            modelBuilder.Entity<WorkFlowFormInsertion>(entity =>
            {
                entity.ToTable("workFlowFormInsertion");

                entity.Property(e => e.AuditStatusWorkFlowFormInsertion).HasColumnName("AuditStatus_workFlowFormInsertion");

                entity.Property(e => e.CreatorWorkFlowFormInsertion).HasColumnName("Creator_workFlowFormInsertion");

                entity.Property(e => e.InstanceIdWorkFlowFormInsertion).HasColumnName("InstanceId_workFlowFormInsertion");

                entity.Property(e => e.InstanceSridWorkFlowFormInsertion).HasColumnName("InstanceSRId_workFlowFormInsertion");

                entity.Property(e => e.IpWorkFlowFormInsertion).HasColumnName("IP_workFlowFormInsertion");

                entity.Property(e => e.RegistrationDateWorkFlowFormInsertion).HasColumnName("RegistrationDate_workFlowFormInsertion");

                entity.Property(e => e.RegistrationStatusWorkFlowFormInsertion).HasColumnName("RegistrationStatus_workFlowFormInsertion");

                entity.Property(e => e.RegistrationTimeWorkFlowFormInsertion).HasColumnName("RegistrationTime_workFlowFormInsertion");
            });

            modelBuilder.Entity<WorkFlowStartEnds>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.WorkFlowStartEnds)
                    .HasForeignKey<WorkFlowStartEnds>(d => d.Id)
                    .HasConstraintName("FK_dbo.WorkFlowStartEnds_dbo.NodeDetails_Id");
            });

            modelBuilder.Entity<WRadebandiSazmani>(entity =>
            {
                entity.ToTable("wRadebandiSazmani");

                entity.Property(e => e.AuditStatusWRadebandiSazmani).HasColumnName("AuditStatus_wRadebandiSazmani");

                entity.Property(e => e.CreatorWRadebandiSazmani).HasColumnName("Creator_wRadebandiSazmani");

                entity.Property(e => e.DdlRate).HasColumnName("ddlRate");

                entity.Property(e => e.InstanceIdWRadebandiSazmani).HasColumnName("InstanceId_wRadebandiSazmani");

                entity.Property(e => e.InstanceSridWRadebandiSazmani).HasColumnName("InstanceSRId_wRadebandiSazmani");

                entity.Property(e => e.IpWRadebandiSazmani).HasColumnName("IP_wRadebandiSazmani");

                entity.Property(e => e.RegistrationDateWRadebandiSazmani).HasColumnName("RegistrationDate_wRadebandiSazmani");

                entity.Property(e => e.RegistrationStatusWRadebandiSazmani).HasColumnName("RegistrationStatus_wRadebandiSazmani");

                entity.Property(e => e.RegistrationTimeWRadebandiSazmani).HasColumnName("RegistrationTime_wRadebandiSazmani");

                entity.Property(e => e.TxaKholaseRadeBandi).HasColumnName("txaKholaseRadeBandi");

                entity.Property(e => e.UploadIcon).HasColumnName("uploadIcon");
            });
        }
    }
}
